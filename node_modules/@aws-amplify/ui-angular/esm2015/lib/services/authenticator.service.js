import { Injectable } from '@angular/core';
import { Logger } from '@aws-amplify/core';
import { createAuthenticatorMachine, getSendEventAliases, getServiceContextFacade, } from '@aws-amplify/ui';
import { interpret } from 'xstate';
import { translate } from '@aws-amplify/ui';
import * as i0 from "@angular/core";
const logger = new Logger('state-machine');
/**
 * AuthenticatorService provides access to the authenticator state and context.
 */
export class AuthenticatorService {
    constructor() {
        const machine = createAuthenticatorMachine();
        const authService = interpret(machine).start();
        this._machineSubscription = authService.subscribe((state) => {
            this._authState = state;
            this._facade = getServiceContextFacade(state);
        });
        this._sendEventAliases = getSendEventAliases(authService.send);
        this._authService = authService;
    }
    ngOnDestroy() {
        if (this._machineSubscription)
            this._machineSubscription.unsubscribe();
    }
    /**
     * Context facades
     */
    get error() {
        var _a;
        return translate((_a = this._facade) === null || _a === void 0 ? void 0 : _a.error);
    }
    get hasValidationErrors() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.hasValidationErrors;
    }
    get isPending() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.isPending;
    }
    get route() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.route;
    }
    get authStatus() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.authStatus;
    }
    get user() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.user;
    }
    get validationErrors() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.validationErrors;
    }
    get codeDeliveryDetails() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.codeDeliveryDetails;
    }
    /**
     * Service facades
     */
    get updateForm() {
        return this._sendEventAliases.updateForm;
    }
    get updateBlur() {
        return this._sendEventAliases.updateBlur;
    }
    get resendCode() {
        return this._sendEventAliases.resendCode;
    }
    get signOut() {
        return this._sendEventAliases.signOut;
    }
    get submitForm() {
        return this._sendEventAliases.submitForm;
    }
    /**
     * Transition facades
     */
    get toFederatedSignIn() {
        return this._sendEventAliases.toFederatedSignIn;
    }
    get toResetPassword() {
        return this._sendEventAliases.toResetPassword;
    }
    get toSignIn() {
        return this._sendEventAliases.toSignIn;
    }
    get toSignUp() {
        return this._sendEventAliases.toSignUp;
    }
    get skipVerification() {
        return this._sendEventAliases.skipVerification;
    }
    /**
     * Internal utility functions
     */
    /** @deprecated For internal use only */
    get authState() {
        return this._authState;
    }
    /** @deprecated For internal use only */
    get authService() {
        return this._authService;
    }
    /** @deprecated For internal use only */
    get context() {
        return this._authState.context;
    }
    /** @deprecated For internal use only */
    get slotContext() {
        const slotContext = Object.assign(Object.assign({}, this._facade), this._sendEventAliases);
        return Object.assign(Object.assign({}, slotContext), { $implicit: Object.assign({}, slotContext) });
    }
    /** @deprecated For internal use only */
    subscribe(callback) {
        if (this._authService) {
            return this._authService.subscribe(callback);
        }
        else {
            logger.error('Subscription attempted before machine was created. This is likely a bug on the library, please consider filing a bug.');
        }
    }
    /** @deprecated For internal use only */
    send(event) {
        this.authService.send(event);
    }
}
AuthenticatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticatorService_Factory() { return new AuthenticatorService(); }, token: AuthenticatorService, providedIn: "root" });
AuthenticatorService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthenticatorService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,