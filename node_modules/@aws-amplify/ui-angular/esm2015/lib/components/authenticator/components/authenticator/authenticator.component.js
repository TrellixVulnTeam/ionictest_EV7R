import { ChangeDetectorRef, Component, ContentChildren, Input, ViewEncapsulation, } from '@angular/core';
import { defaultAuthHubHandler, listenToAuthHub, translate, } from '@aws-amplify/ui';
import { AmplifySlotDirective } from '../../../../utilities/amplify-slot/amplify-slot.directive';
import { CustomComponentsService } from '../../../../services/custom-components.service';
import { AuthenticatorService } from '../../../../services/authenticator.service';
export class AuthenticatorComponent {
    constructor(authenticator, contextService, changeDetector) {
        this.authenticator = authenticator;
        this.contextService = contextService;
        this.changeDetector = changeDetector;
        this.customComponentQuery = null;
        // translated texts
        this.signInTitle = translate('Sign In');
        this.signUpTitle = translate('Create Account');
        this.hasInitialized = false;
        this.isHandlingHubEvent = false;
    }
    ngOnInit() {
        const { initialState, loginMechanisms, services, signUpAttributes, socialProviders, formFields, } = this;
        const { authService } = this.authenticator;
        this.unsubscribeHub = listenToAuthHub(authService, (data, service) => {
            defaultAuthHubHandler(data, service);
            /**
             * Hub events aren't properly caught by Angular, because they are
             * synchronous events. Angular tracks async network events and
             * html events, but not synchronous events like hub.
             *
             * On any notable hub events, we run change detection manually.
             */
            this.changeDetector.detectChanges();
            /**
             * Hub events that we handle can lead to multiple state changes:
             * e.g. `authenticated` -> `signOut` -> initialState.
             *
             * We want to ensure change detection runs all the way, until
             * we reach back to the initial state. Setting the below flag
             * to true to until we reach initial state.
             */
            this.isHandlingHubEvent = true;
        });
        /**
         * Subscribes to state machine changes and sends INIT event
         * once machine reaches 'setup' state.
         */
        this.unsubscribeMachine = this.authenticator.subscribe(() => {
            const { route } = this.authenticator;
            if (this.isHandlingHubEvent) {
                this.changeDetector.detectChanges();
                const initialStateWithDefault = initialState !== null && initialState !== void 0 ? initialState : 'signIn';
                // We can stop manual change detection if we're back to the initial state
                if (route === initialStateWithDefault) {
                    this.isHandlingHubEvent = false;
                }
            }
            if (!this.hasInitialized && route === 'setup') {
                this.authenticator.send({
                    type: 'INIT',
                    data: {
                        initialState,
                        loginMechanisms,
                        services,
                        signUpAttributes,
                        socialProviders,
                        formFields,
                    },
                });
                this.hasInitialized = true;
            }
        }).unsubscribe;
        /**
         * handling translations after content init, because authenticator and its
         * translations might be initialized before the main app's `ngOnInit` is run.
         */
        this.signInTitle = translate('Sign In');
        this.signUpTitle = translate('Create Account');
    }
    /**
     * Lifecycle Methods
     */
    ngAfterContentInit() {
        this.contextService.customComponents = this.mapCustomComponents(this.customComponentQuery);
    }
    ngOnDestroy() {
        if (this.unsubscribeMachine)
            this.unsubscribeMachine();
        if (this.unsubscribeHub)
            this.unsubscribeHub();
    }
    /**
     * Class Functions
     */
    // context passed to "authenticated" slot
    get context() {
        return this.authenticator.slotContext;
    }
    get route() {
        return this.authenticator.route;
    }
    onTabChange() {
        const route = this.authenticator.route;
        if (route === 'signIn') {
            this.authenticator.toSignUp();
        }
        else {
            this.authenticator.toSignIn();
        }
    }
    hasTabs() {
        const { route } = this.authenticator;
        return route === 'signIn' || route === 'signUp';
    }
    hasRouteComponent() {
        const { route } = this.authenticator;
        switch (route) {
            case 'authenticated':
            case 'idle':
            case 'setup':
            case 'signOut':
            case 'autoSignIn':
                return false;
            default:
                return true;
        }
    }
    mapCustomComponents(componentQuery) {
        if (!componentQuery)
            return {};
        const customComponents = {};
        componentQuery.forEach((component) => {
            customComponents[component.name] = component.template;
        });
        return customComponents;
    }
}
AuthenticatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'amplify-authenticator',
                template: "<div\n  data-amplify-authenticator\n  [attr.data-variation]=\"variation\"\n  *ngIf=\"hasRouteComponent()\"\n>\n  <div data-amplify-container>\n    <amplify-slot name=\"header\" [context]=\"context\"></amplify-slot>\n    <div\n      data-amplify-router\n      [attr.data-amplify-router-content]=\"hasTabs() ? undefined : ''\"\n    >\n      <amplify-tabs\n        (tabChange)=\"onTabChange()\"\n        *ngIf=\"(route === 'signIn' || route === 'signUp') && !hideSignUp\"\n      >\n        <amplify-tab-item\n          [title]=\"signInTitle\"\n          [active]=\"route === 'signIn'\"\n          data-amplify-router-content\n        >\n          <!-- signIn component -->\n          <amplify-slot\n            name=\"sign-in\"\n            [context]=\"context\"\n            *ngIf=\"route === 'signIn'\"\n          >\n            <amplify-sign-in></amplify-sign-in>\n          </amplify-slot>\n        </amplify-tab-item>\n        <amplify-tab-item\n          [title]=\"signUpTitle\"\n          [active]=\"route === 'signUp'\"\n          data-amplify-router-content\n        >\n          <!-- signUp component -->\n          <amplify-slot\n            name=\"sign-up\"\n            [context]=\"context\"\n            *ngIf=\"route === 'signUp'\"\n          >\n            <amplify-sign-up></amplify-sign-up>\n          </amplify-slot>\n        </amplify-tab-item>\n      </amplify-tabs>\n\n      <amplify-slot\n        name=\"sign-in\"\n        [context]=\"context\"\n        *ngIf=\"route === 'signIn' && hideSignUp\"\n      >\n        <amplify-sign-in></amplify-sign-in>\n      </amplify-slot>\n\n      <!-- confirmSignUp content -->\n      <amplify-slot\n        name=\"confirm-sign-up\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmSignUp'\"\n      >\n        <amplify-confirm-sign-up></amplify-confirm-sign-up>\n      </amplify-slot>\n\n      <!-- confirmSignIn content -->\n      <amplify-slot\n        name=\"confirm-sign-in\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmSignIn'\"\n      >\n        <amplify-confirm-sign-in></amplify-confirm-sign-in>\n      </amplify-slot>\n\n      <!-- setupTotp content -->\n      <amplify-slot\n        name=\"setup-totp\"\n        [context]=\"context\"\n        *ngIf=\"route === 'setupTOTP'\"\n      >\n        <amplify-setup-totp></amplify-setup-totp>\n      </amplify-slot>\n\n      <!-- forceNewPassword content -->\n      <amplify-slot\n        name=\"force-new-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'forceNewPassword'\"\n      >\n        <amplify-force-new-password></amplify-force-new-password>\n      </amplify-slot>\n\n      <!-- resetPassword content -->\n      <amplify-slot\n        name=\"reset-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'resetPassword'\"\n      >\n        <amplify-reset-password></amplify-reset-password>\n      </amplify-slot>\n\n      <!-- confirmResetPassword content -->\n      <amplify-slot\n        name=\"confirm-reset-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmResetPassword'\"\n      >\n        <amplify-confirm-reset-password></amplify-confirm-reset-password>\n      </amplify-slot>\n\n      <!-- verifyUser content -->\n      <amplify-slot\n        name=\"verify-user\"\n        [context]=\"context\"\n        *ngIf=\"route === 'verifyUser'\"\n      >\n        <amplify-verify-user></amplify-verify-user>\n      </amplify-slot>\n\n      <!-- confirmVerifyUser content -->\n      <amplify-slot\n        name=\"confirm-verify-user\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmVerifyUser'\"\n      >\n        <amplify-confirm-verify-user></amplify-confirm-verify-user>\n      </amplify-slot>\n    </div>\n\n    <amplify-slot name=\"footer\" [context]=\"context\"></amplify-slot>\n  </div>\n</div>\n\n<!-- signedIn content is rendered outside authenticator so it's not styled by authenticator -->\n<amplify-slot\n  name=\"authenticated\"\n  [context]=\"context\"\n  *ngIf=\"route === 'authenticated'\"\n>\n  <ng-content></ng-content>\n</amplify-slot>\n",
                providers: [CustomComponentsService],
                encapsulation: ViewEncapsulation.None
            },] }
];
AuthenticatorComponent.ctorParameters = () => [
    { type: AuthenticatorService },
    { type: CustomComponentsService },
    { type: ChangeDetectorRef }
];
AuthenticatorComponent.propDecorators = {
    formFields: [{ type: Input }],
    initialState: [{ type: Input }],
    loginMechanisms: [{ type: Input }],
    services: [{ type: Input }],
    signUpAttributes: [{ type: Input }],
    socialProviders: [{ type: Input }],
    variation: [{ type: Input }],
    hideSignUp: [{ type: Input }],
    customComponentQuery: [{ type: ContentChildren, args: [AmplifySlotDirective,] }]
};
//# sourceMappingURL=data:application/json;base64,