import { Component, HostBinding, Input } from '@angular/core';
import { hasTranslation, translate, getDefaultFormFields, getActorContext, getSortedFormFields, applyDefaults, sortFormFields, } from '@aws-amplify/ui';
import { AuthenticatorService } from '../../../../services/authenticator.service';
/**
 * Sorts the given formFields, then renders them in order.
 */
export class BaseFormFieldsComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.display = 'contents';
        this.formFields = [];
    }
    ngOnInit() {
        const state = this.authenticator.authState;
        this.formFields = getSortedFormFields(this.route, state);
        if (this.route === 'confirmSignUp') {
            this.handleConfirmSignUp();
        }
    }
    handleConfirmSignUp() {
        /**
         * @todo(breaking): Angular `confirmSignUp` has different placholder here from other frameworks.
         *
         * Translating here in a backwards-compatible manner, but should be resolved in next major version.
         */
        var _a;
        const state = this.authenticator.authState;
        // backwards compatible placeholder text
        const placeholder = !hasTranslation('Confirmation Code')
            ? translate('Enter your code') // prioritize new placeholder
            : translate('Confirmation Code'); // legacy placeholder
        let defaultFormFields = getDefaultFormFields(this.route, state);
        if (defaultFormFields.confirmation_code.placeholder) {
            defaultFormFields.confirmation_code.placeholder = placeholder;
        }
        const customFormFields = ((_a = getActorContext(state).formFields) === null || _a === void 0 ? void 0 : _a.confirmSignUp) || {};
        const newFormFields = applyDefaults(defaultFormFields, customFormFields);
        this.formFields = sortFormFields(newFormFields);
    }
}
BaseFormFieldsComponent.decorators = [
    { type: Component, args: [{
                selector: 'amplify-base-form-fields',
                template: "<ng-container *ngFor=\"let formField of formFields\">\n  <amplify-form-field\n    [name]=\"formField[0]\"\n    [formField]=\"formField[1]\"\n  ></amplify-form-field>\n</ng-container>\n"
            },] }
];
BaseFormFieldsComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
BaseFormFieldsComponent.propDecorators = {
    route: [{ type: Input }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1mb3JtLWZpZWxkcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS1hbmd1bGFyL3NyYy9saWIvY29tcG9uZW50cy9hdXRoZW50aWNhdG9yL2NvbXBvbmVudHMvYmFzZS1mb3JtLWZpZWxkcy9iYXNlLWZvcm0tZmllbGRzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUVMLGNBQWMsRUFDZCxTQUFTLEVBQ1Qsb0JBQW9CLEVBQ3BCLGVBQWUsRUFFZixtQkFBbUIsRUFDbkIsYUFBYSxFQUNiLGNBQWMsR0FDZixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBRWxGOztHQUVHO0FBS0gsTUFBTSxPQUFPLHVCQUF1QjtJQUtsQyxZQUFvQixhQUFtQztRQUFuQyxrQkFBYSxHQUFiLGFBQWEsQ0FBc0I7UUFIekIsWUFBTyxHQUFHLFVBQVUsQ0FBQztRQUM1QyxlQUFVLEdBQW9CLEVBQUUsQ0FBQztJQUVrQixDQUFDO0lBRTNELFFBQVE7UUFDTixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFekQsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLGVBQWUsRUFBRTtZQUNsQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFTyxtQkFBbUI7UUFDekI7Ozs7V0FJRzs7UUFFSCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztRQUUzQyx3Q0FBd0M7UUFDeEMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxjQUFjLENBQUMsbUJBQW1CLENBQUM7WUFDdEQsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLDZCQUE2QjtZQUM1RCxDQUFDLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxxQkFBcUI7UUFFekQsSUFBSSxpQkFBaUIsR0FBRyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWhFLElBQUksaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFO1lBQ25ELGlCQUFpQixDQUFDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7U0FDL0Q7UUFFRCxNQUFNLGdCQUFnQixHQUNwQixPQUFBLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLDBDQUFFLGFBQWEsS0FBSSxFQUFFLENBQUM7UUFFekQsTUFBTSxhQUFhLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7O1lBN0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxvTUFBZ0Q7YUFDakQ7OztZQVJRLG9CQUFvQjs7O29CQVUxQixLQUFLO3NCQUNMLFdBQVcsU0FBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgRm9ybUZpZWxkQ29tcG9uZW50cyxcbiAgaGFzVHJhbnNsYXRpb24sXG4gIHRyYW5zbGF0ZSxcbiAgZ2V0RGVmYXVsdEZvcm1GaWVsZHMsXG4gIGdldEFjdG9yQ29udGV4dCxcbiAgRm9ybUZpZWxkc0FycmF5LFxuICBnZXRTb3J0ZWRGb3JtRmllbGRzLFxuICBhcHBseURlZmF1bHRzLFxuICBzb3J0Rm9ybUZpZWxkcyxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3VpJztcbmltcG9ydCB7IEF1dGhlbnRpY2F0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvYXV0aGVudGljYXRvci5zZXJ2aWNlJztcblxuLyoqXG4gKiBTb3J0cyB0aGUgZ2l2ZW4gZm9ybUZpZWxkcywgdGhlbiByZW5kZXJzIHRoZW0gaW4gb3JkZXIuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FtcGxpZnktYmFzZS1mb3JtLWZpZWxkcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9iYXNlLWZvcm0tZmllbGRzLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQmFzZUZvcm1GaWVsZHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBASW5wdXQoKSByb3V0ZTogRm9ybUZpZWxkQ29tcG9uZW50czsgLy8gZm9ybUZpZWxkcyB0byBzb3J0IGFuZCByZW5kZXJcbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5kaXNwbGF5JykgZGlzcGxheSA9ICdjb250ZW50cyc7XG4gIHB1YmxpYyBmb3JtRmllbGRzOiBGb3JtRmllbGRzQXJyYXkgPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0b3I6IEF1dGhlbnRpY2F0b3JTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5hdXRoZW50aWNhdG9yLmF1dGhTdGF0ZTtcbiAgICB0aGlzLmZvcm1GaWVsZHMgPSBnZXRTb3J0ZWRGb3JtRmllbGRzKHRoaXMucm91dGUsIHN0YXRlKTtcblxuICAgIGlmICh0aGlzLnJvdXRlID09PSAnY29uZmlybVNpZ25VcCcpIHtcbiAgICAgIHRoaXMuaGFuZGxlQ29uZmlybVNpZ25VcCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ29uZmlybVNpZ25VcCgpIHtcbiAgICAvKipcbiAgICAgKiBAdG9kbyhicmVha2luZyk6IEFuZ3VsYXIgYGNvbmZpcm1TaWduVXBgIGhhcyBkaWZmZXJlbnQgcGxhY2hvbGRlciBoZXJlIGZyb20gb3RoZXIgZnJhbWV3b3Jrcy5cbiAgICAgKlxuICAgICAqIFRyYW5zbGF0aW5nIGhlcmUgaW4gYSBiYWNrd2FyZHMtY29tcGF0aWJsZSBtYW5uZXIsIGJ1dCBzaG91bGQgYmUgcmVzb2x2ZWQgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuICAgICAqL1xuXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLmF1dGhlbnRpY2F0b3IuYXV0aFN0YXRlO1xuXG4gICAgLy8gYmFja3dhcmRzIGNvbXBhdGlibGUgcGxhY2Vob2xkZXIgdGV4dFxuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gIWhhc1RyYW5zbGF0aW9uKCdDb25maXJtYXRpb24gQ29kZScpXG4gICAgICA/IHRyYW5zbGF0ZSgnRW50ZXIgeW91ciBjb2RlJykgLy8gcHJpb3JpdGl6ZSBuZXcgcGxhY2Vob2xkZXJcbiAgICAgIDogdHJhbnNsYXRlKCdDb25maXJtYXRpb24gQ29kZScpOyAvLyBsZWdhY3kgcGxhY2Vob2xkZXJcblxuICAgIGxldCBkZWZhdWx0Rm9ybUZpZWxkcyA9IGdldERlZmF1bHRGb3JtRmllbGRzKHRoaXMucm91dGUsIHN0YXRlKTtcblxuICAgIGlmIChkZWZhdWx0Rm9ybUZpZWxkcy5jb25maXJtYXRpb25fY29kZS5wbGFjZWhvbGRlcikge1xuICAgICAgZGVmYXVsdEZvcm1GaWVsZHMuY29uZmlybWF0aW9uX2NvZGUucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBjdXN0b21Gb3JtRmllbGRzID1cbiAgICAgIGdldEFjdG9yQ29udGV4dChzdGF0ZSkuZm9ybUZpZWxkcz8uY29uZmlybVNpZ25VcCB8fCB7fTtcblxuICAgIGNvbnN0IG5ld0Zvcm1GaWVsZHMgPSBhcHBseURlZmF1bHRzKGRlZmF1bHRGb3JtRmllbGRzLCBjdXN0b21Gb3JtRmllbGRzKTtcbiAgICB0aGlzLmZvcm1GaWVsZHMgPSBzb3J0Rm9ybUZpZWxkcyhuZXdGb3JtRmllbGRzKTtcbiAgfVxufVxuIl19