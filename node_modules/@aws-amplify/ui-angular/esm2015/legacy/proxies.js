import { __decorate } from "tslib";
/* eslint-disable */
/* auto-generated angular directive proxies */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, NgZone, } from '@angular/core';
import { fromEvent } from 'rxjs';
export const proxyInputs = (Cmp, inputs) => {
    const Prototype = Cmp.prototype;
    inputs.forEach((item) => {
        Object.defineProperty(Prototype, item, {
            get() {
                return this.el[item];
            },
            set(val) {
                this.z.runOutsideAngular(() => (this.el[item] = val));
            },
        });
    });
};
export const proxyMethods = (Cmp, methods) => {
    const Prototype = Cmp.prototype;
    methods.forEach((methodName) => {
        Prototype[methodName] = function () {
            const args = arguments;
            return this.z.runOutsideAngular(() => this.el[methodName].apply(this.el, args));
        };
    });
};
export const proxyOutputs = (instance, el, events) => {
    events.forEach((eventName) => (instance[eventName] = fromEvent(el, eventName)));
};
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
export function ProxyCmp(opts) {
    const decorator = function (cls) {
        if (opts.inputs) {
            proxyInputs(cls, opts.inputs);
        }
        if (opts.methods) {
            proxyMethods(cls, opts.methods);
        }
        return cls;
    };
    return decorator;
}
let AmplifyAmazonButton = class AmplifyAmazonButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyAmazonButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-amazon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['clientId', 'handleAuthStateChange']
            },] }
];
AmplifyAmazonButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyAmazonButton = __decorate([
    ProxyCmp({ inputs: ['clientId', 'handleAuthStateChange'] })
], AmplifyAmazonButton);
export { AmplifyAmazonButton };
export class AmplifyAuthContainer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
AmplifyAuthContainer.decorators = [
    { type: Component, args: [{
                selector: 'amplify-auth-container',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
AmplifyAuthContainer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let AmplifyAuthFields = class AmplifyAuthFields {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyAuthFields.decorators = [
    { type: Component, args: [{
                selector: 'amplify-auth-fields',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['formFields']
            },] }
];
AmplifyAuthFields.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyAuthFields = __decorate([
    ProxyCmp({ inputs: ['formFields'] })
], AmplifyAuthFields);
export { AmplifyAuthFields };
let AmplifyAuth0Button = class AmplifyAuth0Button {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyAuth0Button.decorators = [
    { type: Component, args: [{
                selector: 'amplify-auth0-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['config', 'handleAuthStateChange']
            },] }
];
AmplifyAuth0Button.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyAuth0Button = __decorate([
    ProxyCmp({ inputs: ['config', 'handleAuthStateChange'] })
], AmplifyAuth0Button);
export { AmplifyAuth0Button };
let AmplifyAuthenticator = class AmplifyAuthenticator {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyAuthenticator.decorators = [
    { type: Component, args: [{
                selector: 'amplify-authenticator',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'federated',
                    'handleAuthStateChange',
                    'hideToast',
                    'initialAuthState',
                    'usernameAlias',
                ]
            },] }
];
AmplifyAuthenticator.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyAuthenticator = __decorate([
    ProxyCmp({
        inputs: [
            'federated',
            'handleAuthStateChange',
            'hideToast',
            'initialAuthState',
            'usernameAlias',
        ],
    })
], AmplifyAuthenticator);
export { AmplifyAuthenticator };
let AmplifyButton = class AmplifyButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['disabled', 'handleButtonClick', 'icon', 'type', 'variant']
            },] }
];
AmplifyButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyButton = __decorate([
    ProxyCmp({
        inputs: ['disabled', 'handleButtonClick', 'icon', 'type', 'variant'],
    })
], AmplifyButton);
export { AmplifyButton };
let AmplifyChatbot = class AmplifyChatbot {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
        proxyOutputs(this, this.el, ['chatCompleted']);
    }
};
AmplifyChatbot.decorators = [
    { type: Component, args: [{
                selector: 'amplify-chatbot',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'botName',
                    'botTitle',
                    'clearOnComplete',
                    'conversationModeOn',
                    'silenceThreshold',
                    'silenceTime',
                    'textEnabled',
                    'voiceEnabled',
                    'welcomeMessage',
                ]
            },] }
];
AmplifyChatbot.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyChatbot = __decorate([
    ProxyCmp({
        inputs: [
            'botName',
            'botTitle',
            'clearOnComplete',
            'conversationModeOn',
            'silenceThreshold',
            'silenceTime',
            'textEnabled',
            'voiceEnabled',
            'welcomeMessage',
        ],
    })
], AmplifyChatbot);
export { AmplifyChatbot };
let AmplifyCheckbox = class AmplifyCheckbox {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyCheckbox.decorators = [
    { type: Component, args: [{
                selector: 'amplify-checkbox',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['checked', 'disabled', 'fieldId', 'label', 'name', 'value']
            },] }
];
AmplifyCheckbox.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyCheckbox = __decorate([
    ProxyCmp({
        inputs: ['checked', 'disabled', 'fieldId', 'label', 'name', 'value'],
    })
], AmplifyCheckbox);
export { AmplifyCheckbox };
let AmplifyCodeField = class AmplifyCodeField {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyCodeField.decorators = [
    { type: Component, args: [{
                selector: 'amplify-code-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'hint',
                    'inputProps',
                    'label',
                    'placeholder',
                    'required',
                    'value',
                ]
            },] }
];
AmplifyCodeField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyCodeField = __decorate([
    ProxyCmp({
        inputs: [
            'disabled',
            'fieldId',
            'handleInputChange',
            'hint',
            'inputProps',
            'label',
            'placeholder',
            'required',
            'value',
        ],
    })
], AmplifyCodeField);
export { AmplifyCodeField };
let AmplifyConfirmSignIn = class AmplifyConfirmSignIn {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyConfirmSignIn.decorators = [
    { type: Component, args: [{
                selector: 'amplify-confirm-sign-in',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'formFields',
                    'handleAuthStateChange',
                    'handleSubmit',
                    'headerText',
                    'submitButtonText',
                    'user',
                ]
            },] }
];
AmplifyConfirmSignIn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyConfirmSignIn = __decorate([
    ProxyCmp({
        inputs: [
            'formFields',
            'handleAuthStateChange',
            'handleSubmit',
            'headerText',
            'submitButtonText',
            'user',
        ],
    })
], AmplifyConfirmSignIn);
export { AmplifyConfirmSignIn };
let AmplifyConfirmSignUp = class AmplifyConfirmSignUp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyConfirmSignUp.decorators = [
    { type: Component, args: [{
                selector: 'amplify-confirm-sign-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'formFields',
                    'handleAuthStateChange',
                    'handleSubmit',
                    'headerText',
                    'submitButtonText',
                    'user',
                    'usernameAlias',
                ]
            },] }
];
AmplifyConfirmSignUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyConfirmSignUp = __decorate([
    ProxyCmp({
        inputs: [
            'formFields',
            'handleAuthStateChange',
            'handleSubmit',
            'headerText',
            'submitButtonText',
            'user',
            'usernameAlias',
        ],
    })
], AmplifyConfirmSignUp);
export { AmplifyConfirmSignUp };
export class AmplifyContainer {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
AmplifyContainer.decorators = [
    { type: Component, args: [{
                selector: 'amplify-container',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
AmplifyContainer.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let AmplifyCountryDialCode = class AmplifyCountryDialCode {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyCountryDialCode.decorators = [
    { type: Component, args: [{
                selector: 'amplify-country-dial-code',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['dialCode', 'fieldId', 'handleInputChange', 'options']
            },] }
];
AmplifyCountryDialCode.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyCountryDialCode = __decorate([
    ProxyCmp({ inputs: ['dialCode', 'fieldId', 'handleInputChange', 'options'] })
], AmplifyCountryDialCode);
export { AmplifyCountryDialCode };
let AmplifyEmailField = class AmplifyEmailField {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyEmailField.decorators = [
    { type: Component, args: [{
                selector: 'amplify-email-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'hint',
                    'inputProps',
                    'label',
                    'placeholder',
                    'required',
                    'value',
                ]
            },] }
];
AmplifyEmailField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyEmailField = __decorate([
    ProxyCmp({
        inputs: [
            'disabled',
            'fieldId',
            'handleInputChange',
            'hint',
            'inputProps',
            'label',
            'placeholder',
            'required',
            'value',
        ],
    })
], AmplifyEmailField);
export { AmplifyEmailField };
let AmplifyFacebookButton = class AmplifyFacebookButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyFacebookButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-facebook-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['appId', 'handleAuthStateChange']
            },] }
];
AmplifyFacebookButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyFacebookButton = __decorate([
    ProxyCmp({ inputs: ['appId', 'handleAuthStateChange'] })
], AmplifyFacebookButton);
export { AmplifyFacebookButton };
let AmplifyFederatedButtons = class AmplifyFederatedButtons {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyFederatedButtons.decorators = [
    { type: Component, args: [{
                selector: 'amplify-federated-buttons',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['authState', 'federated', 'handleAuthStateChange']
            },] }
];
AmplifyFederatedButtons.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyFederatedButtons = __decorate([
    ProxyCmp({ inputs: ['authState', 'federated', 'handleAuthStateChange'] })
], AmplifyFederatedButtons);
export { AmplifyFederatedButtons };
let AmplifyFederatedSignIn = class AmplifyFederatedSignIn {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyFederatedSignIn.decorators = [
    { type: Component, args: [{
                selector: 'amplify-federated-sign-in',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['authState', 'federated']
            },] }
];
AmplifyFederatedSignIn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyFederatedSignIn = __decorate([
    ProxyCmp({ inputs: ['authState', 'federated'] })
], AmplifyFederatedSignIn);
export { AmplifyFederatedSignIn };
let AmplifyForgotPassword = class AmplifyForgotPassword {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyForgotPassword.decorators = [
    { type: Component, args: [{
                selector: 'amplify-forgot-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'formFields',
                    'handleAuthStateChange',
                    'handleSend',
                    'handleSubmit',
                    'headerText',
                    'sendButtonText',
                    'submitButtonText',
                    'usernameAlias',
                ]
            },] }
];
AmplifyForgotPassword.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyForgotPassword = __decorate([
    ProxyCmp({
        inputs: [
            'formFields',
            'handleAuthStateChange',
            'handleSend',
            'handleSubmit',
            'headerText',
            'sendButtonText',
            'submitButtonText',
            'usernameAlias',
        ],
    })
], AmplifyForgotPassword);
export { AmplifyForgotPassword };
let AmplifyFormField = class AmplifyFormField {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyFormField.decorators = [
    { type: Component, args: [{
                selector: 'amplify-form-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'description',
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'hint',
                    'inputProps',
                    'label',
                    'name',
                    'placeholder',
                    'required',
                    'type',
                    'value',
                ]
            },] }
];
AmplifyFormField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyFormField = __decorate([
    ProxyCmp({
        inputs: [
            'description',
            'disabled',
            'fieldId',
            'handleInputChange',
            'hint',
            'inputProps',
            'label',
            'name',
            'placeholder',
            'required',
            'type',
            'value',
        ],
    })
], AmplifyFormField);
export { AmplifyFormField };
let AmplifyFormSection = class AmplifyFormSection {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyFormSection.decorators = [
    { type: Component, args: [{
                selector: 'amplify-form-section',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'handleSubmit',
                    'headerText',
                    'loading',
                    'secondaryFooterContent',
                    'submitButtonText',
                    'testDataPrefix',
                ]
            },] }
];
AmplifyFormSection.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyFormSection = __decorate([
    ProxyCmp({
        inputs: [
            'handleSubmit',
            'headerText',
            'loading',
            'secondaryFooterContent',
            'submitButtonText',
            'testDataPrefix',
        ],
    })
], AmplifyFormSection);
export { AmplifyFormSection };
let AmplifyGoogleButton = class AmplifyGoogleButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyGoogleButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-google-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['clientId', 'handleAuthStateChange']
            },] }
];
AmplifyGoogleButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyGoogleButton = __decorate([
    ProxyCmp({ inputs: ['clientId', 'handleAuthStateChange'] })
], AmplifyGoogleButton);
export { AmplifyGoogleButton };
let AmplifyGreetings = class AmplifyGreetings {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyGreetings.decorators = [
    { type: Component, args: [{
                selector: 'amplify-greetings',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['handleAuthStateChange', 'logo', 'username']
            },] }
];
AmplifyGreetings.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyGreetings = __decorate([
    ProxyCmp({ inputs: ['handleAuthStateChange', 'logo', 'username'] })
], AmplifyGreetings);
export { AmplifyGreetings };
export class AmplifyHint {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
AmplifyHint.decorators = [
    { type: Component, args: [{
                selector: 'amplify-hint',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
AmplifyHint.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let AmplifyIcon = class AmplifyIcon {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyIcon.decorators = [
    { type: Component, args: [{
                selector: 'amplify-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['name']
            },] }
];
AmplifyIcon.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyIcon = __decorate([
    ProxyCmp({ inputs: ['name'] })
], AmplifyIcon);
export { AmplifyIcon };
let AmplifyIconButton = class AmplifyIconButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyIconButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-icon-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['autoShowTooltip', 'name', 'tooltip']
            },] }
];
AmplifyIconButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyIconButton = __decorate([
    ProxyCmp({ inputs: ['autoShowTooltip', 'name', 'tooltip'] })
], AmplifyIconButton);
export { AmplifyIconButton };
let AmplifyInput = class AmplifyInput {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyInput.decorators = [
    { type: Component, args: [{
                selector: 'amplify-input',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'description',
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'inputProps',
                    'name',
                    'placeholder',
                    'required',
                    'type',
                    'value',
                ]
            },] }
];
AmplifyInput.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyInput = __decorate([
    ProxyCmp({
        inputs: [
            'description',
            'disabled',
            'fieldId',
            'handleInputChange',
            'inputProps',
            'name',
            'placeholder',
            'required',
            'type',
            'value',
        ],
    })
], AmplifyInput);
export { AmplifyInput };
let AmplifyLabel = class AmplifyLabel {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyLabel.decorators = [
    { type: Component, args: [{
                selector: 'amplify-label',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['htmlFor']
            },] }
];
AmplifyLabel.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyLabel = __decorate([
    ProxyCmp({ inputs: ['htmlFor'] })
], AmplifyLabel);
export { AmplifyLabel };
let AmplifyLink = class AmplifyLink {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyLink.decorators = [
    { type: Component, args: [{
                selector: 'amplify-link',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['role']
            },] }
];
AmplifyLink.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyLink = __decorate([
    ProxyCmp({ inputs: ['role'] })
], AmplifyLink);
export { AmplifyLink };
export class AmplifyLoadingSpinner {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
AmplifyLoadingSpinner.decorators = [
    { type: Component, args: [{
                selector: 'amplify-loading-spinner',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
AmplifyLoadingSpinner.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
export class AmplifyNav {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
AmplifyNav.decorators = [
    { type: Component, args: [{
                selector: 'amplify-nav',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
AmplifyNav.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let AmplifyOauthButton = class AmplifyOauthButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyOauthButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-oauth-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['config']
            },] }
];
AmplifyOauthButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyOauthButton = __decorate([
    ProxyCmp({ inputs: ['config'] })
], AmplifyOauthButton);
export { AmplifyOauthButton };
let AmplifyPasswordField = class AmplifyPasswordField {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyPasswordField.decorators = [
    { type: Component, args: [{
                selector: 'amplify-password-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'hint',
                    'inputProps',
                    'label',
                    'placeholder',
                    'required',
                    'value',
                ]
            },] }
];
AmplifyPasswordField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyPasswordField = __decorate([
    ProxyCmp({
        inputs: [
            'disabled',
            'fieldId',
            'handleInputChange',
            'hint',
            'inputProps',
            'label',
            'placeholder',
            'required',
            'value',
        ],
    })
], AmplifyPasswordField);
export { AmplifyPasswordField };
let AmplifyPhoneField = class AmplifyPhoneField {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyPhoneField.decorators = [
    { type: Component, args: [{
                selector: 'amplify-phone-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'dialCode',
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'hint',
                    'inputProps',
                    'label',
                    'placeholder',
                    'required',
                    'value',
                ]
            },] }
];
AmplifyPhoneField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyPhoneField = __decorate([
    ProxyCmp({
        inputs: [
            'dialCode',
            'disabled',
            'fieldId',
            'handleInputChange',
            'hint',
            'inputProps',
            'label',
            'placeholder',
            'required',
            'value',
        ],
    })
], AmplifyPhoneField);
export { AmplifyPhoneField };
let AmplifyPhotoPicker = class AmplifyPhotoPicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyPhotoPicker.decorators = [
    { type: Component, args: [{
                selector: 'amplify-photo-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'buttonText',
                    'handleClick',
                    'headerHint',
                    'headerTitle',
                    'placeholderHint',
                    'previewSrc',
                ]
            },] }
];
AmplifyPhotoPicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyPhotoPicker = __decorate([
    ProxyCmp({
        inputs: [
            'buttonText',
            'handleClick',
            'headerHint',
            'headerTitle',
            'placeholderHint',
            'previewSrc',
        ],
    })
], AmplifyPhotoPicker);
export { AmplifyPhotoPicker };
let AmplifyPicker = class AmplifyPicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyPicker.decorators = [
    { type: Component, args: [{
                selector: 'amplify-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['acceptValue', 'inputHandler', 'pickerText']
            },] }
];
AmplifyPicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyPicker = __decorate([
    ProxyCmp({ inputs: ['acceptValue', 'inputHandler', 'pickerText'] })
], AmplifyPicker);
export { AmplifyPicker };
let AmplifyRadioButton = class AmplifyRadioButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyRadioButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-radio-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'checked',
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'inputProps',
                    'label',
                    'name',
                    'placeholder',
                    'value',
                ]
            },] }
];
AmplifyRadioButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyRadioButton = __decorate([
    ProxyCmp({
        inputs: [
            'checked',
            'disabled',
            'fieldId',
            'handleInputChange',
            'inputProps',
            'label',
            'name',
            'placeholder',
            'value',
        ],
    })
], AmplifyRadioButton);
export { AmplifyRadioButton };
let AmplifyRequireNewPassword = class AmplifyRequireNewPassword {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyRequireNewPassword.decorators = [
    { type: Component, args: [{
                selector: 'amplify-require-new-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'formFields',
                    'handleAuthStateChange',
                    'handleSubmit',
                    'headerText',
                    'submitButtonText',
                    'user',
                ]
            },] }
];
AmplifyRequireNewPassword.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyRequireNewPassword = __decorate([
    ProxyCmp({
        inputs: [
            'formFields',
            'handleAuthStateChange',
            'handleSubmit',
            'headerText',
            'submitButtonText',
            'user',
        ],
    })
], AmplifyRequireNewPassword);
export { AmplifyRequireNewPassword };
let AmplifyS3Album = class AmplifyS3Album {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyS3Album.decorators = [
    { type: Component, args: [{
                selector: 'amplify-s3-album',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'contentType',
                    'fileToKey',
                    'filter',
                    'handleOnError',
                    'handleOnLoad',
                    'identityId',
                    'level',
                    'path',
                    'picker',
                    'pickerText',
                    'sort',
                    'track',
                ]
            },] }
];
AmplifyS3Album.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyS3Album = __decorate([
    ProxyCmp({
        inputs: [
            'contentType',
            'fileToKey',
            'filter',
            'handleOnError',
            'handleOnLoad',
            'identityId',
            'level',
            'path',
            'picker',
            'pickerText',
            'sort',
            'track',
        ],
    })
], AmplifyS3Album);
export { AmplifyS3Album };
let AmplifyS3Image = class AmplifyS3Image {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyS3Image.decorators = [
    { type: Component, args: [{
                selector: 'amplify-s3-image',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'alt',
                    'body',
                    'contentType',
                    'handleOnError',
                    'handleOnLoad',
                    'identityId',
                    'imgKey',
                    'imgProps',
                    'level',
                    'path',
                    'track',
                ]
            },] }
];
AmplifyS3Image.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyS3Image = __decorate([
    ProxyCmp({
        inputs: [
            'alt',
            'body',
            'contentType',
            'handleOnError',
            'handleOnLoad',
            'identityId',
            'imgKey',
            'imgProps',
            'level',
            'path',
            'track',
        ],
    })
], AmplifyS3Image);
export { AmplifyS3Image };
let AmplifyS3ImagePicker = class AmplifyS3ImagePicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyS3ImagePicker.decorators = [
    { type: Component, args: [{
                selector: 'amplify-s3-image-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'buttonText',
                    'contentType',
                    'fileToKey',
                    'headerHint',
                    'headerTitle',
                    'identityId',
                    'level',
                    'path',
                    'placeholderHint',
                    'track',
                ]
            },] }
];
AmplifyS3ImagePicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyS3ImagePicker = __decorate([
    ProxyCmp({
        inputs: [
            'buttonText',
            'contentType',
            'fileToKey',
            'headerHint',
            'headerTitle',
            'identityId',
            'level',
            'path',
            'placeholderHint',
            'track',
        ],
    })
], AmplifyS3ImagePicker);
export { AmplifyS3ImagePicker };
let AmplifyS3Text = class AmplifyS3Text {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyS3Text.decorators = [
    { type: Component, args: [{
                selector: 'amplify-s3-text',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'body',
                    'contentType',
                    'fallbackText',
                    'identityId',
                    'level',
                    'path',
                    'textKey',
                    'track',
                ]
            },] }
];
AmplifyS3Text.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyS3Text = __decorate([
    ProxyCmp({
        inputs: [
            'body',
            'contentType',
            'fallbackText',
            'identityId',
            'level',
            'path',
            'textKey',
            'track',
        ],
    })
], AmplifyS3Text);
export { AmplifyS3Text };
let AmplifyS3TextPicker = class AmplifyS3TextPicker {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyS3TextPicker.decorators = [
    { type: Component, args: [{
                selector: 'amplify-s3-text-picker',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'contentType',
                    'fallbackText',
                    'fileToKey',
                    'identityId',
                    'level',
                    'path',
                    'track',
                ]
            },] }
];
AmplifyS3TextPicker.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyS3TextPicker = __decorate([
    ProxyCmp({
        inputs: [
            'contentType',
            'fallbackText',
            'fileToKey',
            'identityId',
            'level',
            'path',
            'track',
        ],
    })
], AmplifyS3TextPicker);
export { AmplifyS3TextPicker };
let AmplifySection = class AmplifySection {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySection.decorators = [
    { type: Component, args: [{
                selector: 'amplify-section',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['role']
            },] }
];
AmplifySection.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySection = __decorate([
    ProxyCmp({ inputs: ['role'] })
], AmplifySection);
export { AmplifySection };
let AmplifySelect = class AmplifySelect {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySelect.decorators = [
    { type: Component, args: [{
                selector: 'amplify-select',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['fieldId', 'handleInputChange', 'options', 'selected']
            },] }
];
AmplifySelect.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySelect = __decorate([
    ProxyCmp({ inputs: ['fieldId', 'handleInputChange', 'options', 'selected'] })
], AmplifySelect);
export { AmplifySelect };
let AmplifySelectMfaType = class AmplifySelectMfaType {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySelectMfaType.decorators = [
    { type: Component, args: [{
                selector: 'amplify-select-mfa-type',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['MFATypes', 'authData', 'handleSubmit']
            },] }
];
AmplifySelectMfaType.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySelectMfaType = __decorate([
    ProxyCmp({ inputs: ['MFATypes', 'authData', 'handleSubmit'] })
], AmplifySelectMfaType);
export { AmplifySelectMfaType };
let AmplifySignIn = class AmplifySignIn {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySignIn.decorators = [
    { type: Component, args: [{
                selector: 'amplify-sign-in',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'federated',
                    'formFields',
                    'handleAuthStateChange',
                    'handleSubmit',
                    'headerText',
                    'hideSignUp',
                    'submitButtonText',
                    'usernameAlias',
                ]
            },] }
];
AmplifySignIn.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySignIn = __decorate([
    ProxyCmp({
        inputs: [
            'federated',
            'formFields',
            'handleAuthStateChange',
            'handleSubmit',
            'headerText',
            'hideSignUp',
            'submitButtonText',
            'usernameAlias',
        ],
    })
], AmplifySignIn);
export { AmplifySignIn };
let AmplifySignInButton = class AmplifySignInButton {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySignInButton.decorators = [
    { type: Component, args: [{
                selector: 'amplify-sign-in-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['provider']
            },] }
];
AmplifySignInButton.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySignInButton = __decorate([
    ProxyCmp({ inputs: ['provider'] })
], AmplifySignInButton);
export { AmplifySignInButton };
let AmplifySignOut = class AmplifySignOut {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySignOut.decorators = [
    { type: Component, args: [{
                selector: 'amplify-sign-out',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['buttonText', 'handleAuthStateChange']
            },] }
];
AmplifySignOut.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySignOut = __decorate([
    ProxyCmp({ inputs: ['buttonText', 'handleAuthStateChange'] })
], AmplifySignOut);
export { AmplifySignOut };
let AmplifySignUp = class AmplifySignUp {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifySignUp.decorators = [
    { type: Component, args: [{
                selector: 'amplify-sign-up',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'formFields',
                    'handleAuthStateChange',
                    'handleSignUp',
                    'handleSubmit',
                    'haveAccountText',
                    'headerText',
                    'signInText',
                    'submitButtonText',
                    'usernameAlias',
                    'validationErrors',
                ]
            },] }
];
AmplifySignUp.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifySignUp = __decorate([
    ProxyCmp({
        inputs: [
            'formFields',
            'handleAuthStateChange',
            'handleSignUp',
            'handleSubmit',
            'haveAccountText',
            'headerText',
            'signInText',
            'submitButtonText',
            'usernameAlias',
            'validationErrors',
        ],
    })
], AmplifySignUp);
export { AmplifySignUp };
export class AmplifyStrike {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
}
AmplifyStrike.decorators = [
    { type: Component, args: [{
                selector: 'amplify-strike',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>'
            },] }
];
AmplifyStrike.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
let AmplifyToast = class AmplifyToast {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyToast.decorators = [
    { type: Component, args: [{
                selector: 'amplify-toast',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['handleClose', 'message']
            },] }
];
AmplifyToast.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyToast = __decorate([
    ProxyCmp({ inputs: ['handleClose', 'message'] })
], AmplifyToast);
export { AmplifyToast };
let AmplifyTooltip = class AmplifyTooltip {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyTooltip.decorators = [
    { type: Component, args: [{
                selector: 'amplify-tooltip',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['shouldAutoShow', 'text']
            },] }
];
AmplifyTooltip.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyTooltip = __decorate([
    ProxyCmp({ inputs: ['shouldAutoShow', 'text'] })
], AmplifyTooltip);
export { AmplifyTooltip };
let AmplifyTotpSetup = class AmplifyTotpSetup {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyTotpSetup.decorators = [
    { type: Component, args: [{
                selector: 'amplify-totp-setup',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'handleAuthStateChange',
                    'handleComplete',
                    'headerText',
                    'issuer',
                    'standalone',
                    'user',
                ]
            },] }
];
AmplifyTotpSetup.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyTotpSetup = __decorate([
    ProxyCmp({
        inputs: [
            'handleAuthStateChange',
            'handleComplete',
            'headerText',
            'issuer',
            'standalone',
            'user',
        ],
    })
], AmplifyTotpSetup);
export { AmplifyTotpSetup };
let AmplifyUsernameField = class AmplifyUsernameField {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyUsernameField.decorators = [
    { type: Component, args: [{
                selector: 'amplify-username-field',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'disabled',
                    'fieldId',
                    'handleInputChange',
                    'hint',
                    'inputProps',
                    'label',
                    'placeholder',
                    'required',
                    'value',
                ]
            },] }
];
AmplifyUsernameField.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyUsernameField = __decorate([
    ProxyCmp({
        inputs: [
            'disabled',
            'fieldId',
            'handleInputChange',
            'hint',
            'inputProps',
            'label',
            'placeholder',
            'required',
            'value',
        ],
    })
], AmplifyUsernameField);
export { AmplifyUsernameField };
let AmplifyVerifyContact = class AmplifyVerifyContact {
    constructor(c, r, z) {
        this.z = z;
        c.detach();
        this.el = r.nativeElement;
    }
};
AmplifyVerifyContact.decorators = [
    { type: Component, args: [{
                selector: 'amplify-verify-contact',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: ['handleAuthStateChange', 'user']
            },] }
];
AmplifyVerifyContact.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone }
];
AmplifyVerifyContact = __decorate([
    ProxyCmp({ inputs: ['handleAuthStateChange', 'user'] })
], AmplifyVerifyContact);
export { AmplifyVerifyContact };
//# sourceMappingURL=data:application/json;base64,