(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('@aws-amplify/ui-components/dist/components')) :
    typeof define === 'function' && define.amd ? define('@aws-amplify/ui-angular/legacy', ['exports', '@angular/core', 'rxjs', '@angular/common', '@aws-amplify/ui-components/dist/components'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["aws-amplify"] = global["aws-amplify"] || {}, global["aws-amplify"]["ui-angular"] = global["aws-amplify"]["ui-angular"] || {}, global["aws-amplify"]["ui-angular"].legacy = {}), global.ng.core, global.rxjs, global.ng.common, global.components));
})(this, (function (exports, core, rxjs, common, components) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function () { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }
    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
            throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }

    var proxyInputs = function (Cmp, inputs) {
        var Prototype = Cmp.prototype;
        inputs.forEach(function (item) {
            Object.defineProperty(Prototype, item, {
                get: function () {
                    return this.el[item];
                },
                set: function (val) {
                    var _this = this;
                    this.z.runOutsideAngular(function () { return (_this.el[item] = val); });
                },
            });
        });
    };
    var proxyMethods = function (Cmp, methods) {
        var Prototype = Cmp.prototype;
        methods.forEach(function (methodName) {
            Prototype[methodName] = function () {
                var _this = this;
                var args = arguments;
                return this.z.runOutsideAngular(function () { return _this.el[methodName].apply(_this.el, args); });
            };
        });
    };
    var proxyOutputs = function (instance, el, events) {
        events.forEach(function (eventName) { return (instance[eventName] = rxjs.fromEvent(el, eventName)); });
    };
    // eslint-disable-next-line prefer-arrow/prefer-arrow-functions
    function ProxyCmp(opts) {
        var decorator = function (cls) {
            if (opts.inputs) {
                proxyInputs(cls, opts.inputs);
            }
            if (opts.methods) {
                proxyMethods(cls, opts.methods);
            }
            return cls;
        };
        return decorator;
    }
    var AmplifyAmazonButton = /** @class */ (function () {
        function AmplifyAmazonButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyAmazonButton;
    }());
    AmplifyAmazonButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-amazon-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['clientId', 'handleAuthStateChange']
                },] }
    ];
    AmplifyAmazonButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyAmazonButton = __decorate([
        ProxyCmp({ inputs: ['clientId', 'handleAuthStateChange'] })
    ], AmplifyAmazonButton);
    var AmplifyAuthContainer = /** @class */ (function () {
        function AmplifyAuthContainer(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyAuthContainer;
    }());
    AmplifyAuthContainer.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-auth-container',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    AmplifyAuthContainer.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var AmplifyAuthFields = /** @class */ (function () {
        function AmplifyAuthFields(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyAuthFields;
    }());
    AmplifyAuthFields.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-auth-fields',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['formFields']
                },] }
    ];
    AmplifyAuthFields.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyAuthFields = __decorate([
        ProxyCmp({ inputs: ['formFields'] })
    ], AmplifyAuthFields);
    var AmplifyAuth0Button = /** @class */ (function () {
        function AmplifyAuth0Button(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyAuth0Button;
    }());
    AmplifyAuth0Button.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-auth0-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['config', 'handleAuthStateChange']
                },] }
    ];
    AmplifyAuth0Button.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyAuth0Button = __decorate([
        ProxyCmp({ inputs: ['config', 'handleAuthStateChange'] })
    ], AmplifyAuth0Button);
    var AmplifyAuthenticator = /** @class */ (function () {
        function AmplifyAuthenticator(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyAuthenticator;
    }());
    AmplifyAuthenticator.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-authenticator',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'federated',
                        'handleAuthStateChange',
                        'hideToast',
                        'initialAuthState',
                        'usernameAlias',
                    ]
                },] }
    ];
    AmplifyAuthenticator.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyAuthenticator = __decorate([
        ProxyCmp({
            inputs: [
                'federated',
                'handleAuthStateChange',
                'hideToast',
                'initialAuthState',
                'usernameAlias',
            ],
        })
    ], AmplifyAuthenticator);
    exports.AmplifyButton = /** @class */ (function () {
        function AmplifyButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyButton;
    }());
    exports.AmplifyButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['disabled', 'handleButtonClick', 'icon', 'type', 'variant']
                },] }
    ];
    exports.AmplifyButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyButton = __decorate([
        ProxyCmp({
            inputs: ['disabled', 'handleButtonClick', 'icon', 'type', 'variant'],
        })
    ], exports.AmplifyButton);
    exports.AmplifyChatbot = /** @class */ (function () {
        function AmplifyChatbot(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
            proxyOutputs(this, this.el, ['chatCompleted']);
        }
        return AmplifyChatbot;
    }());
    exports.AmplifyChatbot.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-chatbot',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'botName',
                        'botTitle',
                        'clearOnComplete',
                        'conversationModeOn',
                        'silenceThreshold',
                        'silenceTime',
                        'textEnabled',
                        'voiceEnabled',
                        'welcomeMessage',
                    ]
                },] }
    ];
    exports.AmplifyChatbot.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyChatbot = __decorate([
        ProxyCmp({
            inputs: [
                'botName',
                'botTitle',
                'clearOnComplete',
                'conversationModeOn',
                'silenceThreshold',
                'silenceTime',
                'textEnabled',
                'voiceEnabled',
                'welcomeMessage',
            ],
        })
    ], exports.AmplifyChatbot);
    var AmplifyCheckbox = /** @class */ (function () {
        function AmplifyCheckbox(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyCheckbox;
    }());
    AmplifyCheckbox.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-checkbox',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['checked', 'disabled', 'fieldId', 'label', 'name', 'value']
                },] }
    ];
    AmplifyCheckbox.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyCheckbox = __decorate([
        ProxyCmp({
            inputs: ['checked', 'disabled', 'fieldId', 'label', 'name', 'value'],
        })
    ], AmplifyCheckbox);
    var AmplifyCodeField = /** @class */ (function () {
        function AmplifyCodeField(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyCodeField;
    }());
    AmplifyCodeField.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-code-field',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'hint',
                        'inputProps',
                        'label',
                        'placeholder',
                        'required',
                        'value',
                    ]
                },] }
    ];
    AmplifyCodeField.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyCodeField = __decorate([
        ProxyCmp({
            inputs: [
                'disabled',
                'fieldId',
                'handleInputChange',
                'hint',
                'inputProps',
                'label',
                'placeholder',
                'required',
                'value',
            ],
        })
    ], AmplifyCodeField);
    var AmplifyConfirmSignIn = /** @class */ (function () {
        function AmplifyConfirmSignIn(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyConfirmSignIn;
    }());
    AmplifyConfirmSignIn.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-confirm-sign-in',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'formFields',
                        'handleAuthStateChange',
                        'handleSubmit',
                        'headerText',
                        'submitButtonText',
                        'user',
                    ]
                },] }
    ];
    AmplifyConfirmSignIn.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyConfirmSignIn = __decorate([
        ProxyCmp({
            inputs: [
                'formFields',
                'handleAuthStateChange',
                'handleSubmit',
                'headerText',
                'submitButtonText',
                'user',
            ],
        })
    ], AmplifyConfirmSignIn);
    var AmplifyConfirmSignUp = /** @class */ (function () {
        function AmplifyConfirmSignUp(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyConfirmSignUp;
    }());
    AmplifyConfirmSignUp.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-confirm-sign-up',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'formFields',
                        'handleAuthStateChange',
                        'handleSubmit',
                        'headerText',
                        'submitButtonText',
                        'user',
                        'usernameAlias',
                    ]
                },] }
    ];
    AmplifyConfirmSignUp.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyConfirmSignUp = __decorate([
        ProxyCmp({
            inputs: [
                'formFields',
                'handleAuthStateChange',
                'handleSubmit',
                'headerText',
                'submitButtonText',
                'user',
                'usernameAlias',
            ],
        })
    ], AmplifyConfirmSignUp);
    var AmplifyContainer = /** @class */ (function () {
        function AmplifyContainer(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyContainer;
    }());
    AmplifyContainer.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-container',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    AmplifyContainer.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var AmplifyCountryDialCode = /** @class */ (function () {
        function AmplifyCountryDialCode(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyCountryDialCode;
    }());
    AmplifyCountryDialCode.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-country-dial-code',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['dialCode', 'fieldId', 'handleInputChange', 'options']
                },] }
    ];
    AmplifyCountryDialCode.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyCountryDialCode = __decorate([
        ProxyCmp({ inputs: ['dialCode', 'fieldId', 'handleInputChange', 'options'] })
    ], AmplifyCountryDialCode);
    var AmplifyEmailField = /** @class */ (function () {
        function AmplifyEmailField(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyEmailField;
    }());
    AmplifyEmailField.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-email-field',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'hint',
                        'inputProps',
                        'label',
                        'placeholder',
                        'required',
                        'value',
                    ]
                },] }
    ];
    AmplifyEmailField.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyEmailField = __decorate([
        ProxyCmp({
            inputs: [
                'disabled',
                'fieldId',
                'handleInputChange',
                'hint',
                'inputProps',
                'label',
                'placeholder',
                'required',
                'value',
            ],
        })
    ], AmplifyEmailField);
    var AmplifyFacebookButton = /** @class */ (function () {
        function AmplifyFacebookButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyFacebookButton;
    }());
    AmplifyFacebookButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-facebook-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['appId', 'handleAuthStateChange']
                },] }
    ];
    AmplifyFacebookButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyFacebookButton = __decorate([
        ProxyCmp({ inputs: ['appId', 'handleAuthStateChange'] })
    ], AmplifyFacebookButton);
    var AmplifyFederatedButtons = /** @class */ (function () {
        function AmplifyFederatedButtons(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyFederatedButtons;
    }());
    AmplifyFederatedButtons.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-federated-buttons',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['authState', 'federated', 'handleAuthStateChange']
                },] }
    ];
    AmplifyFederatedButtons.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyFederatedButtons = __decorate([
        ProxyCmp({ inputs: ['authState', 'federated', 'handleAuthStateChange'] })
    ], AmplifyFederatedButtons);
    var AmplifyFederatedSignIn = /** @class */ (function () {
        function AmplifyFederatedSignIn(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyFederatedSignIn;
    }());
    AmplifyFederatedSignIn.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-federated-sign-in',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['authState', 'federated']
                },] }
    ];
    AmplifyFederatedSignIn.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyFederatedSignIn = __decorate([
        ProxyCmp({ inputs: ['authState', 'federated'] })
    ], AmplifyFederatedSignIn);
    var AmplifyForgotPassword = /** @class */ (function () {
        function AmplifyForgotPassword(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyForgotPassword;
    }());
    AmplifyForgotPassword.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-forgot-password',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'formFields',
                        'handleAuthStateChange',
                        'handleSend',
                        'handleSubmit',
                        'headerText',
                        'sendButtonText',
                        'submitButtonText',
                        'usernameAlias',
                    ]
                },] }
    ];
    AmplifyForgotPassword.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyForgotPassword = __decorate([
        ProxyCmp({
            inputs: [
                'formFields',
                'handleAuthStateChange',
                'handleSend',
                'handleSubmit',
                'headerText',
                'sendButtonText',
                'submitButtonText',
                'usernameAlias',
            ],
        })
    ], AmplifyForgotPassword);
    var AmplifyFormField = /** @class */ (function () {
        function AmplifyFormField(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyFormField;
    }());
    AmplifyFormField.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-form-field',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'description',
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'hint',
                        'inputProps',
                        'label',
                        'name',
                        'placeholder',
                        'required',
                        'type',
                        'value',
                    ]
                },] }
    ];
    AmplifyFormField.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyFormField = __decorate([
        ProxyCmp({
            inputs: [
                'description',
                'disabled',
                'fieldId',
                'handleInputChange',
                'hint',
                'inputProps',
                'label',
                'name',
                'placeholder',
                'required',
                'type',
                'value',
            ],
        })
    ], AmplifyFormField);
    var AmplifyFormSection = /** @class */ (function () {
        function AmplifyFormSection(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyFormSection;
    }());
    AmplifyFormSection.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-form-section',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'handleSubmit',
                        'headerText',
                        'loading',
                        'secondaryFooterContent',
                        'submitButtonText',
                        'testDataPrefix',
                    ]
                },] }
    ];
    AmplifyFormSection.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyFormSection = __decorate([
        ProxyCmp({
            inputs: [
                'handleSubmit',
                'headerText',
                'loading',
                'secondaryFooterContent',
                'submitButtonText',
                'testDataPrefix',
            ],
        })
    ], AmplifyFormSection);
    var AmplifyGoogleButton = /** @class */ (function () {
        function AmplifyGoogleButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyGoogleButton;
    }());
    AmplifyGoogleButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-google-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['clientId', 'handleAuthStateChange']
                },] }
    ];
    AmplifyGoogleButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyGoogleButton = __decorate([
        ProxyCmp({ inputs: ['clientId', 'handleAuthStateChange'] })
    ], AmplifyGoogleButton);
    var AmplifyGreetings = /** @class */ (function () {
        function AmplifyGreetings(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyGreetings;
    }());
    AmplifyGreetings.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-greetings',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['handleAuthStateChange', 'logo', 'username']
                },] }
    ];
    AmplifyGreetings.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyGreetings = __decorate([
        ProxyCmp({ inputs: ['handleAuthStateChange', 'logo', 'username'] })
    ], AmplifyGreetings);
    var AmplifyHint = /** @class */ (function () {
        function AmplifyHint(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyHint;
    }());
    AmplifyHint.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-hint',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    AmplifyHint.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyIcon = /** @class */ (function () {
        function AmplifyIcon(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyIcon;
    }());
    exports.AmplifyIcon.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-icon',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['name']
                },] }
    ];
    exports.AmplifyIcon.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyIcon = __decorate([
        ProxyCmp({ inputs: ['name'] })
    ], exports.AmplifyIcon);
    var AmplifyIconButton = /** @class */ (function () {
        function AmplifyIconButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyIconButton;
    }());
    AmplifyIconButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-icon-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['autoShowTooltip', 'name', 'tooltip']
                },] }
    ];
    AmplifyIconButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyIconButton = __decorate([
        ProxyCmp({ inputs: ['autoShowTooltip', 'name', 'tooltip'] })
    ], AmplifyIconButton);
    exports.AmplifyInput = /** @class */ (function () {
        function AmplifyInput(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyInput;
    }());
    exports.AmplifyInput.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-input',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'description',
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'inputProps',
                        'name',
                        'placeholder',
                        'required',
                        'type',
                        'value',
                    ]
                },] }
    ];
    exports.AmplifyInput.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyInput = __decorate([
        ProxyCmp({
            inputs: [
                'description',
                'disabled',
                'fieldId',
                'handleInputChange',
                'inputProps',
                'name',
                'placeholder',
                'required',
                'type',
                'value',
            ],
        })
    ], exports.AmplifyInput);
    var AmplifyLabel = /** @class */ (function () {
        function AmplifyLabel(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyLabel;
    }());
    AmplifyLabel.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-label',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['htmlFor']
                },] }
    ];
    AmplifyLabel.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyLabel = __decorate([
        ProxyCmp({ inputs: ['htmlFor'] })
    ], AmplifyLabel);
    var AmplifyLink = /** @class */ (function () {
        function AmplifyLink(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyLink;
    }());
    AmplifyLink.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-link',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['role']
                },] }
    ];
    AmplifyLink.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyLink = __decorate([
        ProxyCmp({ inputs: ['role'] })
    ], AmplifyLink);
    var AmplifyLoadingSpinner = /** @class */ (function () {
        function AmplifyLoadingSpinner(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyLoadingSpinner;
    }());
    AmplifyLoadingSpinner.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-loading-spinner',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    AmplifyLoadingSpinner.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var AmplifyNav = /** @class */ (function () {
        function AmplifyNav(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyNav;
    }());
    AmplifyNav.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-nav',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    AmplifyNav.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    var AmplifyOauthButton = /** @class */ (function () {
        function AmplifyOauthButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyOauthButton;
    }());
    AmplifyOauthButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-oauth-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['config']
                },] }
    ];
    AmplifyOauthButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyOauthButton = __decorate([
        ProxyCmp({ inputs: ['config'] })
    ], AmplifyOauthButton);
    var AmplifyPasswordField = /** @class */ (function () {
        function AmplifyPasswordField(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyPasswordField;
    }());
    AmplifyPasswordField.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-password-field',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'hint',
                        'inputProps',
                        'label',
                        'placeholder',
                        'required',
                        'value',
                    ]
                },] }
    ];
    AmplifyPasswordField.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyPasswordField = __decorate([
        ProxyCmp({
            inputs: [
                'disabled',
                'fieldId',
                'handleInputChange',
                'hint',
                'inputProps',
                'label',
                'placeholder',
                'required',
                'value',
            ],
        })
    ], AmplifyPasswordField);
    var AmplifyPhoneField = /** @class */ (function () {
        function AmplifyPhoneField(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyPhoneField;
    }());
    AmplifyPhoneField.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-phone-field',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'dialCode',
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'hint',
                        'inputProps',
                        'label',
                        'placeholder',
                        'required',
                        'value',
                    ]
                },] }
    ];
    AmplifyPhoneField.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyPhoneField = __decorate([
        ProxyCmp({
            inputs: [
                'dialCode',
                'disabled',
                'fieldId',
                'handleInputChange',
                'hint',
                'inputProps',
                'label',
                'placeholder',
                'required',
                'value',
            ],
        })
    ], AmplifyPhoneField);
    exports.AmplifyPhotoPicker = /** @class */ (function () {
        function AmplifyPhotoPicker(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyPhotoPicker;
    }());
    exports.AmplifyPhotoPicker.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-photo-picker',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'buttonText',
                        'handleClick',
                        'headerHint',
                        'headerTitle',
                        'placeholderHint',
                        'previewSrc',
                    ]
                },] }
    ];
    exports.AmplifyPhotoPicker.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyPhotoPicker = __decorate([
        ProxyCmp({
            inputs: [
                'buttonText',
                'handleClick',
                'headerHint',
                'headerTitle',
                'placeholderHint',
                'previewSrc',
            ],
        })
    ], exports.AmplifyPhotoPicker);
    exports.AmplifyPicker = /** @class */ (function () {
        function AmplifyPicker(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyPicker;
    }());
    exports.AmplifyPicker.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-picker',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['acceptValue', 'inputHandler', 'pickerText']
                },] }
    ];
    exports.AmplifyPicker.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyPicker = __decorate([
        ProxyCmp({ inputs: ['acceptValue', 'inputHandler', 'pickerText'] })
    ], exports.AmplifyPicker);
    var AmplifyRadioButton = /** @class */ (function () {
        function AmplifyRadioButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyRadioButton;
    }());
    AmplifyRadioButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-radio-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'checked',
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'inputProps',
                        'label',
                        'name',
                        'placeholder',
                        'value',
                    ]
                },] }
    ];
    AmplifyRadioButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyRadioButton = __decorate([
        ProxyCmp({
            inputs: [
                'checked',
                'disabled',
                'fieldId',
                'handleInputChange',
                'inputProps',
                'label',
                'name',
                'placeholder',
                'value',
            ],
        })
    ], AmplifyRadioButton);
    var AmplifyRequireNewPassword = /** @class */ (function () {
        function AmplifyRequireNewPassword(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyRequireNewPassword;
    }());
    AmplifyRequireNewPassword.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-require-new-password',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'formFields',
                        'handleAuthStateChange',
                        'handleSubmit',
                        'headerText',
                        'submitButtonText',
                        'user',
                    ]
                },] }
    ];
    AmplifyRequireNewPassword.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyRequireNewPassword = __decorate([
        ProxyCmp({
            inputs: [
                'formFields',
                'handleAuthStateChange',
                'handleSubmit',
                'headerText',
                'submitButtonText',
                'user',
            ],
        })
    ], AmplifyRequireNewPassword);
    exports.AmplifyS3Album = /** @class */ (function () {
        function AmplifyS3Album(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyS3Album;
    }());
    exports.AmplifyS3Album.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-s3-album',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'contentType',
                        'fileToKey',
                        'filter',
                        'handleOnError',
                        'handleOnLoad',
                        'identityId',
                        'level',
                        'path',
                        'picker',
                        'pickerText',
                        'sort',
                        'track',
                    ]
                },] }
    ];
    exports.AmplifyS3Album.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyS3Album = __decorate([
        ProxyCmp({
            inputs: [
                'contentType',
                'fileToKey',
                'filter',
                'handleOnError',
                'handleOnLoad',
                'identityId',
                'level',
                'path',
                'picker',
                'pickerText',
                'sort',
                'track',
            ],
        })
    ], exports.AmplifyS3Album);
    exports.AmplifyS3Image = /** @class */ (function () {
        function AmplifyS3Image(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyS3Image;
    }());
    exports.AmplifyS3Image.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-s3-image',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'alt',
                        'body',
                        'contentType',
                        'handleOnError',
                        'handleOnLoad',
                        'identityId',
                        'imgKey',
                        'imgProps',
                        'level',
                        'path',
                        'track',
                    ]
                },] }
    ];
    exports.AmplifyS3Image.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyS3Image = __decorate([
        ProxyCmp({
            inputs: [
                'alt',
                'body',
                'contentType',
                'handleOnError',
                'handleOnLoad',
                'identityId',
                'imgKey',
                'imgProps',
                'level',
                'path',
                'track',
            ],
        })
    ], exports.AmplifyS3Image);
    exports.AmplifyS3ImagePicker = /** @class */ (function () {
        function AmplifyS3ImagePicker(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyS3ImagePicker;
    }());
    exports.AmplifyS3ImagePicker.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-s3-image-picker',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'buttonText',
                        'contentType',
                        'fileToKey',
                        'headerHint',
                        'headerTitle',
                        'identityId',
                        'level',
                        'path',
                        'placeholderHint',
                        'track',
                    ]
                },] }
    ];
    exports.AmplifyS3ImagePicker.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyS3ImagePicker = __decorate([
        ProxyCmp({
            inputs: [
                'buttonText',
                'contentType',
                'fileToKey',
                'headerHint',
                'headerTitle',
                'identityId',
                'level',
                'path',
                'placeholderHint',
                'track',
            ],
        })
    ], exports.AmplifyS3ImagePicker);
    exports.AmplifyS3Text = /** @class */ (function () {
        function AmplifyS3Text(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyS3Text;
    }());
    exports.AmplifyS3Text.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-s3-text',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'body',
                        'contentType',
                        'fallbackText',
                        'identityId',
                        'level',
                        'path',
                        'textKey',
                        'track',
                    ]
                },] }
    ];
    exports.AmplifyS3Text.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyS3Text = __decorate([
        ProxyCmp({
            inputs: [
                'body',
                'contentType',
                'fallbackText',
                'identityId',
                'level',
                'path',
                'textKey',
                'track',
            ],
        })
    ], exports.AmplifyS3Text);
    exports.AmplifyS3TextPicker = /** @class */ (function () {
        function AmplifyS3TextPicker(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyS3TextPicker;
    }());
    exports.AmplifyS3TextPicker.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-s3-text-picker',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'contentType',
                        'fallbackText',
                        'fileToKey',
                        'identityId',
                        'level',
                        'path',
                        'track',
                    ]
                },] }
    ];
    exports.AmplifyS3TextPicker.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyS3TextPicker = __decorate([
        ProxyCmp({
            inputs: [
                'contentType',
                'fallbackText',
                'fileToKey',
                'identityId',
                'level',
                'path',
                'track',
            ],
        })
    ], exports.AmplifyS3TextPicker);
    var AmplifySection = /** @class */ (function () {
        function AmplifySection(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySection;
    }());
    AmplifySection.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-section',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['role']
                },] }
    ];
    AmplifySection.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySection = __decorate([
        ProxyCmp({ inputs: ['role'] })
    ], AmplifySection);
    var AmplifySelect = /** @class */ (function () {
        function AmplifySelect(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySelect;
    }());
    AmplifySelect.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-select',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['fieldId', 'handleInputChange', 'options', 'selected']
                },] }
    ];
    AmplifySelect.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySelect = __decorate([
        ProxyCmp({ inputs: ['fieldId', 'handleInputChange', 'options', 'selected'] })
    ], AmplifySelect);
    var AmplifySelectMfaType = /** @class */ (function () {
        function AmplifySelectMfaType(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySelectMfaType;
    }());
    AmplifySelectMfaType.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-select-mfa-type',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['MFATypes', 'authData', 'handleSubmit']
                },] }
    ];
    AmplifySelectMfaType.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySelectMfaType = __decorate([
        ProxyCmp({ inputs: ['MFATypes', 'authData', 'handleSubmit'] })
    ], AmplifySelectMfaType);
    var AmplifySignIn = /** @class */ (function () {
        function AmplifySignIn(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySignIn;
    }());
    AmplifySignIn.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-sign-in',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'federated',
                        'formFields',
                        'handleAuthStateChange',
                        'handleSubmit',
                        'headerText',
                        'hideSignUp',
                        'submitButtonText',
                        'usernameAlias',
                    ]
                },] }
    ];
    AmplifySignIn.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySignIn = __decorate([
        ProxyCmp({
            inputs: [
                'federated',
                'formFields',
                'handleAuthStateChange',
                'handleSubmit',
                'headerText',
                'hideSignUp',
                'submitButtonText',
                'usernameAlias',
            ],
        })
    ], AmplifySignIn);
    var AmplifySignInButton = /** @class */ (function () {
        function AmplifySignInButton(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySignInButton;
    }());
    AmplifySignInButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-sign-in-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['provider']
                },] }
    ];
    AmplifySignInButton.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySignInButton = __decorate([
        ProxyCmp({ inputs: ['provider'] })
    ], AmplifySignInButton);
    var AmplifySignOut = /** @class */ (function () {
        function AmplifySignOut(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySignOut;
    }());
    AmplifySignOut.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-sign-out',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['buttonText', 'handleAuthStateChange']
                },] }
    ];
    AmplifySignOut.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySignOut = __decorate([
        ProxyCmp({ inputs: ['buttonText', 'handleAuthStateChange'] })
    ], AmplifySignOut);
    var AmplifySignUp = /** @class */ (function () {
        function AmplifySignUp(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifySignUp;
    }());
    AmplifySignUp.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-sign-up',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'formFields',
                        'handleAuthStateChange',
                        'handleSignUp',
                        'handleSubmit',
                        'haveAccountText',
                        'headerText',
                        'signInText',
                        'submitButtonText',
                        'usernameAlias',
                        'validationErrors',
                    ]
                },] }
    ];
    AmplifySignUp.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifySignUp = __decorate([
        ProxyCmp({
            inputs: [
                'formFields',
                'handleAuthStateChange',
                'handleSignUp',
                'handleSubmit',
                'haveAccountText',
                'headerText',
                'signInText',
                'submitButtonText',
                'usernameAlias',
                'validationErrors',
            ],
        })
    ], AmplifySignUp);
    var AmplifyStrike = /** @class */ (function () {
        function AmplifyStrike(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyStrike;
    }());
    AmplifyStrike.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-strike',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>'
                },] }
    ];
    AmplifyStrike.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyToast = /** @class */ (function () {
        function AmplifyToast(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyToast;
    }());
    exports.AmplifyToast.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-toast',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['handleClose', 'message']
                },] }
    ];
    exports.AmplifyToast.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    exports.AmplifyToast = __decorate([
        ProxyCmp({ inputs: ['handleClose', 'message'] })
    ], exports.AmplifyToast);
    var AmplifyTooltip = /** @class */ (function () {
        function AmplifyTooltip(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyTooltip;
    }());
    AmplifyTooltip.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-tooltip',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['shouldAutoShow', 'text']
                },] }
    ];
    AmplifyTooltip.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyTooltip = __decorate([
        ProxyCmp({ inputs: ['shouldAutoShow', 'text'] })
    ], AmplifyTooltip);
    var AmplifyTotpSetup = /** @class */ (function () {
        function AmplifyTotpSetup(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyTotpSetup;
    }());
    AmplifyTotpSetup.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-totp-setup',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'handleAuthStateChange',
                        'handleComplete',
                        'headerText',
                        'issuer',
                        'standalone',
                        'user',
                    ]
                },] }
    ];
    AmplifyTotpSetup.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyTotpSetup = __decorate([
        ProxyCmp({
            inputs: [
                'handleAuthStateChange',
                'handleComplete',
                'headerText',
                'issuer',
                'standalone',
                'user',
            ],
        })
    ], AmplifyTotpSetup);
    var AmplifyUsernameField = /** @class */ (function () {
        function AmplifyUsernameField(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyUsernameField;
    }());
    AmplifyUsernameField.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-username-field',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'disabled',
                        'fieldId',
                        'handleInputChange',
                        'hint',
                        'inputProps',
                        'label',
                        'placeholder',
                        'required',
                        'value',
                    ]
                },] }
    ];
    AmplifyUsernameField.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyUsernameField = __decorate([
        ProxyCmp({
            inputs: [
                'disabled',
                'fieldId',
                'handleInputChange',
                'hint',
                'inputProps',
                'label',
                'placeholder',
                'required',
                'value',
            ],
        })
    ], AmplifyUsernameField);
    var AmplifyVerifyContact = /** @class */ (function () {
        function AmplifyVerifyContact(c, r, z) {
            this.z = z;
            c.detach();
            this.el = r.nativeElement;
        }
        return AmplifyVerifyContact;
    }());
    AmplifyVerifyContact.decorators = [
        { type: core.Component, args: [{
                    selector: 'amplify-verify-contact',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: ['handleAuthStateChange', 'user']
                },] }
    ];
    AmplifyVerifyContact.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef },
        { type: core.ElementRef },
        { type: core.NgZone }
    ]; };
    AmplifyVerifyContact = __decorate([
        ProxyCmp({ inputs: ['handleAuthStateChange', 'user'] })
    ], AmplifyVerifyContact);

    customElements.define('amplify-button', components.AmplifyButton);
    customElements.define('amplify-input', components.AmplifyInput);
    customElements.define('amplify-toast', components.AmplifyToast);
    customElements.define('amplify-chatbot', components.AmplifyChatbot);
    customElements.define('amplify-s3-album', components.AmplifyS3Album);
    customElements.define('amplify-s3-image-picker', components.AmplifyS3ImagePicker);
    customElements.define('amplify-s3-text', components.AmplifyS3Text);
    customElements.define('amplify-s3-text-picker', components.AmplifyS3TextPicker);
    customElements.define('amplify-s3-image', components.AmplifyS3Image);
    customElements.define('amplify-picker', components.AmplifyPicker);
    customElements.define('amplify-photo-picker', components.AmplifyPhotoPicker);
    customElements.define('amplify-icon', components.AmplifyIcon);
    var LegacyAmplifyUiModule = /** @class */ (function () {
        function LegacyAmplifyUiModule() {
        }
        return LegacyAmplifyUiModule;
    }());
    LegacyAmplifyUiModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        exports.AmplifyChatbot,
                        exports.AmplifyToast,
                        exports.AmplifyIcon,
                        exports.AmplifyInput,
                        exports.AmplifyButton,
                        exports.AmplifyS3Album,
                        exports.AmplifyS3ImagePicker,
                        exports.AmplifyS3Text,
                        exports.AmplifyS3TextPicker,
                        exports.AmplifyS3Image,
                        exports.AmplifyPicker,
                        exports.AmplifyPhotoPicker,
                    ],
                    imports: [common.CommonModule],
                    exports: [
                        exports.AmplifyChatbot,
                        exports.AmplifyToast,
                        exports.AmplifyIcon,
                        exports.AmplifyInput,
                        exports.AmplifyButton,
                        exports.AmplifyS3Album,
                        exports.AmplifyS3ImagePicker,
                        exports.AmplifyS3Text,
                        exports.AmplifyS3TextPicker,
                        exports.AmplifyS3Image,
                        exports.AmplifyPicker,
                        exports.AmplifyPhotoPicker,
                    ],
                    schemas: [core.CUSTOM_ELEMENTS_SCHEMA],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.LegacyAmplifyUiModule = LegacyAmplifyUiModule;
    exports["ɵa"] = ProxyCmp;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=aws-amplify-ui-angular-legacy.umd.js.map
