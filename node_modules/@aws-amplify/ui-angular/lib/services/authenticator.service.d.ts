import { OnDestroy } from '@angular/core';
import { AuthContext, AuthEvent, AuthInterpreter, AuthMachineState } from '@aws-amplify/ui';
import { Event, Subscription } from 'xstate';
import { AuthSubscriptionCallback } from '../common';
/**
 * AuthenticatorService provides access to the authenticator state and context.
 */
import * as ɵngcc0 from '@angular/core';
export declare class AuthenticatorService implements OnDestroy {
    private _authState;
    private _authService;
    private _sendEventAliases;
    private _machineSubscription;
    private _facade;
    constructor();
    ngOnDestroy(): void;
    /**
     * Context facades
     */
    get error(): string;
    get hasValidationErrors(): boolean;
    get isPending(): boolean;
    get route(): string;
    get authStatus(): string;
    get user(): import("@aws-amplify/ui").CognitoUserAmplify;
    get validationErrors(): {
        [x: string]: string | string[];
    };
    get codeDeliveryDetails(): import("@aws-amplify/ui").CodeDeliveryDetails;
    /**
     * Service facades
     */
    get updateForm(): (data?: Record<string | number | symbol, any>) => void;
    get updateBlur(): (data?: Record<string | number | symbol, any>) => void;
    get resendCode(): (data?: Record<string | number | symbol, any>) => void;
    get signOut(): (data?: Record<string | number | symbol, any>) => void;
    get submitForm(): (data?: Record<string | number | symbol, any>) => void;
    /**
     * Transition facades
     */
    get toFederatedSignIn(): (data?: Record<string | number | symbol, any>) => void;
    get toResetPassword(): (data?: Record<string | number | symbol, any>) => void;
    get toSignIn(): (data?: Record<string | number | symbol, any>) => void;
    get toSignUp(): (data?: Record<string | number | symbol, any>) => void;
    get skipVerification(): (data?: Record<string | number | symbol, any>) => void;
    /**
     * Internal utility functions
     */
    /** @deprecated For internal use only */
    get authState(): AuthMachineState;
    /** @deprecated For internal use only */
    get authService(): AuthInterpreter;
    /** @deprecated For internal use only */
    get context(): AuthContext;
    /** @deprecated For internal use only */
    get slotContext(): {
        $implicit: {
            resendCode: (data?: Record<string | number | symbol, any>) => void;
            signOut: (data?: Record<string | number | symbol, any>) => void;
            submitForm: (data?: Record<string | number | symbol, any>) => void;
            updateForm: (data?: Record<string | number | symbol, any>) => void;
            updateBlur: (data?: Record<string | number | symbol, any>) => void;
            toFederatedSignIn: (data?: Record<string | number | symbol, any>) => void;
            toResetPassword: (data?: Record<string | number | symbol, any>) => void;
            toSignIn: (data?: Record<string | number | symbol, any>) => void;
            toSignUp: (data?: Record<string | number | symbol, any>) => void;
            skipVerification: (data?: Record<string | number | symbol, any>) => void;
            error: string;
            hasValidationErrors: boolean;
            isPending: boolean; /**
             * Context facades
             */
            route: string;
            authStatus: string;
            user: import("@aws-amplify/ui").CognitoUserAmplify;
            validationErrors: {
                [x: string]: string | string[];
            };
            codeDeliveryDetails: import("@aws-amplify/ui").CodeDeliveryDetails;
        };
        resendCode: (data?: Record<string | number | symbol, any>) => void;
        signOut: (data?: Record<string | number | symbol, any>) => void;
        submitForm: (data?: Record<string | number | symbol, any>) => void;
        updateForm: (data?: Record<string | number | symbol, any>) => void;
        updateBlur: (data?: Record<string | number | symbol, any>) => void;
        toFederatedSignIn: (data?: Record<string | number | symbol, any>) => void;
        toResetPassword: (data?: Record<string | number | symbol, any>) => void;
        toSignIn: (data?: Record<string | number | symbol, any>) => void;
        toSignUp: (data?: Record<string | number | symbol, any>) => void;
        skipVerification: (data?: Record<string | number | symbol, any>) => void;
        error: string;
        hasValidationErrors: boolean;
        isPending: boolean; /**
         * Context facades
         */
        route: string;
        authStatus: string;
        user: import("@aws-amplify/ui").CognitoUserAmplify;
        validationErrors: {
            [x: string]: string | string[];
        };
        codeDeliveryDetails: import("@aws-amplify/ui").CodeDeliveryDetails;
    };
    /** @deprecated For internal use only */
    subscribe(callback: AuthSubscriptionCallback): Subscription;
    /** @deprecated For internal use only */
    send(event: Event<AuthEvent>): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<AuthenticatorService, never>;
}

//# sourceMappingURL=authenticator.service.d.ts.map