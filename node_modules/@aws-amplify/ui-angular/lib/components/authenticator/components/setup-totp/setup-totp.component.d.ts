import { OnInit } from '@angular/core';
import { FormFields, FormFieldsArray } from '@aws-amplify/ui';
import { AuthenticatorService } from '../../../../services/authenticator.service';
import * as ɵngcc0 from '@angular/core';
export declare class SetupTotpComponent implements OnInit {
    authenticator: AuthenticatorService;
    dataAttr: string;
    headerText: string;
    qrCodeSource: string;
    secretKey: string;
    copyTextLabel: string;
    backToSignInText: string;
    confirmText: string;
    sortedFormFields: FormFieldsArray;
    formOverrides: FormFields;
    constructor(authenticator: AuthenticatorService);
    ngOnInit(): void;
    get context(): {
        $implicit: {
            resendCode: (data?: Record<string | number | symbol, any>) => void;
            signOut: (data?: Record<string | number | symbol, any>) => void;
            submitForm: (data?: Record<string | number | symbol, any>) => void;
            updateForm: (data?: Record<string | number | symbol, any>) => void;
            updateBlur: (data?: Record<string | number | symbol, any>) => void;
            toFederatedSignIn: (data?: Record<string | number | symbol, any>) => void;
            toResetPassword: (data?: Record<string | number | symbol, any>) => void;
            toSignIn: (data?: Record<string | number | symbol, any>) => void;
            toSignUp: (data?: Record<string | number | symbol, any>) => void;
            skipVerification: (data?: Record<string | number | symbol, any>) => void;
            error: string;
            hasValidationErrors: boolean;
            isPending: boolean;
            route: string;
            authStatus: string;
            user: import("@aws-amplify/ui").CognitoUserAmplify;
            validationErrors: {
                [x: string]: string | string[];
            };
            codeDeliveryDetails: import("@aws-amplify/ui").CodeDeliveryDetails;
        };
        resendCode: (data?: Record<string | number | symbol, any>) => void;
        signOut: (data?: Record<string | number | symbol, any>) => void;
        submitForm: (data?: Record<string | number | symbol, any>) => void;
        updateForm: (data?: Record<string | number | symbol, any>) => void;
        updateBlur: (data?: Record<string | number | symbol, any>) => void;
        toFederatedSignIn: (data?: Record<string | number | symbol, any>) => void;
        toResetPassword: (data?: Record<string | number | symbol, any>) => void;
        toSignIn: (data?: Record<string | number | symbol, any>) => void;
        toSignUp: (data?: Record<string | number | symbol, any>) => void;
        skipVerification: (data?: Record<string | number | symbol, any>) => void;
        error: string;
        hasValidationErrors: boolean;
        isPending: boolean;
        route: string;
        authStatus: string;
        user: import("@aws-amplify/ui").CognitoUserAmplify;
        validationErrors: {
            [x: string]: string | string[];
        };
        codeDeliveryDetails: import("@aws-amplify/ui").CodeDeliveryDetails;
    };
    generateQRCode(): Promise<void>;
    onInput(event: Event): void;
    onSubmit(event: Event): void;
    copyText(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SetupTotpComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<SetupTotpComponent, "amplify-setup-totp", never, {}, {}, never, never, false>;
}

//# sourceMappingURL=setup-totp.component.d.ts.map