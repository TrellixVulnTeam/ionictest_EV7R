import * as i0 from '@angular/core';
import { Directive, TemplateRef, Input, Injectable, Component, ViewEncapsulation, ChangeDetectorRef, ContentChildren, HostBinding, EventEmitter, Output, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { createAuthenticatorMachine, getServiceContextFacade, getSendEventAliases, translate, listenToAuthHub, defaultAuthHubHandler, hasTranslation, getFormDataFromEvent, getActorContext, AuthChallengeNames, FederatedIdentityProviders, countryDialCodes, getErrors, defaultFormFieldOptions, getActorState, getSortedFormFields, getDefaultFormFields, applyDefaults, sortFormFields } from '@aws-amplify/ui';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function AuthenticatorComponent_div_0_amplify_tabs_4_amplify_slot_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 20);
    ɵngcc0.ɵɵelement(1, "amplify-sign-in");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("context", ctx_r12.context);
} }
function AuthenticatorComponent_div_0_amplify_tabs_4_amplify_slot_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 21);
    ɵngcc0.ɵɵelement(1, "amplify-sign-up");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("context", ctx_r13.context);
} }
function AuthenticatorComponent_div_0_amplify_tabs_4_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "amplify-tabs", 17);
    ɵngcc0.ɵɵlistener("tabChange", function AuthenticatorComponent_div_0_amplify_tabs_4_Template_amplify_tabs_tabChange_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ɵngcc0.ɵɵresetView(ctx_r14.onTabChange()); });
    ɵngcc0.ɵɵelementStart(1, "amplify-tab-item", 18);
    ɵngcc0.ɵɵtemplate(2, AuthenticatorComponent_div_0_amplify_tabs_4_amplify_slot_2_Template, 2, 1, "amplify-slot", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "amplify-tab-item", 18);
    ɵngcc0.ɵɵtemplate(4, AuthenticatorComponent_div_0_amplify_tabs_4_amplify_slot_4_Template, 2, 1, "amplify-slot", 19);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ctx_r2.signInTitle)("active", ctx_r2.route === "signIn");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.route === "signIn");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("title", ctx_r2.signUpTitle)("active", ctx_r2.route === "signUp");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r2.route === "signUp");
} }
function AuthenticatorComponent_div_0_amplify_slot_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 20);
    ɵngcc0.ɵɵelement(1, "amplify-sign-in");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r3.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 22);
    ɵngcc0.ɵɵelement(1, "amplify-confirm-sign-up");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r4.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 23);
    ɵngcc0.ɵɵelement(1, "amplify-confirm-sign-in");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r5.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 24);
    ɵngcc0.ɵɵelement(1, "amplify-setup-totp");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r6.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 25);
    ɵngcc0.ɵɵelement(1, "amplify-force-new-password");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r7.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 26);
    ɵngcc0.ɵɵelement(1, "amplify-reset-password");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r8.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 27);
    ɵngcc0.ɵɵelement(1, "amplify-confirm-reset-password");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r9.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_12_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 28);
    ɵngcc0.ɵɵelement(1, "amplify-verify-user");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r10.context);
} }
function AuthenticatorComponent_div_0_amplify_slot_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 29);
    ɵngcc0.ɵɵelement(1, "amplify-confirm-verify-user");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("context", ctx_r11.context);
} }
function AuthenticatorComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2)(1, "div", 3);
    ɵngcc0.ɵɵelement(2, "amplify-slot", 4);
    ɵngcc0.ɵɵelementStart(3, "div", 5);
    ɵngcc0.ɵɵtemplate(4, AuthenticatorComponent_div_0_amplify_tabs_4_Template, 5, 6, "amplify-tabs", 6);
    ɵngcc0.ɵɵtemplate(5, AuthenticatorComponent_div_0_amplify_slot_5_Template, 2, 1, "amplify-slot", 7);
    ɵngcc0.ɵɵtemplate(6, AuthenticatorComponent_div_0_amplify_slot_6_Template, 2, 1, "amplify-slot", 8);
    ɵngcc0.ɵɵtemplate(7, AuthenticatorComponent_div_0_amplify_slot_7_Template, 2, 1, "amplify-slot", 9);
    ɵngcc0.ɵɵtemplate(8, AuthenticatorComponent_div_0_amplify_slot_8_Template, 2, 1, "amplify-slot", 10);
    ɵngcc0.ɵɵtemplate(9, AuthenticatorComponent_div_0_amplify_slot_9_Template, 2, 1, "amplify-slot", 11);
    ɵngcc0.ɵɵtemplate(10, AuthenticatorComponent_div_0_amplify_slot_10_Template, 2, 1, "amplify-slot", 12);
    ɵngcc0.ɵɵtemplate(11, AuthenticatorComponent_div_0_amplify_slot_11_Template, 2, 1, "amplify-slot", 13);
    ɵngcc0.ɵɵtemplate(12, AuthenticatorComponent_div_0_amplify_slot_12_Template, 2, 1, "amplify-slot", 14);
    ɵngcc0.ɵɵtemplate(13, AuthenticatorComponent_div_0_amplify_slot_13_Template, 2, 1, "amplify-slot", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(14, "amplify-slot", 16);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("data-variation", ctx_r0.variation);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("context", ctx_r0.context);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("data-amplify-router-content", ctx_r0.hasTabs() ? undefined : "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", (ctx_r0.route === "signIn" || ctx_r0.route === "signUp") && !ctx_r0.hideSignUp);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "signIn" && ctx_r0.hideSignUp);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "confirmSignUp");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "confirmSignIn");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "setupTOTP");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "forceNewPassword");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "resetPassword");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "confirmResetPassword");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "verifyUser");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.route === "confirmVerifyUser");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("context", ctx_r0.context);
} }
function AuthenticatorComponent_amplify_slot_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-slot", 30);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("context", ctx_r1.context);
} }
const _c0 = ["*"];
function ConfirmResetPasswordComponent_amplify_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function ConfirmSignInComponent_amplify_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function ConfirmSignUpComponent_amplify_error_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function ConfirmVerifyUserComponent_amplify_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function FederatedSignInComponent_div_0_amplify_federated_sign_in_button_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-federated-sign-in-button", 5);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 6);
    ɵngcc0.ɵɵelement(2, "path", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(3, "p", 8);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("text", ctx_r1.signInAmazonText)("provider", ctx_r1.FederatedProviders.Amazon);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.signInAmazonText, " ");
} }
function FederatedSignInComponent_div_0_amplify_federated_sign_in_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-federated-sign-in-button", 9);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 10);
    ɵngcc0.ɵɵelement(2, "path", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(3, "p", 8);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("provider", ctx_r2.FederatedProviders.Apple);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.signInAppleText, " ");
} }
function FederatedSignInComponent_div_0_amplify_federated_sign_in_button_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-federated-sign-in-button", 5);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 12);
    ɵngcc0.ɵɵelement(2, "path", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(3, "p", 8);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("text", ctx_r3.signInFacebookText)("provider", ctx_r3.FederatedProviders.Facebook);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r3.signInFacebookText, " ");
} }
function FederatedSignInComponent_div_0_amplify_federated_sign_in_button_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-federated-sign-in-button", 9);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 14);
    ɵngcc0.ɵɵelement(2, "path", 15)(3, "path", 16)(4, "path", 17)(5, "path", 18);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(6, "p", 8);
    ɵngcc0.ɵɵtext(7);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("provider", ctx_r4.FederatedProviders.Google);
    ɵngcc0.ɵɵadvance(7);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.signInGoogleText, " ");
} }
function FederatedSignInComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, FederatedSignInComponent_div_0_amplify_federated_sign_in_button_1_Template, 5, 3, "amplify-federated-sign-in-button", 2);
    ɵngcc0.ɵɵtemplate(2, FederatedSignInComponent_div_0_amplify_federated_sign_in_button_2_Template, 5, 2, "amplify-federated-sign-in-button", 3);
    ɵngcc0.ɵɵtemplate(3, FederatedSignInComponent_div_0_amplify_federated_sign_in_button_3_Template, 5, 3, "amplify-federated-sign-in-button", 2);
    ɵngcc0.ɵɵtemplate(4, FederatedSignInComponent_div_0_amplify_federated_sign_in_button_4_Template, 8, 2, "amplify-federated-sign-in-button", 3);
    ɵngcc0.ɵɵelement(5, "hr", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.includeAmazon);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.includeApple);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.includeFacebook);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.includeGoogle);
} }
function ForceNewPasswordComponent_amplify_error_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function FormFieldComponent_amplify_phone_number_field_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "amplify-phone-number-field", 5);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("name", ctx_r0.name)("label", ctx_r0.formField.label)("defaultCountryCode", ctx_r0.formField.dialCode)("dialCodeList", ctx_r0.formField.dialCodeList)("placeholder", ctx_r0.formField.placeholder)("required", ctx_r0.formField.isRequired)("labelHidden", ctx_r0.formField.labelHidden)("autocomplete", ctx_r0.formField.autocomplete)("hasError", ctx_r0.hasError)("describedBy", ctx_r0.ariaDescribedBy);
} }
function FormFieldComponent_amplify_password_field_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "amplify-password-field", 6);
    ɵngcc0.ɵɵlistener("setBlur", function FormFieldComponent_amplify_password_field_2_Template_amplify_password_field_setBlur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r4.onBlur($event)); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("name", ctx_r1.name)("label", ctx_r1.formField.label)("placeholder", ctx_r1.formField.placeholder)("required", ctx_r1.formField.isRequired)("labelHidden", ctx_r1.formField.labelHidden)("autocomplete", ctx_r1.formField.autocomplete)("hasError", ctx_r1.hasError)("describedBy", ctx_r1.ariaDescribedBy);
} }
function FormFieldComponent_amplify_text_field_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "amplify-text-field", 7);
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("name", ctx_r2.name)("label", ctx_r2.formField.label)("placeholder", ctx_r2.formField.placeholder)("required", ctx_r2.formField.isRequired)("labelHidden", ctx_r2.formField.labelHidden)("autocomplete", ctx_r2.formField.autocomplete)("type", ctx_r2.formField.type)("hasError", ctx_r2.hasError)("describedBy", ctx_r2.ariaDescribedBy);
} }
function FormFieldComponent_div_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 10);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r7 = ctx.$implicit;
    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r6.translate(error_r7), " ");
} }
function FormFieldComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 8);
    ɵngcc0.ɵɵtemplate(1, FormFieldComponent_div_4_div_1_Template, 2, 1, "div", 9);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r3.errorId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r3.errors);
} }
function ResetPasswordComponent_amplify_error_10_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function SetupTotpComponent_p_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p");
    ɵngcc0.ɵɵtext(1, "Loading...");
    ɵngcc0.ɵɵelementEnd();
} }
function SetupTotpComponent_img_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "img", 15);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("src", ctx_r1.qrCodeSource, ɵngcc0.ɵɵsanitizeUrl);
} }
function SetupTotpComponent_amplify_error_20_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r2.authenticator.error, " ");
} }
function SignInComponent_amplify_error_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function SignUpComponent_amplify_error_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.authenticator.error, " ");
} }
function VerifyUserComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelement(1, "input", 9);
    ɵngcc0.ɵɵelementStart(2, "label", 10);
    ɵngcc0.ɵɵtext(3);
    ɵngcc0.ɵɵelementEnd()();
} if (rf & 2) {
    const unverifiedAttribute_r2 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("value", unverifiedAttribute_r2.key)("id", ctx_r0.labelId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", ctx_r0.labelId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.getLabelForAttr(unverifiedAttribute_r2.key));
} }
function VerifyUserComponent_amplify_error_11_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "amplify-error");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.authenticator.error, " ");
} }
function BaseFormFieldsComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelement(1, "amplify-form-field", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const formField_r1 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("name", formField_r1[0])("formField", formField_r1[1]);
} }
const _c1 = ["amplify-button", ""];
function CheckboxComponent_p_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "p", 9);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.errorMessage, " ");
} }
const _c2 = function (a0) { return { "amplify-checkbox__button--error": a0 }; };
const _c3 = function (a0) { return { "amplify-checkbox__icon--checked": a0 }; };
function ErrorComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1)(1, "div", 2);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(2, "svg", 3);
    ɵngcc0.ɵɵelement(3, "path", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵnamespaceHTML();
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵprojection(5);
    ɵngcc0.ɵɵelementEnd()();
    ɵngcc0.ɵɵelementStart(6, "button", 5);
    ɵngcc0.ɵɵlistener("click", function ErrorComponent_div_0_Template_button_click_6_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r1.close()); });
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(7, "svg", 3);
    ɵngcc0.ɵɵelement(8, "path", 6);
    ɵngcc0.ɵɵelementEnd()()();
} if (rf & 2) {
    ɵngcc0.ɵɵadvance(6);
    ɵngcc0.ɵɵproperty("fullWidth", false);
} }
function PasswordFieldComponent__svg_svg_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 6);
    ɵngcc0.ɵɵelement(1, "path", 7);
    ɵngcc0.ɵɵelementEnd();
} }
function PasswordFieldComponent__svg_svg_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg", 6);
    ɵngcc0.ɵɵelement(1, "path", 8)(2, "path", 9);
    ɵngcc0.ɵɵelementEnd();
} }
function SelectComponent_option_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "option", 7);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("value", item_r1)("selected", item_r1 === ctx_r0.defaultValue);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", item_r1, " ");
} }
function TabItemComponent_ng_content_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "active"]);
} }
function TabsComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵlistener("click", function TabsComponent_div_2_Template_div_click_0_listener() { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const tab_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r2.handleTabClick(tab_r1)); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r1 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("id", tab_r1.labelledById)("tabindex", tab_r1.active ? "0" : "1");
    ɵngcc0.ɵɵattribute("aria-selected", tab_r1.active)("aria-controls", tab_r1.id)("data-state", tab_r1.active ? "active" : "inactive");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", tab_r1.title, " ");
} }
function AmplifySlotComponent_ng_content_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵprojection(0, 0, ["*ngIf", "!isOverriden"]);
} }
function AmplifySlotComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 2);
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r1.overridingComponent)("ngTemplateOutletContext", ctx_r1.context);
} }
export { translations } from '@aws-amplify/ui';
import { Logger } from '@aws-amplify/core';
import { interpret } from 'xstate';
import { Logger as Logger$1, Auth } from 'aws-amplify';
import { nanoid } from 'nanoid';
import { __awaiter } from 'tslib';
import QRCode from 'qrcode';

class AmplifySlotDirective {
    constructor(template) {
        this.template = template;
    }
    set amplifySlot(component) {
        this.name = component;
    }
}
AmplifySlotDirective.ɵfac = function AmplifySlotDirective_Factory(t) { return new (t || AmplifySlotDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };
AmplifySlotDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: AmplifySlotDirective, selectors: [["", "amplifySlot", ""]], inputs: { amplifySlot: "amplifySlot" } });
AmplifySlotDirective.ctorParameters = () => [
    { type: TemplateRef }
];
AmplifySlotDirective.propDecorators = {
    amplifySlot: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AmplifySlotDirective, [{
        type: Directive,
        args: [{
                selector: '[amplifySlot]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { amplifySlot: [{
            type: Input
        }] }); })();

/**
 * Stores and provides custom components that users provide with `amplify-slot`.
 */
class CustomComponentsService {
    constructor() {
        this._customComponents = {};
    }
    get customComponents() {
        return this._customComponents;
    }
    set customComponents(customComponents) {
        this._customComponents = Object.assign(Object.assign({}, this._customComponents), customComponents);
    }
}
CustomComponentsService.ɵfac = function CustomComponentsService_Factory(t) { return new (t || CustomComponentsService)(); };
CustomComponentsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CustomComponentsService_Factory() { return new CustomComponentsService(); }, token: CustomComponentsService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CustomComponentsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

const logger$2 = new Logger('state-machine');
/**
 * AuthenticatorService provides access to the authenticator state and context.
 */
class AuthenticatorService {
    constructor() {
        const machine = createAuthenticatorMachine();
        const authService = interpret(machine).start();
        this._machineSubscription = authService.subscribe((state) => {
            this._authState = state;
            this._facade = getServiceContextFacade(state);
        });
        this._sendEventAliases = getSendEventAliases(authService.send);
        this._authService = authService;
    }
    ngOnDestroy() {
        if (this._machineSubscription)
            this._machineSubscription.unsubscribe();
    }
    /**
     * Context facades
     */
    get error() {
        var _a;
        return translate((_a = this._facade) === null || _a === void 0 ? void 0 : _a.error);
    }
    get hasValidationErrors() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.hasValidationErrors;
    }
    get isPending() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.isPending;
    }
    get route() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.route;
    }
    get authStatus() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.authStatus;
    }
    get user() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.user;
    }
    get validationErrors() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.validationErrors;
    }
    get codeDeliveryDetails() {
        var _a;
        return (_a = this._facade) === null || _a === void 0 ? void 0 : _a.codeDeliveryDetails;
    }
    /**
     * Service facades
     */
    get updateForm() {
        return this._sendEventAliases.updateForm;
    }
    get updateBlur() {
        return this._sendEventAliases.updateBlur;
    }
    get resendCode() {
        return this._sendEventAliases.resendCode;
    }
    get signOut() {
        return this._sendEventAliases.signOut;
    }
    get submitForm() {
        return this._sendEventAliases.submitForm;
    }
    /**
     * Transition facades
     */
    get toFederatedSignIn() {
        return this._sendEventAliases.toFederatedSignIn;
    }
    get toResetPassword() {
        return this._sendEventAliases.toResetPassword;
    }
    get toSignIn() {
        return this._sendEventAliases.toSignIn;
    }
    get toSignUp() {
        return this._sendEventAliases.toSignUp;
    }
    get skipVerification() {
        return this._sendEventAliases.skipVerification;
    }
    /**
     * Internal utility functions
     */
    /** @deprecated For internal use only */
    get authState() {
        return this._authState;
    }
    /** @deprecated For internal use only */
    get authService() {
        return this._authService;
    }
    /** @deprecated For internal use only */
    get context() {
        return this._authState.context;
    }
    /** @deprecated For internal use only */
    get slotContext() {
        const slotContext = Object.assign(Object.assign({}, this._facade), this._sendEventAliases);
        return Object.assign(Object.assign({}, slotContext), { $implicit: Object.assign({}, slotContext) });
    }
    /** @deprecated For internal use only */
    subscribe(callback) {
        if (this._authService) {
            return this._authService.subscribe(callback);
        }
        else {
            logger$2.error('Subscription attempted before machine was created. This is likely a bug on the library, please consider filing a bug.');
        }
    }
    /** @deprecated For internal use only */
    send(event) {
        this.authService.send(event);
    }
}
AuthenticatorService.ɵfac = function AuthenticatorService_Factory(t) { return new (t || AuthenticatorService)(); };
AuthenticatorService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthenticatorService_Factory() { return new AuthenticatorService(); }, token: AuthenticatorService, providedIn: "root" });
AuthenticatorService.ctorParameters = () => [];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthenticatorService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

class AuthenticatorComponent {
    constructor(authenticator, contextService, changeDetector) {
        this.authenticator = authenticator;
        this.contextService = contextService;
        this.changeDetector = changeDetector;
        this.customComponentQuery = null;
        // translated texts
        this.signInTitle = translate('Sign In');
        this.signUpTitle = translate('Create Account');
        this.hasInitialized = false;
        this.isHandlingHubEvent = false;
    }
    ngOnInit() {
        const { initialState, loginMechanisms, services, signUpAttributes, socialProviders, formFields, } = this;
        const { authService } = this.authenticator;
        this.unsubscribeHub = listenToAuthHub(authService, (data, service) => {
            defaultAuthHubHandler(data, service);
            /**
             * Hub events aren't properly caught by Angular, because they are
             * synchronous events. Angular tracks async network events and
             * html events, but not synchronous events like hub.
             *
             * On any notable hub events, we run change detection manually.
             */
            this.changeDetector.detectChanges();
            /**
             * Hub events that we handle can lead to multiple state changes:
             * e.g. `authenticated` -> `signOut` -> initialState.
             *
             * We want to ensure change detection runs all the way, until
             * we reach back to the initial state. Setting the below flag
             * to true to until we reach initial state.
             */
            this.isHandlingHubEvent = true;
        });
        /**
         * Subscribes to state machine changes and sends INIT event
         * once machine reaches 'setup' state.
         */
        this.unsubscribeMachine = this.authenticator.subscribe(() => {
            const { route } = this.authenticator;
            if (this.isHandlingHubEvent) {
                this.changeDetector.detectChanges();
                const initialStateWithDefault = initialState !== null && initialState !== void 0 ? initialState : 'signIn';
                // We can stop manual change detection if we're back to the initial state
                if (route === initialStateWithDefault) {
                    this.isHandlingHubEvent = false;
                }
            }
            if (!this.hasInitialized && route === 'setup') {
                this.authenticator.send({
                    type: 'INIT',
                    data: {
                        initialState,
                        loginMechanisms,
                        services,
                        signUpAttributes,
                        socialProviders,
                        formFields,
                    },
                });
                this.hasInitialized = true;
            }
        }).unsubscribe;
        /**
         * handling translations after content init, because authenticator and its
         * translations might be initialized before the main app's `ngOnInit` is run.
         */
        this.signInTitle = translate('Sign In');
        this.signUpTitle = translate('Create Account');
    }
    /**
     * Lifecycle Methods
     */
    ngAfterContentInit() {
        this.contextService.customComponents = this.mapCustomComponents(this.customComponentQuery);
    }
    ngOnDestroy() {
        if (this.unsubscribeMachine)
            this.unsubscribeMachine();
        if (this.unsubscribeHub)
            this.unsubscribeHub();
    }
    /**
     * Class Functions
     */
    // context passed to "authenticated" slot
    get context() {
        return this.authenticator.slotContext;
    }
    get route() {
        return this.authenticator.route;
    }
    onTabChange() {
        const route = this.authenticator.route;
        if (route === 'signIn') {
            this.authenticator.toSignUp();
        }
        else {
            this.authenticator.toSignIn();
        }
    }
    hasTabs() {
        const { route } = this.authenticator;
        return route === 'signIn' || route === 'signUp';
    }
    hasRouteComponent() {
        const { route } = this.authenticator;
        switch (route) {
            case 'authenticated':
            case 'idle':
            case 'setup':
            case 'signOut':
            case 'autoSignIn':
                return false;
            default:
                return true;
        }
    }
    mapCustomComponents(componentQuery) {
        if (!componentQuery)
            return {};
        const customComponents = {};
        componentQuery.forEach((component) => {
            customComponents[component.name] = component.template;
        });
        return customComponents;
    }
}
AuthenticatorComponent.ɵfac = function AuthenticatorComponent_Factory(t) { return new (t || AuthenticatorComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService), ɵngcc0.ɵɵdirectiveInject(CustomComponentsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
AuthenticatorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AuthenticatorComponent, selectors: [["amplify-authenticator"]], contentQueries: function AuthenticatorComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, AmplifySlotDirective, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customComponentQuery = _t);
    } }, inputs: { formFields: "formFields", initialState: "initialState", loginMechanisms: "loginMechanisms", services: "services", signUpAttributes: "signUpAttributes", socialProviders: "socialProviders", variation: "variation", hideSignUp: "hideSignUp" }, features: [ɵngcc0.ɵɵProvidersFeature([CustomComponentsService])], ngContentSelectors: _c0, decls: 2, vars: 2, consts: [["data-amplify-authenticator", "", 4, "ngIf"], ["name", "authenticated", 3, "context", 4, "ngIf"], ["data-amplify-authenticator", ""], ["data-amplify-container", ""], ["name", "header", 3, "context"], ["data-amplify-router", ""], [3, "tabChange", 4, "ngIf"], ["name", "sign-in", 3, "context", 4, "ngIf"], ["name", "confirm-sign-up", 3, "context", 4, "ngIf"], ["name", "confirm-sign-in", 3, "context", 4, "ngIf"], ["name", "setup-totp", 3, "context", 4, "ngIf"], ["name", "force-new-password", 3, "context", 4, "ngIf"], ["name", "reset-password", 3, "context", 4, "ngIf"], ["name", "confirm-reset-password", 3, "context", 4, "ngIf"], ["name", "verify-user", 3, "context", 4, "ngIf"], ["name", "confirm-verify-user", 3, "context", 4, "ngIf"], ["name", "footer", 3, "context"], [3, "tabChange"], ["data-amplify-router-content", "", 3, "title", "active"], ["name", "sign-up", 3, "context", 4, "ngIf"], ["name", "sign-in", 3, "context"], ["name", "sign-up", 3, "context"], ["name", "confirm-sign-up", 3, "context"], ["name", "confirm-sign-in", 3, "context"], ["name", "setup-totp", 3, "context"], ["name", "force-new-password", 3, "context"], ["name", "reset-password", 3, "context"], ["name", "confirm-reset-password", 3, "context"], ["name", "verify-user", 3, "context"], ["name", "confirm-verify-user", 3, "context"], ["name", "authenticated", 3, "context"]], template: function AuthenticatorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, AuthenticatorComponent_div_0_Template, 15, 14, "div", 0);
        ɵngcc0.ɵɵtemplate(1, AuthenticatorComponent_amplify_slot_1_Template, 2, 1, "amplify-slot", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasRouteComponent());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.route === "authenticated");
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, ConfirmResetPasswordComponent, ConfirmSignInComponent, ConfirmSignUpComponent, ConfirmVerifyUserComponent, ForceNewPasswordComponent, ResetPasswordComponent, SetupTotpComponent, SignInComponent, SignUpComponent, TabItemComponent, TabsComponent, VerifyUserComponent]; }, encapsulation: 2 });
AuthenticatorComponent.ctorParameters = () => [
    { type: AuthenticatorService },
    { type: CustomComponentsService },
    { type: ChangeDetectorRef }
];
AuthenticatorComponent.propDecorators = {
    formFields: [{ type: Input }],
    initialState: [{ type: Input }],
    loginMechanisms: [{ type: Input }],
    services: [{ type: Input }],
    signUpAttributes: [{ type: Input }],
    socialProviders: [{ type: Input }],
    variation: [{ type: Input }],
    hideSignUp: [{ type: Input }],
    customComponentQuery: [{ type: ContentChildren, args: [AmplifySlotDirective,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AuthenticatorComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-authenticator',
                template: "<div\n  data-amplify-authenticator\n  [attr.data-variation]=\"variation\"\n  *ngIf=\"hasRouteComponent()\"\n>\n  <div data-amplify-container>\n    <amplify-slot name=\"header\" [context]=\"context\"></amplify-slot>\n    <div\n      data-amplify-router\n      [attr.data-amplify-router-content]=\"hasTabs() ? undefined : ''\"\n    >\n      <amplify-tabs\n        (tabChange)=\"onTabChange()\"\n        *ngIf=\"(route === 'signIn' || route === 'signUp') && !hideSignUp\"\n      >\n        <amplify-tab-item\n          [title]=\"signInTitle\"\n          [active]=\"route === 'signIn'\"\n          data-amplify-router-content\n        >\n          <!-- signIn component -->\n          <amplify-slot\n            name=\"sign-in\"\n            [context]=\"context\"\n            *ngIf=\"route === 'signIn'\"\n          >\n            <amplify-sign-in></amplify-sign-in>\n          </amplify-slot>\n        </amplify-tab-item>\n        <amplify-tab-item\n          [title]=\"signUpTitle\"\n          [active]=\"route === 'signUp'\"\n          data-amplify-router-content\n        >\n          <!-- signUp component -->\n          <amplify-slot\n            name=\"sign-up\"\n            [context]=\"context\"\n            *ngIf=\"route === 'signUp'\"\n          >\n            <amplify-sign-up></amplify-sign-up>\n          </amplify-slot>\n        </amplify-tab-item>\n      </amplify-tabs>\n\n      <amplify-slot\n        name=\"sign-in\"\n        [context]=\"context\"\n        *ngIf=\"route === 'signIn' && hideSignUp\"\n      >\n        <amplify-sign-in></amplify-sign-in>\n      </amplify-slot>\n\n      <!-- confirmSignUp content -->\n      <amplify-slot\n        name=\"confirm-sign-up\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmSignUp'\"\n      >\n        <amplify-confirm-sign-up></amplify-confirm-sign-up>\n      </amplify-slot>\n\n      <!-- confirmSignIn content -->\n      <amplify-slot\n        name=\"confirm-sign-in\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmSignIn'\"\n      >\n        <amplify-confirm-sign-in></amplify-confirm-sign-in>\n      </amplify-slot>\n\n      <!-- setupTotp content -->\n      <amplify-slot\n        name=\"setup-totp\"\n        [context]=\"context\"\n        *ngIf=\"route === 'setupTOTP'\"\n      >\n        <amplify-setup-totp></amplify-setup-totp>\n      </amplify-slot>\n\n      <!-- forceNewPassword content -->\n      <amplify-slot\n        name=\"force-new-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'forceNewPassword'\"\n      >\n        <amplify-force-new-password></amplify-force-new-password>\n      </amplify-slot>\n\n      <!-- resetPassword content -->\n      <amplify-slot\n        name=\"reset-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'resetPassword'\"\n      >\n        <amplify-reset-password></amplify-reset-password>\n      </amplify-slot>\n\n      <!-- confirmResetPassword content -->\n      <amplify-slot\n        name=\"confirm-reset-password\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmResetPassword'\"\n      >\n        <amplify-confirm-reset-password></amplify-confirm-reset-password>\n      </amplify-slot>\n\n      <!-- verifyUser content -->\n      <amplify-slot\n        name=\"verify-user\"\n        [context]=\"context\"\n        *ngIf=\"route === 'verifyUser'\"\n      >\n        <amplify-verify-user></amplify-verify-user>\n      </amplify-slot>\n\n      <!-- confirmVerifyUser content -->\n      <amplify-slot\n        name=\"confirm-verify-user\"\n        [context]=\"context\"\n        *ngIf=\"route === 'confirmVerifyUser'\"\n      >\n        <amplify-confirm-verify-user></amplify-confirm-verify-user>\n      </amplify-slot>\n    </div>\n\n    <amplify-slot name=\"footer\" [context]=\"context\"></amplify-slot>\n  </div>\n</div>\n\n<!-- signedIn content is rendered outside authenticator so it's not styled by authenticator -->\n<amplify-slot\n  name=\"authenticated\"\n  [context]=\"context\"\n  *ngIf=\"route === 'authenticated'\"\n>\n  <ng-content></ng-content>\n</amplify-slot>\n",
                providers: [CustomComponentsService],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: AuthenticatorService }, { type: CustomComponentsService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { customComponentQuery: [{
            type: ContentChildren,
            args: [AmplifySlotDirective]
        }], formFields: [{
            type: Input
        }], initialState: [{
            type: Input
        }], loginMechanisms: [{
            type: Input
        }], services: [{
            type: Input
        }], signUpAttributes: [{
            type: Input
        }], socialProviders: [{
            type: Input
        }], variation: [{
            type: Input
        }], hideSignUp: [{
            type: Input
        }] }); })();

class ConfirmResetPasswordComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = translate('Reset your password');
        // translated strings
        this.backToSignInText = translate('Back to Sign In');
        this.resendCodeText = translate('Resend Code');
        /**
         * Support backwards compatibility for erroneous 'Send Code' text
         * See https://github.com/aws-amplify/amplify-ui/issues/1784
         * TODO: Remove support for 'Send Code' translation in next Major release
         */
        this.submitText = !hasTranslation('Send Code')
            ? translate('Submit')
            : translate('Send Code');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
ConfirmResetPasswordComponent.ɵfac = function ConfirmResetPasswordComponent_Factory(t) { return new (t || ConfirmResetPasswordComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
ConfirmResetPasswordComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmResetPasswordComponent, selectors: [["amplify-confirm-reset-password"]], hostVars: 1, hostBindings: function ConfirmResetPasswordComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-confirmsignin", ctx.dataAttr);
    } }, inputs: { headerText: "headerText" }, decls: 12, vars: 8, consts: [["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "confirm-reset-password-header", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], ["route", "confirmResetPassword"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", "type", "button", 3, "click"], [4, "ngIf"], ["name", "confirm-reset-password-footer", 3, "context"]], template: function ConfirmResetPasswordComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function ConfirmResetPasswordComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); })("input", function ConfirmResetPasswordComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelement(5, "amplify-base-form-fields", 4);
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ConfirmResetPasswordComponent_Template_button_click_8_listener() { return ctx.authenticator.resendCode(); });
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ConfirmResetPasswordComponent_amplify_error_10_Template, 2, 1, "amplify-error", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "amplify-slot", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.submitText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.resendCodeText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent]; }, encapsulation: 2 });
ConfirmResetPasswordComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
ConfirmResetPasswordComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-confirmsignin',] }],
    headerText: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmResetPasswordComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-confirm-reset-password',
                template: "<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"confirm-reset-password-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ headerText }}</h3>\n    </amplify-slot>\n\n    <amplify-base-form-fields\n      route=\"confirmResetPassword\"\n    ></amplify-base-form-fields>\n\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ submitText }}\n    </button>\n\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      type=\"button\"\n      (click)=\"authenticator.resendCode()\"\n    >\n      {{ resendCodeText }}\n    </button>\n\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"confirm-reset-password-footer\" [context]=\"context\">\n  </amplify-slot>\n</form>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-confirmsignin']
        }], headerText: [{
            type: Input
        }] }); })();

const logger$1 = new Logger$1('ConfirmSignIn');
class ConfirmSignInComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.confirmText = translate('Confirm');
        this.backToSignInText = translate('Back to Sign In');
    }
    ngOnInit() {
        this.setHeaderText();
    }
    get context() {
        return this.authenticator.slotContext;
    }
    setHeaderText() {
        const state = this.authenticator.authState;
        const actorContext = getActorContext(state);
        const { challengeName } = actorContext;
        switch (challengeName) {
            case AuthChallengeNames.SOFTWARE_TOKEN_MFA:
                this.headerText = translate('Confirm TOTP Code');
                break;
            case AuthChallengeNames.SMS_MFA:
                this.headerText = translate('Confirm SMS Code');
                break;
            default:
                logger$1.error('Unexpected challengeName', challengeName);
        }
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
ConfirmSignInComponent.ɵfac = function ConfirmSignInComponent_Factory(t) { return new (t || ConfirmSignInComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
ConfirmSignInComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmSignInComponent, selectors: [["amplify-confirm-sign-in"]], hostVars: 1, hostBindings: function ConfirmSignInComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-confirmsignin", ctx.dataAttr);
    } }, decls: 12, vars: 8, consts: [["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "confirm-sign-in-header", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], ["route", "confirmSignIn"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", 3, "click"], [4, "ngIf"], ["name", "confirm-sign-in-footer", 3, "context"]], template: function ConfirmSignInComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function ConfirmSignInComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); })("input", function ConfirmSignInComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelement(5, "amplify-base-form-fields", 4);
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ConfirmSignInComponent_Template_button_click_8_listener() { return ctx.authenticator.toSignIn(); });
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ConfirmSignInComponent_amplify_error_10_Template, 2, 1, "amplify-error", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "amplify-slot", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.confirmText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.backToSignInText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent]; }, encapsulation: 2 });
ConfirmSignInComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
ConfirmSignInComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-confirmsignin',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmSignInComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-confirm-sign-in',
                template: "<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"confirm-sign-in-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ headerText }}</h3>\n    </amplify-slot>\n    <amplify-base-form-fields route=\"confirmSignIn\"></amplify-base-form-fields>\n\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ confirmText }}\n    </button>\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.toSignIn()\"\n    >\n      {{ backToSignInText }}\n    </button>\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot\n    name=\"confirm-sign-in-footer\"\n    [context]=\"context\"\n  ></amplify-slot>\n</form>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-confirmsignin']
        }] }); })();

class ConfirmSignUpComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.headerText = translate('Confirm Sign Up');
        this.dataAttr = '';
        // translated texts
        this.resendCodeText = translate('Resend Code');
        this.confirmText = translate('Confirm');
        this.emailMessage = translate('Your code is on the way. To log in, enter the code we emailed to');
        this.textedMessage = translate('Your code is on the way. To log in, enter the code we texted to');
        this.defaultMessage = translate('Your code is on the way. To log in, enter the code we sent you. It may take a minute to arrive.');
        this.minutesMessage = translate('It may take a minute to arrive.');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    get confirmSignUpHeading() {
        const { codeDeliveryDetails: { DeliveryMedium } = {} } = this.authenticator;
        return DeliveryMedium === 'EMAIL'
            ? translate('We Emailed You')
            : DeliveryMedium === 'SMS'
                ? translate('We Texted You')
                : translate('We Sent A Code');
    }
    get subtitleText() {
        const { codeDeliveryDetails: { DeliveryMedium, Destination } = {} } = this.authenticator;
        return DeliveryMedium === 'EMAIL'
            ? `${this.emailMessage} ${Destination}. ${this.minutesMessage}`
            : DeliveryMedium === 'SMS'
                ? `${this.textedMessage} ${Destination}. ${this.minutesMessage}`
                : translate(`${this.defaultMessage}`);
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
ConfirmSignUpComponent.ɵfac = function ConfirmSignUpComponent_Factory(t) { return new (t || ConfirmSignUpComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
ConfirmSignUpComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmSignUpComponent, selectors: [["amplify-confirm-sign-up"]], hostVars: 1, hostBindings: function ConfirmSignUpComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-confirmsignup", ctx.dataAttr);
    } }, inputs: { headerText: "headerText" }, decls: 15, vars: 9, consts: [["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "confirm-sign-up-header", 3, "context"], [1, "amplify-heading", "amplify-authenticator__heading", 2, "font-size", "1.5rem"], [1, "amplify-authenticator__subtitle"], ["route", "confirmSignUp"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "fontWeight", "normal", 3, "click"], [4, "ngIf"], ["name", "confirm-sign-up-footer", 3, "context"]], template: function ConfirmSignUpComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementContainerStart(0);
        ɵngcc0.ɵɵelementStart(1, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function ConfirmSignUpComponent_Template_form_submit_1_listener($event) { return ctx.onSubmit($event); })("input", function ConfirmSignUpComponent_Template_form_input_1_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelementStart(2, "fieldset", 1)(3, "amplify-slot", 2)(4, "h3", 3);
        ɵngcc0.ɵɵtext(5);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(6, "span", 4);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "amplify-base-form-fields", 5);
        ɵngcc0.ɵɵelementStart(9, "button", 6);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(11, "button", 7);
        ɵngcc0.ɵɵlistener("click", function ConfirmSignUpComponent_Template_button_click_11_listener() { return ctx.authenticator.resendCode(); });
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵtemplate(13, ConfirmSignUpComponent_amplify_error_13_Template, 2, 1, "amplify-error", 8);
        ɵngcc0.ɵɵelement(14, "amplify-slot", 9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainerEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.context.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.confirmSignUpHeading, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.subtitleText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.confirmText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.resendCodeText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.context.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent]; }, encapsulation: 2 });
ConfirmSignUpComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
ConfirmSignUpComponent.propDecorators = {
    headerText: [{ type: Input }],
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-confirmsignup',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmSignUpComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-confirm-sign-up',
                template: "<ng-container>\n  <form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n    <fieldset\n      class=\"amplify-flex amplify-authenticator__column\"\n      data-amplify-fieldset\n      [disabled]=\"context.isPending\"\n    >\n      <amplify-slot name=\"confirm-sign-up-header\" [context]=\"context\">\n        <h3\n          class=\"amplify-heading amplify-authenticator__heading\"\n          style=\"font-size: 1.5rem\"\n        >\n          {{ confirmSignUpHeading }}\n        </h3>\n      </amplify-slot>\n      <span class=\"amplify-authenticator__subtitle\">\n        {{ subtitleText }}\n      </span>\n      <amplify-base-form-fields\n        route=\"confirmSignUp\"\n      ></amplify-base-form-fields>\n\n      <button\n        amplify-button\n        variation=\"primary\"\n        fullWidth=\"true\"\n        type=\"submit\"\n        [isDisabled]=\"authenticator.isPending\"\n      >\n        {{ confirmText }}\n      </button>\n      <button\n        amplify-button\n        fontWeight=\"normal\"\n        (click)=\"authenticator.resendCode()\"\n      >\n        {{ resendCodeText }}\n      </button>\n    </fieldset>\n\n    <amplify-error *ngIf=\"context.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n    <amplify-slot\n      name=\"confirm-sign-up-footer\"\n      [context]=\"context\"\n    ></amplify-slot>\n  </form>\n</ng-container>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { headerText: [{
            type: Input
        }], dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-confirmsignup']
        }] }); })();

class ConfirmVerifyUserComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = translate('Account recovery requires verified contact information');
        // translated texts
        this.skipText = translate('Skip');
        this.submitText = translate('Submit');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
ConfirmVerifyUserComponent.ɵfac = function ConfirmVerifyUserComponent_Factory(t) { return new (t || ConfirmVerifyUserComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
ConfirmVerifyUserComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ConfirmVerifyUserComponent, selectors: [["amplify-confirm-verify-user"]], hostVars: 1, hostBindings: function ConfirmVerifyUserComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-confirmverifyuser", ctx.dataAttr);
    } }, inputs: { headerText: "headerText" }, decls: 12, vars: 8, consts: [["data-amplify-form", "", 3, "input", "submit"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "confirm-verify-user-header", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], ["route", "confirmVerifyUser"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", 3, "click"], [4, "ngIf"], ["name", "confirm-verify-user-footer", 3, "context"]], template: function ConfirmVerifyUserComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("input", function ConfirmVerifyUserComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); })("submit", function ConfirmVerifyUserComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelement(5, "amplify-base-form-fields", 4);
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ConfirmVerifyUserComponent_Template_button_click_8_listener() { return ctx.authenticator.skipVerification(); });
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ConfirmVerifyUserComponent_amplify_error_10_Template, 2, 1, "amplify-error", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "amplify-slot", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.submitText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.skipText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent]; }, encapsulation: 2 });
ConfirmVerifyUserComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
ConfirmVerifyUserComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-confirmverifyuser',] }],
    headerText: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfirmVerifyUserComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-confirm-verify-user',
                template: "<form data-amplify-form (input)=\"onInput($event)\" (submit)=\"onSubmit($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"confirm-verify-user-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n    <amplify-base-form-fields\n      route=\"confirmVerifyUser\"\n    ></amplify-base-form-fields>\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ submitText }}\n    </button>\n\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.skipVerification()\"\n    >\n      {{ skipText }}\n    </button>\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"confirm-verify-user-footer\" [context]=\"context\">\n  </amplify-slot>\n</form>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-confirmverifyuser']
        }], headerText: [{
            type: Input
        }] }); })();

class FederatedSignInButtonComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.onClick = () => {
            this.authenticator.send({
                type: 'FEDERATED_SIGN_IN',
                data: { provider: this.provider },
            });
        };
    }
}
FederatedSignInButtonComponent.ɵfac = function FederatedSignInButtonComponent_Factory(t) { return new (t || FederatedSignInButtonComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
FederatedSignInButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FederatedSignInButtonComponent, selectors: [["amplify-federated-sign-in-button"]], inputs: { provider: "provider", text: "text" }, ngContentSelectors: _c0, decls: 3, vars: 0, consts: [["amplify-button", "", "fullWidth", "true", "fontWeight", "normal", 1, "amplify-field-group__control", "federated-sign-in-button", 3, "click"], [1, "amplify-flex", "federated-sign-in-button-row"]], template: function FederatedSignInButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function FederatedSignInButtonComponent_Template_button_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd()();
    } }, dependencies: function () { return [ButtonComponent]; }, encapsulation: 2 });
FederatedSignInButtonComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
FederatedSignInButtonComponent.propDecorators = {
    provider: [{ type: Input }],
    text: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FederatedSignInButtonComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-federated-sign-in-button',
                template: "<button\n  amplify-button\n  class=\"amplify-field-group__control federated-sign-in-button\"\n  fullWidth=\"true\"\n  fontWeight=\"normal\"\n  (click)=\"onClick()\"\n>\n  <div class=\"amplify-flex federated-sign-in-button-row\">\n    <ng-content></ng-content>\n  </div>\n</button>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { provider: [{
            type: Input
        }], text: [{
            type: Input
        }] }); })();

class FederatedSignInComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.FederatedProviders = FederatedIdentityProviders;
        this.includeAmazon = false;
        this.includeApple = false;
        this.includeFacebook = false;
        this.includeGoogle = false;
        this.shouldShowFederatedSignIn = false;
    }
    ngOnInit() {
        var _a;
        const { socialProviders } = (_a = this.authenticator.context) === null || _a === void 0 ? void 0 : _a.config;
        this.setFederatedTexts();
        this.includeAmazon = socialProviders === null || socialProviders === void 0 ? void 0 : socialProviders.includes('amazon');
        this.includeApple = socialProviders === null || socialProviders === void 0 ? void 0 : socialProviders.includes('apple');
        this.includeGoogle = socialProviders === null || socialProviders === void 0 ? void 0 : socialProviders.includes('google');
        this.includeFacebook = socialProviders === null || socialProviders === void 0 ? void 0 : socialProviders.includes('facebook');
        this.shouldShowFederatedSignIn =
            this.includeAmazon ||
                this.includeApple ||
                this.includeFacebook ||
                this.includeGoogle;
    }
    setFederatedTexts() {
        const { route } = this.authenticator;
        const federatedText = route === 'signUp' ? 'Up' : 'In';
        this.signInAmazonText = translate(`Sign ${federatedText} with Amazon`);
        this.signInAppleText = translate(`Sign ${federatedText} with Apple`);
        this.signInFacebookText = translate(`Sign ${federatedText} with Facebook`);
        this.signInGoogleText = translate(`Sign ${federatedText} with Google`);
    }
}
FederatedSignInComponent.ɵfac = function FederatedSignInComponent_Factory(t) { return new (t || FederatedSignInComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
FederatedSignInComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FederatedSignInComponent, selectors: [["amplify-federated-sign-in"]], decls: 1, vars: 1, consts: [["class", "amplify-flex federated-sign-in-container", "data-orientation", "horizontal", "data-size", "small", 4, "ngIf"], ["data-orientation", "horizontal", "data-size", "small", 1, "amplify-flex", "federated-sign-in-container"], [3, "text", "provider", 4, "ngIf"], [3, "provider", 4, "ngIf"], ["aria-orientation", "horizontal", "data-size", "small", "data-label", "or", 1, "amplify-divider", "amplify-divider--label", "amplify-divider--small"], [3, "text", "provider"], ["aria-label", "Amazon icon", "viewBox", "0 0 248 268", 1, "amplify-icon", "federated-sign-in-icon"], ["d", "M139.056521,147.024612 C133.548808,156.744524 124.782731,162.726926 115.087401,162.726926 C101.790721,162.726926 93.9937779,152.612964 93.9937779,137.68681 C93.9937779,108.224571 120.447551,102.879017 145.533369,102.879017 L145.533369,110.365976 C145.533369,123.831358 145.876354,135.063787 139.056521,147.024612 M207.206992,162.579655 C209.400505,165.692256 209.887066,169.437725 207.063416,171.770186 C199.996315,177.653081 187.429476,188.590967 180.513926,194.716661 L180.46208,194.621133 C178.176838,196.663031 174.862638,196.810303 172.27828,195.445057 C160.780281,185.9162 158.686473,181.494078 152.405048,172.403055 C133.405233,191.751331 119.909143,197.534719 95.309886,197.534719 C66.1281801,197.534719 43.4791563,179.599451 43.4791563,143.669212 C43.4791563,115.616003 58.6782107,96.5105248 80.4019706,87.1727225 C99.2063636,78.9096034 125.464714,77.4528107 145.533369,75.1641337 L145.533369,70.694248 C145.533369,62.4749122 146.167493,52.7510201 141.297893,45.6541312 C137.110277,39.2856386 129.018206,36.6586354 121.859376,36.6586354 C108.658413,36.6586354 96.9171331,43.4171982 94.0416364,57.4199213 C93.4593582,60.532522 91.1701278,63.5933787 88.003492,63.7406501 L54.4387473,60.1424518 C51.6150972,59.5095829 48.4484614,57.2248862 49.2740201,52.8982915 C56.9712583,12.2553679 93.7983558,0 126.732964,0 C143.587124,0 165.606011,4.47386604 178.902691,17.2148315 C195.760839,32.917146 194.149604,53.8694866 194.149604,76.6726704 L194.149604,130.542157 C194.149604,146.734049 200.87372,153.830938 207.206992,162.579655 Z M233.826346,208.038962 C230.467669,203.683255 211.550709,205.9821 203.056405,206.998432 C200.470662,207.321077 200.076227,205.042397 202.406981,203.404973 C217.475208,192.664928 242.201125,195.766353 245.081698,199.363845 C247.966255,202.981502 244.336653,228.071183 230.172839,240.049379 C228.001452,241.888455 225.929671,240.904388 226.89783,238.468418 C230.077218,230.430525 237.204944,212.418868 233.826346,208.038962 Z M126.768855,264 C74.0234043,264 42.0764048,241.955028 17.7852554,217.541992 C12.9733903,212.705982 6.71799208,206.295994 3.31151296,200.690918 C1.90227474,198.372135 5.59096074,195.021875 8.0442063,196.84375 C38.2390146,219.267578 82.1011654,239.538304 125.529506,239.538304 C154.819967,239.538304 191.046475,227.469543 220.66851,214.867659 C225.146771,212.966167 225.146771,219.180222 224.511585,221.060516 C224.183264,222.03242 209.514625,236.221149 189.247207,247.047411 C170.304273,257.166172 146.397132,264 126.768855,264 Z", "fill", "#FF9900"], [1, "amplify-text", "amplify-authenticator__federated-text"], [3, "provider"], ["aria-label", "Apple icon", "fill", "#000", "preserveAspectRatio", "xMidYMid", "stroke", "#000", "strokeWidth", "0", "viewBox", "0 0 1024 1024", "xmlns", "http://www.w3.org/2000/svg", 1, "amplify-icon", "federated-sign-in-icon"], ["d", "M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-105.1-305c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z"], ["aria-label", "Facebook icon", "viewBox", "0 0 279 538", 1, "amplify-icon", "federated-sign-in-icon"], ["d", "M82.3409742,538 L82.3409742,292.936652 L0,292.936652 L0,196.990154 L82.2410458,196.990154 L82.2410458,126.4295 C82.2410458,44.575144 132.205229,0 205.252865,0 C240.227794,0 270.306232,2.59855099 279,3.79788222 L279,89.2502322 L228.536175,89.2502322 C188.964542,89.2502322 181.270057,108.139699 181.270057,135.824262 L181.270057,196.89021 L276.202006,196.89021 L263.810888,292.836708 L181.16913,292.836708 L181.16913,538 L82.3409742,538 Z", "fill", "#1877F2"], ["aria-label", "Google icon", "viewBox", "0 0 256 262", "xmlns", "http://www.w3.org/2000/svg", "preserveAspectRatio", "xMidYMid", 1, "amplify-icon", "federated-sign-in-icon"], ["d", "M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027", "fill", "#4285F4"], ["d", "M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1", "fill", "#34A853"], ["d", "M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782", "fill", "#FBBC05"], ["d", "M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251", "fill", "#EB4335"]], template: function FederatedSignInComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, FederatedSignInComponent_div_0_Template, 6, 4, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.shouldShowFederatedSignIn);
    } }, dependencies: [ɵngcc1.NgIf, FederatedSignInButtonComponent], encapsulation: 2 });
FederatedSignInComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FederatedSignInComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-federated-sign-in',
                template: "<div\n  class=\"amplify-flex federated-sign-in-container\"\n  *ngIf=\"shouldShowFederatedSignIn\"\n  data-orientation=\"horizontal\"\n  data-size=\"small\"\n>\n  <amplify-federated-sign-in-button\n    *ngIf=\"includeAmazon\"\n    [text]=\"signInAmazonText\"\n    [provider]=\"FederatedProviders.Amazon\"\n  >\n    <svg\n      aria-label=\"Amazon icon\"\n      class=\"amplify-icon federated-sign-in-icon\"\n      viewBox=\"0 0 248 268\"\n    >\n      <path\n        d=\"M139.056521,147.024612 C133.548808,156.744524 124.782731,162.726926 115.087401,162.726926 C101.790721,162.726926 93.9937779,152.612964 93.9937779,137.68681 C93.9937779,108.224571 120.447551,102.879017 145.533369,102.879017 L145.533369,110.365976 C145.533369,123.831358 145.876354,135.063787 139.056521,147.024612 M207.206992,162.579655 C209.400505,165.692256 209.887066,169.437725 207.063416,171.770186 C199.996315,177.653081 187.429476,188.590967 180.513926,194.716661 L180.46208,194.621133 C178.176838,196.663031 174.862638,196.810303 172.27828,195.445057 C160.780281,185.9162 158.686473,181.494078 152.405048,172.403055 C133.405233,191.751331 119.909143,197.534719 95.309886,197.534719 C66.1281801,197.534719 43.4791563,179.599451 43.4791563,143.669212 C43.4791563,115.616003 58.6782107,96.5105248 80.4019706,87.1727225 C99.2063636,78.9096034 125.464714,77.4528107 145.533369,75.1641337 L145.533369,70.694248 C145.533369,62.4749122 146.167493,52.7510201 141.297893,45.6541312 C137.110277,39.2856386 129.018206,36.6586354 121.859376,36.6586354 C108.658413,36.6586354 96.9171331,43.4171982 94.0416364,57.4199213 C93.4593582,60.532522 91.1701278,63.5933787 88.003492,63.7406501 L54.4387473,60.1424518 C51.6150972,59.5095829 48.4484614,57.2248862 49.2740201,52.8982915 C56.9712583,12.2553679 93.7983558,0 126.732964,0 C143.587124,0 165.606011,4.47386604 178.902691,17.2148315 C195.760839,32.917146 194.149604,53.8694866 194.149604,76.6726704 L194.149604,130.542157 C194.149604,146.734049 200.87372,153.830938 207.206992,162.579655 Z M233.826346,208.038962 C230.467669,203.683255 211.550709,205.9821 203.056405,206.998432 C200.470662,207.321077 200.076227,205.042397 202.406981,203.404973 C217.475208,192.664928 242.201125,195.766353 245.081698,199.363845 C247.966255,202.981502 244.336653,228.071183 230.172839,240.049379 C228.001452,241.888455 225.929671,240.904388 226.89783,238.468418 C230.077218,230.430525 237.204944,212.418868 233.826346,208.038962 Z M126.768855,264 C74.0234043,264 42.0764048,241.955028 17.7852554,217.541992 C12.9733903,212.705982 6.71799208,206.295994 3.31151296,200.690918 C1.90227474,198.372135 5.59096074,195.021875 8.0442063,196.84375 C38.2390146,219.267578 82.1011654,239.538304 125.529506,239.538304 C154.819967,239.538304 191.046475,227.469543 220.66851,214.867659 C225.146771,212.966167 225.146771,219.180222 224.511585,221.060516 C224.183264,222.03242 209.514625,236.221149 189.247207,247.047411 C170.304273,257.166172 146.397132,264 126.768855,264 Z\"\n        fill=\"#FF9900\"\n      ></path>\n    </svg>\n\n    <p class=\"amplify-text amplify-authenticator__federated-text\">\n      {{ signInAmazonText }}\n    </p>\n  </amplify-federated-sign-in-button>\n\n  <amplify-federated-sign-in-button\n    *ngIf=\"includeApple\"\n    [provider]=\"FederatedProviders.Apple\"\n  >\n    <svg\n      aria-label=\"Apple icon\"\n      class=\"amplify-icon federated-sign-in-icon\"\n      fill=\"#000\"\n      preserveAspectRatio=\"xMidYMid\"\n      stroke=\"#000\"\n      strokeWidth=\"0\"\n      viewBox=\"0 0 1024 1024\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-105.1-305c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z\"\n      ></path>\n    </svg>\n    <p class=\"amplify-text amplify-authenticator__federated-text\">\n      {{ signInAppleText }}\n    </p>\n  </amplify-federated-sign-in-button>\n\n  <amplify-federated-sign-in-button\n    *ngIf=\"includeFacebook\"\n    [text]=\"signInFacebookText\"\n    [provider]=\"FederatedProviders.Facebook\"\n  >\n    <svg\n      aria-label=\"Facebook icon\"\n      class=\"amplify-icon federated-sign-in-icon\"\n      viewBox=\"0 0 279 538\"\n    >\n      <path\n        d=\"M82.3409742,538 L82.3409742,292.936652 L0,292.936652 L0,196.990154 L82.2410458,196.990154 L82.2410458,126.4295 C82.2410458,44.575144 132.205229,0 205.252865,0 C240.227794,0 270.306232,2.59855099 279,3.79788222 L279,89.2502322 L228.536175,89.2502322 C188.964542,89.2502322 181.270057,108.139699 181.270057,135.824262 L181.270057,196.89021 L276.202006,196.89021 L263.810888,292.836708 L181.16913,292.836708 L181.16913,538 L82.3409742,538 Z\"\n        fill=\"#1877F2\"\n      ></path>\n    </svg>\n    <p class=\"amplify-text amplify-authenticator__federated-text\">\n      {{ signInFacebookText }}\n    </p>\n  </amplify-federated-sign-in-button>\n\n  <amplify-federated-sign-in-button\n    *ngIf=\"includeGoogle\"\n    [provider]=\"FederatedProviders.Google\"\n  >\n    <svg\n      aria-label=\"Google icon\"\n      class=\"amplify-icon federated-sign-in-icon\"\n      viewBox=\"0 0 256 262\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      preserveAspectRatio=\"xMidYMid\"\n    >\n      <path\n        d=\"M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027\"\n        fill=\"#4285F4\"\n      ></path>\n      <path\n        d=\"M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1\"\n        fill=\"#34A853\"\n      ></path>\n      <path\n        d=\"M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782\"\n        fill=\"#FBBC05\"\n      ></path>\n      <path\n        d=\"M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251\"\n        fill=\"#EB4335\"\n      ></path>\n    </svg>\n    <p class=\"amplify-text amplify-authenticator__federated-text\">\n      {{ signInGoogleText }}\n    </p>\n  </amplify-federated-sign-in-button>\n\n  <hr\n    class=\"amplify-divider amplify-divider--label amplify-divider--small\"\n    aria-orientation=\"horizontal\"\n    data-size=\"small\"\n    data-label=\"or\"\n  />\n</div>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, null); })();

class ForceNewPasswordComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = translate('Change Password');
        // translated texts
        this.changePasswordText = translate('Change Password');
        this.backToSignInText = translate('Back to Sign In');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
ForceNewPasswordComponent.ɵfac = function ForceNewPasswordComponent_Factory(t) { return new (t || ForceNewPasswordComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
ForceNewPasswordComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ForceNewPasswordComponent, selectors: [["amplify-force-new-password"]], hostVars: 1, hostBindings: function ForceNewPasswordComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-forcenewpassword", ctx.dataAttr);
    } }, inputs: { headerText: "headerText" }, decls: 13, vars: 8, consts: [["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "force-new-password-header", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], ["name", "force-new-form-fields", 3, "context"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", 3, "click"], [4, "ngIf"], ["name", "force-new-password-footer", 3, "context"]], template: function ForceNewPasswordComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function ForceNewPasswordComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); })("input", function ForceNewPasswordComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(5, "amplify-slot", 4);
        ɵngcc0.ɵɵelement(6, "amplify-force-new-password-form-fields");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "button", 5);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ForceNewPasswordComponent_Template_button_click_9_listener() { return ctx.authenticator.toSignIn(); });
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, ForceNewPasswordComponent_amplify_error_11_Template, 2, 1, "amplify-error", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "amplify-slot", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.changePasswordText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.backToSignInText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, ButtonComponent, ErrorComponent, ForceNewPasswordFormFieldsComponent]; }, encapsulation: 2 });
ForceNewPasswordComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
ForceNewPasswordComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-forcenewpassword',] }],
    headerText: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ForceNewPasswordComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-force-new-password',
                template: "<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"force-new-password-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n\n    <amplify-slot name=\"force-new-form-fields\" [context]=\"context\">\n      <amplify-force-new-password-form-fields></amplify-force-new-password-form-fields>\n    </amplify-slot>\n\n    <button amplify-button variation=\"primary\" fullWidth=\"true\" type=\"submit\">\n      {{ changePasswordText }}\n    </button>\n\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.toSignIn()\"\n    >\n      {{ backToSignInText }}\n    </button>\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"force-new-password-footer\" [context]=\"context\">\n  </amplify-slot>\n</form>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-forcenewpassword']
        }], headerText: [{
            type: Input
        }] }); })();

class ForceNewPasswordFormFieldsComponent {
}
ForceNewPasswordFormFieldsComponent.ɵfac = function ForceNewPasswordFormFieldsComponent_Factory(t) { return new (t || ForceNewPasswordFormFieldsComponent)(); };
ForceNewPasswordFormFieldsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ForceNewPasswordFormFieldsComponent, selectors: [["amplify-force-new-password-form-fields"]], decls: 2, vars: 0, consts: [["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column"], ["route", "forceNewPassword"]], template: function ForceNewPasswordFormFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "amplify-base-form-fields", 1);
        ɵngcc0.ɵɵelementEnd();
    } }, dependencies: function () { return [BaseFormFieldsComponent]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ForceNewPasswordFormFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-force-new-password-form-fields',
                template: "<div class=\"amplify-flex amplify-authenticator__column\" data-amplify-fieldset>\n  <amplify-base-form-fields route=\"forceNewPassword\"></amplify-base-form-fields>\n</div>\n"
            }]
    }], null, null); })();

class FormFieldComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.countryDialCodesValue = countryDialCodes;
        this.errorId = nanoid(12);
    }
    get errors() {
        const { validationErrors } = this.authenticator;
        return getErrors(validationErrors[this.name]);
    }
    onBlur($event) {
        let { name } = $event.target;
        this.authenticator.updateBlur({ name });
    }
    isPasswordField() {
        return this.formField.type === 'password';
    }
    isPhoneField() {
        return this.formField.type === 'tel';
    }
    hasError() {
        var _a;
        return ((_a = this.errors) === null || _a === void 0 ? void 0 : _a.length) > 0;
    }
    get ariaDescribedBy() {
        return this.hasError() ? this.errorId : undefined;
    }
    translate(phrase) {
        return translate(phrase);
    }
}
FormFieldComponent.ɵfac = function FormFieldComponent_Factory(t) { return new (t || FormFieldComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
FormFieldComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FormFieldComponent, selectors: [["amplify-form-field"]], inputs: { name: "name", formField: "formField" }, decls: 5, vars: 4, consts: [[1, "amplify-flex", "amplify-field", "amplify-authenticator__column"], ["type", "tel", 3, "name", "label", "defaultCountryCode", "dialCodeList", "placeholder", "required", "labelHidden", "autocomplete", "hasError", "describedBy", 4, "ngIf"], [3, "name", "label", "placeholder", "required", "labelHidden", "autocomplete", "hasError", "describedBy", "setBlur", 4, "ngIf"], [3, "name", "label", "placeholder", "required", "labelHidden", "autocomplete", "type", "hasError", "describedBy", 4, "ngIf"], ["data-amplify-sign-up-errors", "", 3, "id", 4, "ngIf"], ["type", "tel", 3, "name", "label", "defaultCountryCode", "dialCodeList", "placeholder", "required", "labelHidden", "autocomplete", "hasError", "describedBy"], [3, "name", "label", "placeholder", "required", "labelHidden", "autocomplete", "hasError", "describedBy", "setBlur"], [3, "name", "label", "placeholder", "required", "labelHidden", "autocomplete", "type", "hasError", "describedBy"], ["data-amplify-sign-up-errors", "", 3, "id"], ["class", "amplify-text amplify-text--error", "data-variation", "error", 4, "ngFor", "ngForOf"], ["data-variation", "error", 1, "amplify-text", "amplify-text--error"]], template: function FormFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, FormFieldComponent_amplify_phone_number_field_1_Template, 1, 10, "amplify-phone-number-field", 1);
        ɵngcc0.ɵɵtemplate(2, FormFieldComponent_amplify_password_field_2_Template, 1, 8, "amplify-password-field", 2);
        ɵngcc0.ɵɵtemplate(3, FormFieldComponent_amplify_text_field_3_Template, 1, 9, "amplify-text-field", 3);
        ɵngcc0.ɵɵtemplate(4, FormFieldComponent_div_4_Template, 2, 2, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isPhoneField());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isPasswordField());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isPasswordField() && !ctx.isPhoneField());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasError());
    } }, dependencies: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgIf, PasswordFieldComponent, PhoneNumberFieldComponent, TextFieldComponent]; }, encapsulation: 2 });
FormFieldComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
FormFieldComponent.propDecorators = {
    name: [{ type: Input }],
    formField: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FormFieldComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-form-field',
                template: "<div class=\"amplify-flex amplify-field amplify-authenticator__column\">\n  <!-- Country code field -->\n  <amplify-phone-number-field\n    *ngIf=\"isPhoneField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [defaultCountryCode]=\"formField.dialCode\"\n    [dialCodeList]=\"formField.dialCodeList\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n    type=\"tel\"\n  ></amplify-phone-number-field>\n\n  <amplify-password-field\n    *ngIf=\"isPasswordField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n    (setBlur)=\"onBlur($event)\"\n  ></amplify-password-field>\n\n  <amplify-text-field\n    *ngIf=\"!isPasswordField() && !isPhoneField()\"\n    [name]=\"name\"\n    [label]=\"formField.label\"\n    [placeholder]=\"formField.placeholder\"\n    [required]=\"formField.isRequired\"\n    [labelHidden]=\"formField.labelHidden\"\n    [autocomplete]=\"formField.autocomplete\"\n    [type]=\"formField.type\"\n    [hasError]=\"hasError\"\n    [describedBy]=\"ariaDescribedBy\"\n  ></amplify-text-field>\n\n  <div data-amplify-sign-up-errors *ngIf=\"hasError()\" [id]=\"errorId\">\n    <div\n      class=\"amplify-text amplify-text--error\"\n      data-variation=\"error\"\n      *ngFor=\"let error of errors\"\n    >\n      {{ translate(error) }}\n    </div>\n  </div>\n</div>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { name: [{
            type: Input
        }], formField: [{
            type: Input
        }] }); })();

class ResetPasswordComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = translate('Reset your password');
        // translated texts
        this.sendCodeText = translate('Send Code');
        this.backToSignInText = translate('Back to Sign In');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) { return new (t || ResetPasswordComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
ResetPasswordComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ResetPasswordComponent, selectors: [["amplify-reset-password"]], hostVars: 1, hostBindings: function ResetPasswordComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-resetPassword", ctx.dataAttr);
    } }, inputs: { headerText: "headerText" }, decls: 12, vars: 8, consts: [["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "reset-password-header", 1, "amplify-flex", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], ["route", "resetPassword"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", 3, "click"], [4, "ngIf"], ["name", "reset-password-footer", 3, "context"]], template: function ResetPasswordComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function ResetPasswordComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); })("input", function ResetPasswordComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelement(5, "amplify-base-form-fields", 4);
        ɵngcc0.ɵɵelementStart(6, "button", 5);
        ɵngcc0.ɵɵtext(7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "button", 6);
        ɵngcc0.ɵɵlistener("click", function ResetPasswordComponent_Template_button_click_8_listener() { return ctx.authenticator.toSignIn(); });
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(10, ResetPasswordComponent_amplify_error_10_Template, 2, 1, "amplify-error", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(11, "amplify-slot", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.sendCodeText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.backToSignInText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent]; }, encapsulation: 2 });
ResetPasswordComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
ResetPasswordComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-resetPassword',] }],
    headerText: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResetPasswordComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-reset-password',
                template: "<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot\n      class=\"amplify-flex\"\n      name=\"reset-password-header\"\n      [context]=\"context\"\n    >\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n\n    <amplify-base-form-fields route=\"resetPassword\"></amplify-base-form-fields>\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ sendCodeText }}\n    </button>\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.toSignIn()\"\n    >\n      {{ backToSignInText }}\n    </button>\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n\n  <amplify-slot name=\"reset-password-footer\" [context]=\"context\">\n  </amplify-slot>\n</form>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-resetPassword']
        }], headerText: [{
            type: Input
        }] }); })();

const logger = new Logger$1('SetupTotp');
class SetupTotpComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = translate('Setup TOTP');
        this.qrCodeSource = '';
        this.secretKey = '';
        this.copyTextLabel = translate('COPY');
        // translated texts
        this.backToSignInText = translate('Back to Sign In');
        this.confirmText = translate('Confirm');
    }
    ngOnInit() {
        this.generateQRCode();
    }
    get context() {
        return this.authenticator.slotContext;
    }
    generateQRCode() {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: This should be handled in core.
            const state = this.authenticator.authState;
            const actorContext = getActorContext(state);
            const { user } = actorContext;
            try {
                this.secretKey = yield Auth.setupTOTP(user);
                const issuer = (_c = (_b = (_a = this.formOverrides) === null || _a === void 0 ? void 0 : _a['QR']) === null || _b === void 0 ? void 0 : _b.totpIssuer) !== null && _c !== void 0 ? _c : 'AWSCognito';
                const username = (_f = (_e = (_d = this.formOverrides) === null || _d === void 0 ? void 0 : _d['QR']) === null || _e === void 0 ? void 0 : _e.totpUsername) !== null && _f !== void 0 ? _f : user.username;
                const totpCode = encodeURI(`otpauth://totp/${issuer}:${username}?secret=${this.secretKey}&issuer=${issuer}`);
                logger.info('totp code was generated:', totpCode);
                this.qrCodeSource = yield QRCode.toDataURL(totpCode);
            }
            catch (err) {
                logger.error(err);
            }
        });
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
    copyText() {
        navigator.clipboard.writeText(this.secretKey);
        this.copyTextLabel = translate('COPIED');
    }
}
SetupTotpComponent.ɵfac = function SetupTotpComponent_Factory(t) { return new (t || SetupTotpComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
SetupTotpComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SetupTotpComponent, selectors: [["amplify-setup-totp"]], hostVars: 1, hostBindings: function SetupTotpComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-setup-totp", ctx.dataAttr);
    } }, decls: 22, vars: 12, consts: [["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "setup-totp-header", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], [4, "ngIf"], ["alt", "qr code", "data-amplify-qrcode", "", "width", "228", "height", "228", 3, "src", 4, "ngIf"], ["data-amplify-copy", "", 1, "amplify-flex"], ["data-amplify-copy-svg", "", 3, "click"], ["data-amplify-copy-tooltip", ""], ["width", "24", "height", "24", "viewBox", "0 0 24 24", "xmlns", "http://www.w3.org/2000/svg"], ["d", "M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5H8C6.9 5 6.01 5.9 6.01 7L6 21C6 22.1 6.89 23 7.99 23H19C20.1 23 21 22.1 21 21V11L15 5ZM8 21V7H14V12H19V21H8Z"], ["route", "setupTOTP"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", 3, "click"], ["name", "setup-totp-footer", 3, "context"], ["alt", "qr code", "data-amplify-qrcode", "", "width", "228", "height", "228", 3, "src"]], template: function SetupTotpComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("submit", function SetupTotpComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); })("input", function SetupTotpComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵtemplate(5, SetupTotpComponent_p_5_Template, 2, 0, "p", 4);
        ɵngcc0.ɵɵtemplate(6, SetupTotpComponent_img_6_Template, 1, 1, "img", 5);
        ɵngcc0.ɵɵelementStart(7, "div", 6)(8, "div");
        ɵngcc0.ɵɵtext(9);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(10, "div", 7);
        ɵngcc0.ɵɵlistener("click", function SetupTotpComponent_Template_div_click_10_listener() { return ctx.copyText(); });
        ɵngcc0.ɵɵelementStart(11, "div", 8);
        ɵngcc0.ɵɵtext(12);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(13, "svg", 9);
        ɵngcc0.ɵɵelement(14, "path", 10);
        ɵngcc0.ɵɵelementEnd()()();
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelement(15, "amplify-base-form-fields", 11);
        ɵngcc0.ɵɵelementStart(16, "button", 12);
        ɵngcc0.ɵɵtext(17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(18, "button", 13);
        ɵngcc0.ɵɵlistener("click", function SetupTotpComponent_Template_button_click_18_listener() { return ctx.authenticator.toSignIn(); });
        ɵngcc0.ɵɵtext(19);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(20, SetupTotpComponent_amplify_error_20_Template, 2, 1, "amplify-error", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(21, "amplify-slot", 14);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.qrCodeSource);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.qrCodeSource);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.secretKey);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.copyTextLabel);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.confirmText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.backToSignInText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent]; }, encapsulation: 2 });
SetupTotpComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
SetupTotpComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-setup-totp',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SetupTotpComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-setup-totp',
                template: "<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"setup-totp-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n    <p *ngIf=\"!qrCodeSource\">Loading...</p>\n    <img\n      *ngIf=\"qrCodeSource\"\n      [src]=\"qrCodeSource\"\n      alt=\"qr code\"\n      data-amplify-qrcode\n      width=\"228\"\n      height=\"228\"\n    />\n    <div class=\"amplify-flex\" data-amplify-copy>\n      <div>{{ secretKey }}</div>\n      <div data-amplify-copy-svg (click)=\"copyText()\">\n        <div data-amplify-copy-tooltip>{{ copyTextLabel }}</div>\n        <svg\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5H8C6.9 5 6.01 5.9 6.01 7L6 21C6 22.1 6.89 23 7.99 23H19C20.1 23 21 22.1 21 21V11L15 5ZM8 21V7H14V12H19V21H8Z\"\n          />\n        </svg>\n      </div>\n    </div>\n\n    <amplify-base-form-fields route=\"setupTOTP\"></amplify-base-form-fields>\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ confirmText }}\n    </button>\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.toSignIn()\"\n    >\n      {{ backToSignInText }}\n    </button>\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"setup-totp-footer\" [context]=\"context\"> </amplify-slot>\n</form>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-setup-totp']
        }] }); })();

class SignInComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        // translated phrases
        // Support backwards compatibility for legacy key with trailing space
        this.forgotPasswordText = !hasTranslation('Forgot your password? ')
            ? translate('Forgot your password?')
            : translate('Forgot your password? ');
        this.signInButtonText = translate('Sign in');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
SignInComponent.ɵfac = function SignInComponent_Factory(t) { return new (t || SignInComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
SignInComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SignInComponent, selectors: [["amplify-sign-in"]], hostVars: 1, hostBindings: function SignInComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-signin", ctx.dataAttr);
    } }, decls: 14, vars: 7, consts: [["name", "sign-in-header", 3, "context"], ["data-amplify-form", "", 3, "submit", "input"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 2, "flex-direction", "column", 3, "disabled"], [1, "amplify-visually-hidden"], ["route", "signIn"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], [4, "ngIf"], ["name", "sign-in-footer", 3, "context"], ["data-amplify-footer", ""], ["amplify-button", "", "fontWeight", "normal", "size", "small", "variation", "link", "fullWidth", "true", 3, "click"]], template: function SignInComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "amplify-slot", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function SignInComponent_Template_form_submit_1_listener($event) { return ctx.onSubmit($event); })("input", function SignInComponent_Template_form_input_1_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelement(2, "amplify-federated-sign-in");
        ɵngcc0.ɵɵelementStart(3, "fieldset", 2)(4, "legend", 3);
        ɵngcc0.ɵɵtext(5, "Sign in");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "amplify-base-form-fields", 4);
        ɵngcc0.ɵɵelementStart(7, "button", 5);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, SignInComponent_amplify_error_9_Template, 2, 1, "amplify-error", 6);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(10, "amplify-slot", 7)(11, "div", 8)(12, "button", 9);
        ɵngcc0.ɵɵlistener("click", function SignInComponent_Template_button_click_12_listener() { return ctx.authenticator.toResetPassword(); });
        ɵngcc0.ɵɵtext(13);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.signInButtonText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.forgotPasswordText, " ");
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, BaseFormFieldsComponent, ButtonComponent, ErrorComponent, FederatedSignInComponent]; }, encapsulation: 2 });
SignInComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
SignInComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-signin',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SignInComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-sign-in',
                template: "<amplify-slot name=\"sign-in-header\" [context]=\"context\"></amplify-slot>\n\n<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <amplify-federated-sign-in></amplify-federated-sign-in>\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    style=\"flex-direction: column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <legend class=\"amplify-visually-hidden\">Sign in</legend>\n    <amplify-base-form-fields route=\"signIn\"></amplify-base-form-fields>\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ signInButtonText }}\n    </button>\n\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n</form>\n\n<amplify-slot name=\"sign-in-footer\" [context]=\"context\">\n  <div data-amplify-footer>\n    <button\n      amplify-button\n      fontWeight=\"normal\"\n      size=\"small\"\n      variation=\"link\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.toResetPassword()\"\n    >\n      {{ forgotPasswordText }}\n    </button>\n  </div>\n</amplify-slot>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-signin']
        }] }); })();

class SignUpComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        // translated texts
        this.createAccountText = translate('Create Account');
    }
    get context() {
        return this.authenticator.slotContext;
    }
    onInput(event) {
        let { checked, name, type, value } = event.target;
        if (type === 'checkbox' && !checked)
            value = undefined;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
SignUpComponent.ɵfac = function SignUpComponent_Factory(t) { return new (t || SignUpComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
SignUpComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SignUpComponent, selectors: [["amplify-sign-up"]], hostVars: 1, hostBindings: function SignUpComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-signup", ctx.dataAttr);
    } }, decls: 12, vars: 7, consts: [["name", "sign-up-header", 3, "context"], ["data-amplify-form", "", 3, "submit", "input"], [1, "amplify-flex", "amplify-authenticator__column"], ["name", "sign-up-form-fields", 3, "context"], [4, "ngIf"], ["name", "sign-up-button", 3, "context"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["name", "sign-up-footer", 3, "context"]], template: function SignUpComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "amplify-slot", 0);
        ɵngcc0.ɵɵelementStart(1, "form", 1);
        ɵngcc0.ɵɵlistener("submit", function SignUpComponent_Template_form_submit_1_listener($event) { return ctx.onSubmit($event); })("input", function SignUpComponent_Template_form_input_1_listener($event) { return ctx.onInput($event); });
        ɵngcc0.ɵɵelement(2, "amplify-federated-sign-in");
        ɵngcc0.ɵɵelementStart(3, "div", 2)(4, "div", 2)(5, "amplify-slot", 3);
        ɵngcc0.ɵɵelement(6, "amplify-sign-up-form-fields");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, SignUpComponent_amplify_error_7_Template, 2, 1, "amplify-error", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "amplify-slot", 5)(9, "button", 6);
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd()()()();
        ɵngcc0.ɵɵelement(11, "amplify-slot", 7);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending || ctx.authenticator.hasValidationErrors);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.createAccountText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgIf, AmplifySlotComponent, ButtonComponent, ErrorComponent, FederatedSignInComponent, SignUpFormFieldsComponent]; }, encapsulation: 2 });
SignUpComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
SignUpComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-signup',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SignUpComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-sign-up',
                template: "<amplify-slot name=\"sign-up-header\" [context]=\"context\"></amplify-slot>\n\n<form data-amplify-form (submit)=\"onSubmit($event)\" (input)=\"onInput($event)\">\n  <amplify-federated-sign-in></amplify-federated-sign-in>\n  <div class=\"amplify-flex amplify-authenticator__column\">\n    <div class=\"amplify-flex amplify-authenticator__column\">\n      <amplify-slot name=\"sign-up-form-fields\" [context]=\"context\">\n        <amplify-sign-up-form-fields></amplify-sign-up-form-fields>\n      </amplify-slot>\n\n      <amplify-error *ngIf=\"authenticator.error\">\n        {{ authenticator.error }}\n      </amplify-error>\n    </div>\n\n    <amplify-slot name=\"sign-up-button\" [context]=\"context\">\n      <button\n        [isDisabled]=\"\n          authenticator.isPending || authenticator.hasValidationErrors\n        \"\n        amplify-button\n        variation=\"primary\"\n        fullWidth=\"true\"\n        type=\"submit\"\n      >\n        {{ createAccountText }}\n      </button>\n    </amplify-slot>\n  </div>\n</form>\n\n<amplify-slot name=\"sign-up-footer\" [context]=\"context\"> </amplify-slot>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-signup']
        }] }); })();

class SignUpFormFieldsComponent {
}
SignUpFormFieldsComponent.ɵfac = function SignUpFormFieldsComponent_Factory(t) { return new (t || SignUpFormFieldsComponent)(); };
SignUpFormFieldsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SignUpFormFieldsComponent, selectors: [["amplify-sign-up-form-fields"]], decls: 2, vars: 0, consts: [["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column"], ["route", "signUp"]], template: function SignUpFormFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "amplify-base-form-fields", 1);
        ɵngcc0.ɵɵelementEnd();
    } }, dependencies: function () { return [BaseFormFieldsComponent]; }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SignUpFormFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-sign-up-form-fields',
                template: "<div class=\"amplify-flex amplify-authenticator__column\" data-amplify-fieldset>\n  <amplify-base-form-fields route=\"signUp\"></amplify-base-form-fields>\n</div>\n"
            }]
    }], null, null); })();

const getAttributeMap = () => defaultFormFieldOptions;

class VerifyUserComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.dataAttr = '';
        this.headerText = translate('Account recovery requires verified contact information');
        this.unverifiedAttributes = {};
        this.labelId = nanoid(12);
        // translated texts
        this.skipText = translate('Skip');
        this.verifyText = translate('Verify');
    }
    ngOnInit() {
        const actorState = getActorState(this.authenticator.authState);
        this.unverifiedAttributes = actorState.context.unverifiedAttributes;
    }
    get context() {
        return this.authenticator.slotContext;
    }
    getLabelForAttr(authAttr) {
        var _a;
        const attributeMap = getAttributeMap();
        const label = (_a = attributeMap[authAttr]) === null || _a === void 0 ? void 0 : _a.label;
        return translate(label);
    }
    onInput(event) {
        event.preventDefault();
        const { name, value } = event.target;
        this.authenticator.updateForm({ name, value });
    }
    onSubmit(event) {
        event.preventDefault();
        this.authenticator.submitForm(getFormDataFromEvent(event));
    }
}
VerifyUserComponent.ɵfac = function VerifyUserComponent_Factory(t) { return new (t || VerifyUserComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
VerifyUserComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: VerifyUserComponent, selectors: [["amplify-verify-user"]], hostVars: 1, hostBindings: function VerifyUserComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("data-amplify-authenticator-verifyuser", ctx.dataAttr);
    } }, inputs: { headerText: "headerText" }, decls: 13, vars: 11, consts: [["data-amplify-form", "", 3, "input", "submit"], ["data-amplify-fieldset", "", 1, "amplify-flex", "amplify-authenticator__column", 3, "disabled"], ["name", "verify-user-header", 3, "context"], [1, "amplify-heading", "amplify-heading--3"], [4, "ngFor", "ngForOf"], ["amplify-button", "", "variation", "primary", "fullWidth", "true", "type", "submit", 3, "isDisabled"], ["amplify-button", "", "size", "small", "variation", "link", "fontWeight", "normal", "fullWidth", "true", 3, "click"], [4, "ngIf"], ["name", "verify-user-footer", 3, "context"], ["name", "unverifiedAttr", "type", "radio", 3, "value", "id"], [3, "for"]], template: function VerifyUserComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "form", 0);
        ɵngcc0.ɵɵlistener("input", function VerifyUserComponent_Template_form_input_0_listener($event) { return ctx.onInput($event); })("submit", function VerifyUserComponent_Template_form_submit_0_listener($event) { return ctx.onSubmit($event); });
        ɵngcc0.ɵɵelementStart(1, "fieldset", 1)(2, "amplify-slot", 2)(3, "h3", 3);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵtemplate(5, VerifyUserComponent_div_5_Template, 4, 4, "div", 4);
        ɵngcc0.ɵɵpipe(6, "keyvalue");
        ɵngcc0.ɵɵelementStart(7, "button", 5);
        ɵngcc0.ɵɵtext(8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(9, "button", 6);
        ɵngcc0.ɵɵlistener("click", function VerifyUserComponent_Template_button_click_9_listener() { return ctx.authenticator.skipVerification(); });
        ɵngcc0.ɵɵtext(10);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(11, VerifyUserComponent_amplify_error_11_Template, 2, 1, "amplify-error", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(12, "amplify-slot", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.headerText);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(6, 9, ctx.unverifiedAttributes));
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("isDisabled", ctx.authenticator.isPending);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.verifyText, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.skipText, " ");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.authenticator.error);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("context", ctx.context);
    } }, dependencies: function () { return [ɵngcc1.NgForOf, ɵngcc1.NgIf, AmplifySlotComponent, ButtonComponent, ErrorComponent, ɵngcc1.KeyValuePipe]; }, encapsulation: 2 });
VerifyUserComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
VerifyUserComponent.propDecorators = {
    dataAttr: [{ type: HostBinding, args: ['attr.data-amplify-authenticator-verifyuser',] }],
    headerText: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(VerifyUserComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-verify-user',
                template: "<form data-amplify-form (input)=\"onInput($event)\" (submit)=\"onSubmit($event)\">\n  <fieldset\n    class=\"amplify-flex amplify-authenticator__column\"\n    data-amplify-fieldset\n    [disabled]=\"authenticator.isPending\"\n  >\n    <amplify-slot name=\"verify-user-header\" [context]=\"context\">\n      <h3 class=\"amplify-heading amplify-heading--3\">{{ this.headerText }}</h3>\n    </amplify-slot>\n\n    <div *ngFor=\"let unverifiedAttribute of unverifiedAttributes | keyvalue\">\n      <input\n        name=\"unverifiedAttr\"\n        type=\"radio\"\n        [value]=\"unverifiedAttribute.key\"\n        [id]=\"labelId\"\n      />\n      <label [for]=\"labelId\">{{\n        getLabelForAttr(unverifiedAttribute.key)\n      }}</label>\n    </div>\n\n    <button\n      amplify-button\n      variation=\"primary\"\n      fullWidth=\"true\"\n      type=\"submit\"\n      [isDisabled]=\"authenticator.isPending\"\n    >\n      {{ verifyText }}\n    </button>\n\n    <button\n      amplify-button\n      size=\"small\"\n      variation=\"link\"\n      fontWeight=\"normal\"\n      fullWidth=\"true\"\n      (click)=\"authenticator.skipVerification()\"\n    >\n      {{ skipText }}\n    </button>\n\n    <amplify-error *ngIf=\"authenticator.error\">\n      {{ authenticator.error }}\n    </amplify-error>\n  </fieldset>\n  <amplify-slot name=\"verify-user-footer\" [context]=\"context\"> </amplify-slot>\n</form>\n",
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { dataAttr: [{
            type: HostBinding,
            args: ['attr.data-amplify-authenticator-verifyuser']
        }], headerText: [{
            type: Input
        }] }); })();

/**
 * Sorts the given formFields, then renders them in order.
 */
class BaseFormFieldsComponent {
    constructor(authenticator) {
        this.authenticator = authenticator;
        this.display = 'contents';
        this.formFields = [];
    }
    ngOnInit() {
        const state = this.authenticator.authState;
        this.formFields = getSortedFormFields(this.route, state);
        if (this.route === 'confirmSignUp') {
            this.handleConfirmSignUp();
        }
    }
    handleConfirmSignUp() {
        /**
         * @todo(breaking): Angular `confirmSignUp` has different placholder here from other frameworks.
         *
         * Translating here in a backwards-compatible manner, but should be resolved in next major version.
         */
        var _a;
        const state = this.authenticator.authState;
        // backwards compatible placeholder text
        const placeholder = !hasTranslation('Confirmation Code')
            ? translate('Enter your code') // prioritize new placeholder
            : translate('Confirmation Code'); // legacy placeholder
        let defaultFormFields = getDefaultFormFields(this.route, state);
        if (defaultFormFields.confirmation_code.placeholder) {
            defaultFormFields.confirmation_code.placeholder = placeholder;
        }
        const customFormFields = ((_a = getActorContext(state).formFields) === null || _a === void 0 ? void 0 : _a.confirmSignUp) || {};
        const newFormFields = applyDefaults(defaultFormFields, customFormFields);
        this.formFields = sortFormFields(newFormFields);
    }
}
BaseFormFieldsComponent.ɵfac = function BaseFormFieldsComponent_Factory(t) { return new (t || BaseFormFieldsComponent)(ɵngcc0.ɵɵdirectiveInject(AuthenticatorService)); };
BaseFormFieldsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: BaseFormFieldsComponent, selectors: [["amplify-base-form-fields"]], hostVars: 2, hostBindings: function BaseFormFieldsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { route: "route" }, decls: 1, vars: 1, consts: [[4, "ngFor", "ngForOf"], [3, "name", "formField"]], template: function BaseFormFieldsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BaseFormFieldsComponent_ng_container_0_Template, 2, 2, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.formFields);
    } }, dependencies: [ɵngcc1.NgForOf, FormFieldComponent], encapsulation: 2 });
BaseFormFieldsComponent.ctorParameters = () => [
    { type: AuthenticatorService }
];
BaseFormFieldsComponent.propDecorators = {
    route: [{ type: Input }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BaseFormFieldsComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-base-form-fields',
                template: "<ng-container *ngFor=\"let formField of formFields\">\n  <amplify-form-field\n    [name]=\"formField[0]\"\n    [formField]=\"formField[1]\"\n  ></amplify-form-field>\n</ng-container>\n"
            }]
    }], function () { return [{ type: AuthenticatorService }]; }, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], route: [{
            type: Input
        }] }); })();

class ButtonComponent {
    constructor() {
        this.type = 'button';
        this.fullWidth = false;
        this.isDisabled = false;
        this.size = 'medium';
        this.variation = 'default';
        this.fontWeight = 'normal';
    }
    get getDisabled() {
        return this.isDisabled ? '' : null;
    }
    get classNames() {
        let className = 'amplify-button';
        if (this.variation) {
            className += ` amplify-button--${this.variation}`;
        }
        if (this.size) {
            className += ` amplify-button--${this.size}`;
        }
        if (this.fullWidth) {
            className += ` amplify-button--fullwidth`;
        }
        if (this.isDisabled) {
            className += ` amplify-button--disabled amplify-button--loading`;
        }
        return className;
    }
    ngOnInit() {
        this.typeAttr = this.type;
        this.fullWidthAttr = this.fullWidth;
        this.sizeAttr = this.size;
        this.variationAttr = this.variation;
        this.fontWeightAttr = this.fontWeight;
    }
}
ButtonComponent.ɵfac = function ButtonComponent_Factory(t) { return new (t || ButtonComponent)(); };
ButtonComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ButtonComponent, selectors: [["button", "amplify-button", ""]], hostVars: 9, hostBindings: function ButtonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("type", ctx.typeAttr);
        ɵngcc0.ɵɵattribute("disabled", ctx.getDisabled)("data-fullwidth", ctx.fullWidthAttr)("data-size", ctx.sizeAttr)("data-variation", ctx.variationAttr);
        ɵngcc0.ɵɵclassMap(ctx.classNames);
        ɵngcc0.ɵɵstyleProp("font-weight", ctx.fontWeightAttr);
    } }, inputs: { type: "type", fullWidth: "fullWidth", isDisabled: "isDisabled", size: "size", variation: "variation", fontWeight: "fontWeight" }, attrs: _c1, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ButtonComponent.propDecorators = {
    type: [{ type: Input }],
    fullWidth: [{ type: Input }],
    isDisabled: [{ type: Input }],
    size: [{ type: Input }],
    variation: [{ type: Input }],
    fontWeight: [{ type: Input }],
    typeAttr: [{ type: HostBinding, args: ['type',] }],
    fullWidthAttr: [{ type: HostBinding, args: ['attr.data-fullwidth',] }],
    sizeAttr: [{ type: HostBinding, args: ['attr.data-size',] }],
    variationAttr: [{ type: HostBinding, args: ['attr.data-variation',] }],
    fontWeightAttr: [{ type: HostBinding, args: ['style.font-weight',] }],
    getDisabled: [{ type: HostBinding, args: ['attr.disabled',] }],
    classNames: [{ type: HostBinding, args: ['class',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ButtonComponent, [{
        type: Component,
        args: [{
                selector: 'button[amplify-button]',
                template: "<ng-content></ng-content>\n"
            }]
    }], function () { return []; }, { type: [{
            type: Input
        }], fullWidth: [{
            type: Input
        }], isDisabled: [{
            type: Input
        }], size: [{
            type: Input
        }], variation: [{
            type: Input
        }], fontWeight: [{
            type: Input
        }], getDisabled: [{
            type: HostBinding,
            args: ['attr.disabled']
        }], classNames: [{
            type: HostBinding,
            args: ['class']
        }], typeAttr: [{
            type: HostBinding,
            args: ['type']
        }], fullWidthAttr: [{
            type: HostBinding,
            args: ['attr.data-fullwidth']
        }], sizeAttr: [{
            type: HostBinding,
            args: ['attr.data-size']
        }], variationAttr: [{
            type: HostBinding,
            args: ['attr.data-variation']
        }], fontWeightAttr: [{
            type: HostBinding,
            args: ['style.font-weight']
        }] }); })();

class CheckboxComponent {
    constructor() {
        this.defaultChecked = false;
        this.hasError = false;
        this.isChecked = false;
    }
    ngOnInit() {
        if (this.defaultChecked) {
            this.isChecked = true;
        }
    }
    handleClick() {
        this.isChecked = !this.isChecked;
    }
}
CheckboxComponent.ɵfac = function CheckboxComponent_Factory(t) { return new (t || CheckboxComponent)(); };
CheckboxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: CheckboxComponent, selectors: [["amplify-checkbox"]], inputs: { defaultChecked: "defaultChecked", hasError: "hasError", errorMessage: "errorMessage", label: "label", name: "name", value: "value" }, ngContentSelectors: _c0, decls: 10, vars: 12, consts: [[1, "amplify-flex", "amplify-field", "amplify-checkboxfield"], [1, "amplify-flex", "amplify-checkbox"], [1, "amplify-visually-hidden"], ["aria-invalid", "false", "type", "checkbox", 1, "amplify-input", "amplify-field-group__control", "amplify-checkbox__input", 3, "name", "value", "click"], ["aria-hidden", "true", "data-focus", "false", 1, "amplify-flex", "amplify-checkbox__button", 3, "ngClass"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "amplify-icon", "amplify-checkbox__icon", 3, "ngClass"], ["d", "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"], [1, "amplify-text", "amplify-checkbox__label"], ["class", "amplify-text amplify-field__error-message", 4, "ngIf"], [1, "amplify-text", "amplify-field__error-message"]], template: function CheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "label", 1)(2, "span", 2)(3, "input", 3);
        ɵngcc0.ɵɵlistener("click", function CheckboxComponent_Template_input_click_3_listener() { return ctx.handleClick(); });
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelementStart(4, "span", 4);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(5, "svg", 5);
        ɵngcc0.ɵɵelement(6, "path", 6);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵnamespaceHTML();
        ɵngcc0.ɵɵelementStart(7, "span", 7);
        ɵngcc0.ɵɵprojection(8);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵtemplate(9, CheckboxComponent_p_9_Template, 2, 1, "p", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("name", ctx.name)("value", ctx.value);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(8, _c2, ctx.hasError));
        ɵngcc0.ɵɵattribute("data-error", ctx.hasError)("data-checked", ctx.isChecked);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(10, _c3, ctx.isChecked));
        ɵngcc0.ɵɵattribute("data-checked", ctx.isChecked);
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", ctx.hasError);
    } }, dependencies: [ɵngcc1.NgClass, ɵngcc1.NgIf], encapsulation: 2 });
CheckboxComponent.propDecorators = {
    defaultChecked: [{ type: Input }],
    errorMessage: [{ type: Input }],
    hasError: [{ type: Input }],
    label: [{ type: Input }],
    name: [{ type: Input }],
    value: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-checkbox',
                template: "<div class=\"amplify-flex amplify-field amplify-checkboxfield\">\n  <label class=\"amplify-flex amplify-checkbox\">\n    <span class=\"amplify-visually-hidden\">\n      <input\n        (click)=\"handleClick()\"\n        class=\"\n          amplify-input\n          amplify-field-group__control\n          amplify-checkbox__input\n        \"\n        aria-invalid=\"false\"\n        type=\"checkbox\"\n        [name]=\"name\"\n        [value]=\"value\"\n      />\n    </span>\n    <span\n      class=\"amplify-flex amplify-checkbox__button\"\n      aria-hidden=\"true\"\n      data-focus=\"false\"\n      [ngClass]=\"{\n        'amplify-checkbox__button--error': hasError\n      }\"\n      [attr.data-error]=\"hasError\"\n      [attr.data-checked]=\"isChecked\"\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        class=\"amplify-icon amplify-checkbox__icon\"\n        viewBox=\"0 0 24 24\"\n        fill=\"currentColor\"\n        [attr.data-checked]=\"isChecked\"\n        [ngClass]=\"{\n          'amplify-checkbox__icon--checked': isChecked\n        }\"\n      >\n        <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"></path>\n      </svg>\n    </span>\n    <span class=\"amplify-text amplify-checkbox__label\">\n      <ng-content></ng-content>\n    </span>\n  </label>\n  <p *ngIf=\"hasError\" class=\"amplify-text amplify-field__error-message\">\n    {{ errorMessage }}\n  </p>\n</div>\n"
            }]
    }], function () { return []; }, { defaultChecked: [{
            type: Input
        }], hasError: [{
            type: Input
        }], errorMessage: [{
            type: Input
        }], label: [{
            type: Input
        }], name: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

class ErrorComponent {
    constructor() {
        this.isVisible = true;
    }
    close() {
        this.isVisible = false;
    }
}
ErrorComponent.ɵfac = function ErrorComponent_Factory(t) { return new (t || ErrorComponent)(); };
ErrorComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: ErrorComponent, selectors: [["amplify-error"]], ngContentSelectors: _c0, decls: 1, vars: 1, consts: [["class", "amplify-flex amplify-alert amplify-alert--error", "data-variation", "error", "style", "align-items: center; justify-content: space-between", "role", "alert", 4, "ngIf"], ["data-variation", "error", "role", "alert", 1, "amplify-flex", "amplify-alert", "amplify-alert--error", 2, "align-items", "center", "justify-content", "space-between"], [1, "amplify-flex", 2, "align-items", "center"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "fill", "currentColor", 1, "amplify-icon"], ["d", "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"], ["amplify-button", "", "variation", "link", 1, "amplify-field-group__control", 3, "fullWidth", "click"], ["d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"]], template: function ErrorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ErrorComponent_div_0_Template, 9, 1, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.isVisible);
    } }, dependencies: [ɵngcc1.NgIf, ButtonComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ErrorComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-error',
                template: "<div\n  class=\"amplify-flex amplify-alert amplify-alert--error\"\n  data-variation=\"error\"\n  style=\"align-items: center; justify-content: space-between\"\n  *ngIf=\"isVisible\"\n  role=\"alert\"\n>\n  <div class=\"amplify-flex\" style=\"align-items: center\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      class=\"amplify-icon\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n    >\n      <path\n        d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"\n      ></path>\n    </svg>\n    <div><ng-content></ng-content></div>\n  </div>\n  <button\n    amplify-button\n    class=\"amplify-field-group__control\"\n    variation=\"link\"\n    [fullWidth]=\"false\"\n    (click)=\"close()\"\n  >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      class=\"amplify-icon\"\n      viewBox=\"0 0 24 24\"\n      fill=\"currentColor\"\n    >\n      <path\n        d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n      ></path>\n    </svg>\n  </button>\n</div>\n"
            }]
    }], function () { return []; }, null); })();

class PasswordFieldComponent {
    constructor() {
        this.autocomplete = 'new-password';
        this.disabled = false;
        this.fieldId = `amplify-field-${nanoid(12)}`;
        this.initialValue = '';
        this.label = '';
        this.placeholder = '';
        this.required = true;
        this.labelHidden = false;
        this.setBlur = new EventEmitter();
        this.type = 'password';
        this.showPassword = false;
        this.showPasswordButtonlabel = translate('Show password');
    }
    togglePasswordText() {
        this.showPassword = !this.showPassword;
        this.showPasswordButtonlabel = this.showPassword
            ? translate('Show password')
            : translate('Hide password');
        this.type = this.showPassword ? 'text' : 'password';
    }
}
PasswordFieldComponent.ɵfac = function PasswordFieldComponent_Factory(t) { return new (t || PasswordFieldComponent)(); };
PasswordFieldComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PasswordFieldComponent, selectors: [["amplify-password-field"]], inputs: { autocomplete: "autocomplete", disabled: "disabled", fieldId: "fieldId", initialValue: "initialValue", label: "label", placeholder: "placeholder", required: "required", labelHidden: "labelHidden", name: "name", hasError: "hasError", describedBy: "describedBy" }, outputs: { setBlur: "setBlur" }, decls: 8, vars: 17, consts: [[1, "amplify-label", 3, "for"], [1, "amplify-flex", "amplify-field-group"], [1, "amplify-input", "amplify-field-group__control", 3, "id", "type", "name", "placeholder", "required", "value", "autocomplete", "blur"], [1, "amplify-field-group__outer-end"], ["amplify-button", "", 1, "amplify-field-group__control", "amplify-field__show-password", 3, "click"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "currentColor", "viewBox", "0 0 24 24", "class", "amplify-icon", 4, "ngIf"], ["xmlns", "http://www.w3.org/2000/svg", "fill", "currentColor", "viewBox", "0 0 24 24", 1, "amplify-icon"], ["d", "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"], ["d", "M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z", "fill", "none"], ["d", "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"]], template: function PasswordFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1)(3, "input", 2);
        ɵngcc0.ɵɵlistener("blur", function PasswordFieldComponent_Template_input_blur_3_listener($event) { return ctx.setBlur.emit($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(4, "div", 3)(5, "button", 4);
        ɵngcc0.ɵɵlistener("click", function PasswordFieldComponent_Template_button_click_5_listener() { return ctx.togglePasswordText(); });
        ɵngcc0.ɵɵtemplate(6, PasswordFieldComponent__svg_svg_6_Template, 2, 0, "svg", 5);
        ɵngcc0.ɵɵtemplate(7, PasswordFieldComponent__svg_svg_7_Template, 3, 0, "svg", 5);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("amplify-visually-hidden", ctx.labelHidden);
        ɵngcc0.ɵɵproperty("for", ctx.fieldId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, "\n");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.fieldId)("type", ctx.type)("name", ctx.name)("placeholder", ctx.placeholder)("required", ctx.required)("value", ctx.initialValue)("autocomplete", ctx.autocomplete);
        ɵngcc0.ɵɵattribute("disabled", ctx.disabled ? "" : null)("aria-invalid", ctx.hasError ? "true" : "false")("aria-describedby", ctx.describedBy);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("aria-label", ctx.showPasswordButtonlabel);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.showPassword);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showPassword);
    } }, dependencies: [ɵngcc1.NgIf, ButtonComponent], encapsulation: 2 });
PasswordFieldComponent.propDecorators = {
    autocomplete: [{ type: Input }],
    disabled: [{ type: Input }],
    fieldId: [{ type: Input }],
    initialValue: [{ type: Input }],
    label: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    labelHidden: [{ type: Input }],
    hasError: [{ type: Input }],
    describedBy: [{ type: Input }],
    setBlur: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PasswordFieldComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-password-field',
                template: "<label\n  class=\"amplify-label\"\n  [class.amplify-visually-hidden]=\"labelHidden\"\n  [for]=\"fieldId\"\n>\n  {{ label }}\n</label>\n<div class=\"amplify-flex amplify-field-group\">\n  <input\n    class=\"amplify-input amplify-field-group__control\"\n    [id]=\"fieldId\"\n    [type]=\"type\"\n    [name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"initialValue\"\n    [autocomplete]=\"autocomplete\"\n    [attr.disabled]=\"disabled ? '' : null\"\n    [attr.aria-invalid]=\"hasError ? 'true' : 'false'\"\n    [attr.aria-describedby]=\"describedBy\"\n    (blur)=\"setBlur.emit($event)\"\n  />\n  <div class=\"amplify-field-group__outer-end\">\n    <button\n      amplify-button\n      [attr.aria-label]=\"showPasswordButtonlabel\"\n      class=\"amplify-field-group__control amplify-field__show-password\"\n      (click)=\"togglePasswordText()\"\n    >\n      <svg\n        *ngIf=\"!showPassword\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n        class=\"amplify-icon\"\n      >\n        <path\n          d=\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"\n        ></path>\n      </svg>\n      <svg\n        *ngIf=\"showPassword\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"currentColor\"\n        viewBox=\"0 0 24 24\"\n        class=\"amplify-icon\"\n      >\n        <path\n          d=\"M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z\"\n          fill=\"none\"\n        ></path>\n        <path\n          d=\"M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z\"\n        ></path>\n      </svg>\n    </button>\n  </div>\n</div>\n"
            }]
    }], function () { return []; }, { autocomplete: [{
            type: Input
        }], disabled: [{
            type: Input
        }], fieldId: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], label: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], required: [{
            type: Input
        }], labelHidden: [{
            type: Input
        }], setBlur: [{
            type: Output
        }], name: [{
            type: Input
        }], hasError: [{
            type: Input
        }], describedBy: [{
            type: Input
        }] }); })();

class PhoneNumberFieldComponent {
    constructor() {
        this.autocomplete = 'new-password';
        this.disabled = false;
        this.selectFieldId = `amplify-field-${nanoid(12)}`;
        this.textFieldId = `amplify-field-${nanoid(12)}`;
        this.initialValue = '';
        this.label = '';
        this.placeholder = '';
        this.required = true;
        this.labelHidden = false;
        this.display = 'contents';
    }
    ngOnInit() {
        var _a;
        this.countryDialCodesValues = (_a = this.dialCodeList) !== null && _a !== void 0 ? _a : countryDialCodes;
    }
}
PhoneNumberFieldComponent.ɵfac = function PhoneNumberFieldComponent_Factory(t) { return new (t || PhoneNumberFieldComponent)(); };
PhoneNumberFieldComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: PhoneNumberFieldComponent, selectors: [["amplify-phone-number-field"]], hostVars: 2, hostBindings: function PhoneNumberFieldComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { autocomplete: "autocomplete", disabled: "disabled", selectFieldId: "selectFieldId", textFieldId: "textFieldId", initialValue: "initialValue", label: "label", placeholder: "placeholder", required: "required", labelHidden: "labelHidden", defaultCountryCode: "defaultCountryCode", name: "name", type: "type", dialCodeList: "dialCodeList", hasError: "hasError", describedBy: "describedBy" }, decls: 7, vars: 17, consts: [[1, "amplify-label", 3, "for"], ["amplify-field-group", "", 1, "amplify-flex", "amplify-phonenumberfield", 2, "gap", "0px"], [1, "amplify-field-group__outer-start"], [1, "amplify-flex", "amplify-field", "amplify-selectfield", "amplify-countrycodeselect", 2, "flex-direction", "column"], ["name", "country_code", "label", "Country Code", 3, "id", "items", "defaultValue"], [1, "amplify-input", 3, "id", "type", "name", "placeholder", "required", "value", "autocomplete"]], template: function PhoneNumberFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1)(3, "div", 2)(4, "div", 3);
        ɵngcc0.ɵɵelement(5, "amplify-form-select", 4);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵelement(6, "input", 5);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("amplify-visually-hidden", ctx.labelHidden);
        ɵngcc0.ɵɵproperty("for", ctx.textFieldId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, "\n");
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("id", ctx.selectFieldId)("items", ctx.countryDialCodesValues)("defaultValue", ctx.defaultCountryCode);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.textFieldId)("type", ctx.type)("name", ctx.name)("placeholder", ctx.placeholder)("required", ctx.required)("value", ctx.initialValue)("autocomplete", ctx.autocomplete);
        ɵngcc0.ɵɵattribute("disabled", ctx.disabled ? "" : null)("aria-invalid", ctx.hasError ? "true" : "false")("aria-describedby", ctx.describedBy);
    } }, dependencies: function () { return [SelectComponent]; }, encapsulation: 2 });
PhoneNumberFieldComponent.propDecorators = {
    autocomplete: [{ type: Input }],
    disabled: [{ type: Input }],
    defaultCountryCode: [{ type: Input }],
    selectFieldId: [{ type: Input }],
    textFieldId: [{ type: Input }],
    initialValue: [{ type: Input }],
    label: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    type: [{ type: Input }],
    labelHidden: [{ type: Input }],
    dialCodeList: [{ type: Input }],
    hasError: [{ type: Input }],
    describedBy: [{ type: Input }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PhoneNumberFieldComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-phone-number-field',
                template: "<label\n  class=\"amplify-label\"\n  [class.amplify-visually-hidden]=\"labelHidden\"\n  [for]=\"textFieldId\"\n>\n  {{ label }}\n</label>\n<div\n  class=\"amplify-flex amplify-phonenumberfield\"\n  amplify-field-group\n  style=\"gap: 0px\"\n>\n  <div class=\"amplify-field-group__outer-start\">\n    <div\n      class=\"\n        amplify-flex amplify-field amplify-selectfield amplify-countrycodeselect\n      \"\n      style=\"flex-direction: column\"\n    >\n      <amplify-form-select\n        name=\"country_code\"\n        label=\"Country Code\"\n        [id]=\"selectFieldId\"\n        [items]=\"countryDialCodesValues\"\n        [defaultValue]=\"defaultCountryCode\"\n      ></amplify-form-select>\n    </div>\n  </div>\n\n  <input\n    class=\"amplify-input\"\n    [id]=\"textFieldId\"\n    [type]=\"type\"\n    [name]=\"name\"\n    [placeholder]=\"placeholder\"\n    [required]=\"required\"\n    [value]=\"initialValue\"\n    [autocomplete]=\"autocomplete\"\n    [attr.disabled]=\"disabled ? '' : null\"\n    [attr.aria-invalid]=\"hasError ? 'true' : 'false'\"\n    [attr.aria-describedby]=\"describedBy\"\n  />\n</div>\n"
            }]
    }], function () { return []; }, { autocomplete: [{
            type: Input
        }], disabled: [{
            type: Input
        }], selectFieldId: [{
            type: Input
        }], textFieldId: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], label: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], required: [{
            type: Input
        }], labelHidden: [{
            type: Input
        }], display: [{
            type: HostBinding,
            args: ['style.display']
        }], defaultCountryCode: [{
            type: Input
        }], name: [{
            type: Input
        }], type: [{
            type: Input
        }], dialCodeList: [{
            type: Input
        }], hasError: [{
            type: Input
        }], describedBy: [{
            type: Input
        }] }); })();

class SelectComponent {
}
SelectComponent.ɵfac = function SelectComponent_Factory(t) { return new (t || SelectComponent)(); };
SelectComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: SelectComponent, selectors: [["amplify-form-select"]], inputs: { items: "items", name: "name", label: "label", id: "id", defaultValue: "defaultValue" }, decls: 8, vars: 5, consts: [[1, "amplify-label", "amplify-visually-hidden", 3, "for"], [1, "amplify-select__wrapper"], ["autocomplete", "tel-country-code", 1, "amplify-select", "amplify-field-group__control", 3, "id", "name"], [3, "value", "selected", 4, "ngFor", "ngForOf"], [1, "amplify-flex", "amplify-select__icon-wrapper", 2, "align-items", "center", "justify-content", "center"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 24 24", "data-size", "large", "fill", "currentColor", 1, "amplify-icon", "amplify-icon--large"], ["d", "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"], [3, "value", "selected"]], template: function SelectComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "div", 1)(3, "select", 2);
        ɵngcc0.ɵɵtemplate(4, SelectComponent_option_4_Template, 2, 3, "option", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵnamespaceSVG();
        ɵngcc0.ɵɵelementStart(6, "svg", 5);
        ɵngcc0.ɵɵelement(7, "path", 6);
        ɵngcc0.ɵɵelementEnd()()();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("for", ctx.id);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.label);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.id)("name", ctx.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
    } }, dependencies: [ɵngcc1.NgForOf], encapsulation: 2 });
SelectComponent.propDecorators = {
    items: [{ type: Input }],
    name: [{ type: Input }],
    label: [{ type: Input }],
    id: [{ type: Input }],
    defaultValue: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(SelectComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-form-select',
                template: "<label class=\"amplify-label amplify-visually-hidden\" [for]=\"id\">{{\n  label\n}}</label>\n<div class=\"amplify-select__wrapper\">\n  <select\n    class=\"amplify-select amplify-field-group__control\"\n    autocomplete=\"tel-country-code\"\n    [id]=\"id\"\n    [name]=\"name\"\n  >\n    <option\n      *ngFor=\"let item of items\"\n      [value]=\"item\"\n      [selected]=\"item === defaultValue\"\n    >\n      {{ item }}\n    </option>\n  </select>\n  <div\n    class=\"amplify-flex amplify-select__icon-wrapper\"\n    style=\"align-items: center; justify-content: center\"\n  >\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      class=\"amplify-icon amplify-icon--large\"\n      viewBox=\"0 0 24 24\"\n      data-size=\"large\"\n      fill=\"currentColor\"\n    >\n      <path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"></path>\n    </svg>\n  </div>\n</div>\n"
            }]
    }], null, { items: [{
            type: Input
        }], name: [{
            type: Input
        }], label: [{
            type: Input
        }], id: [{
            type: Input
        }], defaultValue: [{
            type: Input
        }] }); })();

class TabItemComponent {
    constructor() {
        this.active = false;
        this.display = 'block'; // emulate div behavior
    }
}
TabItemComponent.ɵfac = function TabItemComponent_Factory(t) { return new (t || TabItemComponent)(); };
TabItemComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TabItemComponent, selectors: [["amplify-tab-item"]], hostVars: 2, hostBindings: function TabItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { active: "active", title: "title", id: "id", labelledById: "labelledById", tabIndex: "tabIndex" }, ngContentSelectors: _c0, decls: 2, vars: 5, consts: [["data-orientation", "horizontal", "role", "tabpanel", 3, "id"], [4, "ngIf"]], template: function TabItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtemplate(1, TabItemComponent_ng_content_1_Template, 1, 0, "ng-content", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("aria-labelledby", ctx.labelledById)("data-state", ctx.active ? "active" : "inactive")("tabindex", ctx.tabIndex);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.active);
    } }, dependencies: [ɵngcc1.NgIf], encapsulation: 2 });
TabItemComponent.propDecorators = {
    title: [{ type: Input }],
    active: [{ type: Input }],
    id: [{ type: Input }],
    labelledById: [{ type: Input }],
    tabIndex: [{ type: Input }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabItemComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-tab-item',
                template: "<div\n  data-orientation=\"horizontal\"\n  role=\"tabpanel\"\n  [id]=\"id\"\n  [attr.aria-labelledby]=\"labelledById\"\n  [attr.data-state]=\"active ? 'active' : 'inactive'\"\n  [attr.tabindex]=\"tabIndex\"\n>\n  <ng-content *ngIf=\"active\"></ng-content>\n</div>\n"
            }]
    }], function () { return []; }, { active: [{
            type: Input
        }], display: [{
            type: HostBinding,
            args: ['style.display']
        }], title: [{
            type: Input
        }], id: [{
            type: Input
        }], labelledById: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }] }); })();

class TabsComponent {
    constructor() {
        this.tabChange = new EventEmitter();
    }
    ngAfterContentInit() {
        // assign ids
        this.tabs.forEach((tab, index) => {
            tab.id = `radix-id-${nanoid(12)}-1-content-${index}`;
            tab.labelledById = `radix-id-${nanoid(12)}-1-trigger-${index}`;
        });
        // find active tab
        // TODO(enhancement): more declarative way for choosing the initial tab to render
        const activeTabs = this.tabs.filter((tab) => tab.active);
        // set active tab
        if (activeTabs.length !== 1) {
            this.selectTab(this.tabs.first);
        }
    }
    selectTab(tab) {
        this.tabs.forEach((tab) => {
            tab.active = false;
        });
        tab.active = true;
    }
    handleTabClick(tab) {
        if (tab.active)
            return; // don't do anything if clicks the current active tab
        this.tabChange.emit();
        this.selectTab(tab);
    }
}
TabsComponent.ɵfac = function TabsComponent_Factory(t) { return new (t || TabsComponent)(); };
TabsComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TabsComponent, selectors: [["amplify-tabs"]], contentQueries: function TabsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, TabItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabs = _t);
    } }, outputs: { tabChange: "tabChange" }, ngContentSelectors: _c0, decls: 4, vars: 1, consts: [["tabindex", "0", "aria-orientation", "horizontal", "data-orientation", "horizontal", "role", "tablist", 2, "outline", "none"], ["data-indicator-position", "top", 1, "amplify-flex", "amplify-tabs", 2, "gap", "0px", "justify-content", "center"], ["class", "amplify-tabs-item", "data-spacing", "equal", "data-orientation", "horizontal", "role", "tab", 3, "id", "tabindex", "click", 4, "ngFor", "ngForOf"], ["data-spacing", "equal", "data-orientation", "horizontal", "role", "tab", 1, "amplify-tabs-item", 3, "id", "tabindex", "click"]], template: function TabsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0)(1, "div", 1);
        ɵngcc0.ɵɵtemplate(2, TabsComponent_div_2_Template, 2, 6, "div", 2);
        ɵngcc0.ɵɵelementEnd()();
        ɵngcc0.ɵɵprojection(3);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.tabs);
    } }, dependencies: [ɵngcc1.NgForOf], encapsulation: 2 });
TabsComponent.propDecorators = {
    tabs: [{ type: ContentChildren, args: [TabItemComponent,] }],
    tabChange: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TabsComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-tabs',
                template: "<div\n  tabindex=\"0\"\n  aria-orientation=\"horizontal\"\n  data-orientation=\"horizontal\"\n  role=\"tablist\"\n  style=\"outline: none\"\n>\n  <div\n    class=\"amplify-flex amplify-tabs\"\n    data-indicator-position=\"top\"\n    style=\"gap: 0px; justify-content: center\"\n  >\n    <div\n      *ngFor=\"let tab of tabs\"\n      class=\"amplify-tabs-item\"\n      data-spacing=\"equal\"\n      data-orientation=\"horizontal\"\n      role=\"tab\"\n      [id]=\"tab.labelledById\"\n      [tabindex]=\"tab.active ? '0' : '1'\"\n      [attr.aria-selected]=\"tab.active\"\n      [attr.aria-controls]=\"tab.id\"\n      [attr.data-state]=\"tab.active ? 'active' : 'inactive'\"\n      (click)=\"handleTabClick(tab)\"\n    >\n      {{ tab.title }}\n    </div>\n  </div>\n</div>\n\n<ng-content></ng-content>\n"
            }]
    }], function () { return []; }, { tabChange: [{
            type: Output
        }], tabs: [{
            type: ContentChildren,
            args: [TabItemComponent]
        }] }); })();

class TextFieldComponent {
    constructor() {
        this.autocomplete = 'new-password';
        this.disabled = false;
        this.fieldId = `amplify-field-${nanoid(12)}`;
        this.initialValue = '';
        this.label = '';
        this.placeholder = '';
        this.required = true;
        this.labelHidden = false;
        this.display = 'contents';
    }
}
TextFieldComponent.ɵfac = function TextFieldComponent_Factory(t) { return new (t || TextFieldComponent)(); };
TextFieldComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: TextFieldComponent, selectors: [["amplify-text-field"]], hostVars: 2, hostBindings: function TextFieldComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { autocomplete: "autocomplete", disabled: "disabled", fieldId: "fieldId", initialValue: "initialValue", label: "label", placeholder: "placeholder", required: "required", labelHidden: "labelHidden", name: "name", type: "type", hasError: "hasError", describedBy: "describedBy" }, decls: 3, vars: 14, consts: [[1, "amplify-label", 3, "for"], [1, "amplify-input", 3, "id", "type", "name", "placeholder", "required", "value", "autocomplete"]], template: function TextFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(2, "input", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("amplify-visually-hidden", ctx.labelHidden);
        ɵngcc0.ɵɵproperty("for", ctx.fieldId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, "\n");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("id", ctx.fieldId)("type", ctx.type)("name", ctx.name)("placeholder", ctx.placeholder)("required", ctx.required)("value", ctx.initialValue)("autocomplete", ctx.autocomplete);
        ɵngcc0.ɵɵattribute("disabled", ctx.disabled ? "" : null)("aria-invalid", ctx.hasError ? "true" : "false")("aria-describedby", ctx.describedBy);
    } }, encapsulation: 2 });
TextFieldComponent.propDecorators = {
    autocomplete: [{ type: Input }],
    disabled: [{ type: Input }],
    fieldId: [{ type: Input }],
    initialValue: [{ type: Input }],
    label: [{ type: Input }],
    name: [{ type: Input }],
    placeholder: [{ type: Input }],
    required: [{ type: Input }],
    type: [{ type: Input }],
    labelHidden: [{ type: Input }],
    hasError: [{ type: Input }],
    describedBy: [{ type: Input }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TextFieldComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-text-field',
                template: "<label\n  class=\"amplify-label\"\n  [class.amplify-visually-hidden]=\"labelHidden\"\n  [for]=\"fieldId\"\n>\n  {{ label }}\n</label>\n<input\n  class=\"amplify-input\"\n  [id]=\"fieldId\"\n  [type]=\"type\"\n  [name]=\"name\"\n  [placeholder]=\"placeholder\"\n  [required]=\"required\"\n  [value]=\"initialValue\"\n  [autocomplete]=\"autocomplete\"\n  [attr.disabled]=\"disabled ? '' : null\"\n  [attr.aria-invalid]=\"hasError ? 'true' : 'false'\"\n  [attr.aria-describedby]=\"describedBy\"\n/>\n"
            }]
    }], function () { return []; }, { autocomplete: [{
            type: Input
        }], disabled: [{
            type: Input
        }], fieldId: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], label: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], required: [{
            type: Input
        }], labelHidden: [{
            type: Input
        }], display: [{
            type: HostBinding,
            args: ['style.display']
        }], name: [{
            type: Input
        }], type: [{
            type: Input
        }], hasError: [{
            type: Input
        }], describedBy: [{
            type: Input
        }] }); })();

class AmplifySlotComponent {
    constructor(propService) {
        this.propService = propService;
        this.display = 'contents';
        this.isOverriden = false;
    }
    ngAfterContentInit() {
        const customComponents = this.propService.customComponents;
        const overridingComponent = customComponents[this.name];
        if (overridingComponent) {
            this.overridingComponent = overridingComponent;
            this.isOverriden = true;
        }
    }
}
AmplifySlotComponent.ɵfac = function AmplifySlotComponent_Factory(t) { return new (t || AmplifySlotComponent)(ɵngcc0.ɵɵdirectiveInject(CustomComponentsService)); };
AmplifySlotComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: AmplifySlotComponent, selectors: [["amplify-slot"]], hostVars: 2, hostBindings: function AmplifySlotComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("display", ctx.display);
    } }, inputs: { name: "name", context: "context" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function AmplifySlotComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, AmplifySlotComponent_ng_content_0_Template, 1, 0, "ng-content", 0);
        ɵngcc0.ɵɵtemplate(1, AmplifySlotComponent_ng_container_1_Template, 1, 2, "ng-container", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", !ctx.isOverriden);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isOverriden);
    } }, dependencies: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2 });
AmplifySlotComponent.ctorParameters = () => [
    { type: CustomComponentsService }
];
AmplifySlotComponent.propDecorators = {
    name: [{ type: Input }],
    context: [{ type: Input }],
    display: [{ type: HostBinding, args: ['style.display',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AmplifySlotComponent, [{
        type: Component,
        args: [{
                selector: 'amplify-slot',
                template: "<!-- \n  if slot isn't overwritten, we display the the default coponent, which is the \n  children passed onto this component.\n-->\n<ng-content *ngIf=\"!isOverriden\"></ng-content>\n\n<!-- If slot is overwritten, we render that instead. -->\n<ng-container\n  *ngIf=\"isOverriden\"\n  [ngTemplateOutlet]=\"overridingComponent\"\n  [ngTemplateOutletContext]=\"context\"\n></ng-container>\n"
            }]
    }], function () { return [{ type: CustomComponentsService }]; }, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], name: [{
            type: Input
        }], context: [{
            type: Input
        }] }); })();

class AmplifyAuthenticatorModule {
}
AmplifyAuthenticatorModule.ɵfac = function AmplifyAuthenticatorModule_Factory(t) { return new (t || AmplifyAuthenticatorModule)(); };
AmplifyAuthenticatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: AmplifyAuthenticatorModule });
AmplifyAuthenticatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AmplifyAuthenticatorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    AmplifySlotComponent,
                    AmplifySlotDirective,
                    AuthenticatorComponent,
                    BaseFormFieldsComponent,
                    ButtonComponent,
                    CheckboxComponent,
                    ConfirmResetPasswordComponent,
                    ConfirmSignInComponent,
                    ConfirmSignUpComponent,
                    ConfirmVerifyUserComponent,
                    ErrorComponent,
                    FederatedSignInButtonComponent,
                    FederatedSignInComponent,
                    ForceNewPasswordComponent,
                    ForceNewPasswordFormFieldsComponent,
                    FormFieldComponent,
                    PasswordFieldComponent,
                    PhoneNumberFieldComponent,
                    ResetPasswordComponent,
                    SelectComponent,
                    SetupTotpComponent,
                    SignInComponent,
                    SignUpComponent,
                    SignUpFormFieldsComponent,
                    TabItemComponent,
                    TabsComponent,
                    TextFieldComponent,
                    VerifyUserComponent,
                ],
                imports: [CommonModule],
                exports: [
                    AmplifySlotDirective,
                    AuthenticatorComponent,
                    CheckboxComponent,
                    SignUpFormFieldsComponent,
                    ForceNewPasswordFormFieldsComponent,
                    TextFieldComponent,
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AmplifyAuthenticatorModule, { declarations: function () { return [AmplifySlotComponent, AmplifySlotDirective, AuthenticatorComponent, BaseFormFieldsComponent, ButtonComponent, CheckboxComponent, ConfirmResetPasswordComponent, ConfirmSignInComponent, ConfirmSignUpComponent, ConfirmVerifyUserComponent, ErrorComponent, FederatedSignInButtonComponent, FederatedSignInComponent, ForceNewPasswordComponent, ForceNewPasswordFormFieldsComponent, FormFieldComponent, PasswordFieldComponent, PhoneNumberFieldComponent, ResetPasswordComponent, SelectComponent, SetupTotpComponent, SignInComponent, SignUpComponent, SignUpFormFieldsComponent, TabItemComponent, TabsComponent, TextFieldComponent, VerifyUserComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AmplifySlotDirective, AuthenticatorComponent, CheckboxComponent, SignUpFormFieldsComponent, ForceNewPasswordFormFieldsComponent, TextFieldComponent]; } }); })();

/*
 * Public API Surface of ui-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AmplifyAuthenticatorModule, AmplifySlotDirective, AuthenticatorComponent, AuthenticatorService, BaseFormFieldsComponent, ButtonComponent, CheckboxComponent, ConfirmResetPasswordComponent, ConfirmSignInComponent, ConfirmSignUpComponent, ConfirmVerifyUserComponent, CustomComponentsService, ErrorComponent, FederatedSignInButtonComponent, FederatedSignInComponent, ForceNewPasswordComponent, ForceNewPasswordFormFieldsComponent, FormFieldComponent, PasswordFieldComponent, PhoneNumberFieldComponent, ResetPasswordComponent, SelectComponent, SetupTotpComponent, SignInComponent, SignUpComponent, SignUpFormFieldsComponent, TabItemComponent, TabsComponent, TextFieldComponent, VerifyUserComponent, getAttributeMap, AmplifySlotComponent as ɵa, AuthenticatorComponent as ɵb, VerifyUserComponent as ɵba, BaseFormFieldsComponent as ɵc, ButtonComponent as ɵd, CheckboxComponent as ɵe, ConfirmResetPasswordComponent as ɵf, ConfirmSignInComponent as ɵg, ConfirmSignUpComponent as ɵh, ConfirmVerifyUserComponent as ɵi, ErrorComponent as ɵj, FederatedSignInButtonComponent as ɵk, FederatedSignInComponent as ɵl, ForceNewPasswordComponent as ɵm, ForceNewPasswordFormFieldsComponent as ɵn, FormFieldComponent as ɵo, PasswordFieldComponent as ɵp, PhoneNumberFieldComponent as ɵq, ResetPasswordComponent as ɵr, SelectComponent as ɵs, SetupTotpComponent as ɵt, SignInComponent as ɵu, SignUpComponent as ɵv, SignUpFormFieldsComponent as ɵw, TabItemComponent as ɵx, TabsComponent as ɵy, TextFieldComponent as ɵz };

//# sourceMappingURL=aws-amplify-ui-angular.js.map