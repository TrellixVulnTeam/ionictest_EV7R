{"version":3,"file":"aws-amplify-ui-angular.js","sources":["../../../projects/ui-angular/src/lib/utilities/amplify-slot/amplify-slot.directive.ts","../../../projects/ui-angular/src/lib/services/custom-components.service.ts","../../../projects/ui-angular/src/lib/services/authenticator.service.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/authenticator/authenticator.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/confirm-reset-password/amplify-confirm-reset-password.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/confirm-sign-in/confirm-sign-in.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/confirm-sign-up/confirm-sign-up.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/confirm-verify-user/amplify-confirm-verify-user.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/federated-sign-in-button/federated-sign-in-button.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/federated-sign-in/federated-sign-in.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/force-new-password/force-new-password.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/force-new-password/force-new-password-form-fields/force-new-password-form-fields.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/form-field/form-field.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/reset-password/reset-password.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/setup-totp/setup-totp.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/sign-in/sign-in.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/sign-up/sign-up.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/sign-up/sign-up-form-fields/sign-up-form-fields.component.ts","../../../projects/ui-angular/src/lib/common/helpers.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/verify-user/verify-user.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/components/base-form-fields/base-form-fields.component.ts","../../../projects/ui-angular/src/lib/primitives/button/button.component.ts","../../../projects/ui-angular/src/lib/primitives/checkbox/checkbox.component.ts","../../../projects/ui-angular/src/lib/primitives/error/error.component.ts","../../../projects/ui-angular/src/lib/primitives/password-field/password-field.component.ts","../../../projects/ui-angular/src/lib/primitives/phone-number-field/phone-number-field.component.ts","../../../projects/ui-angular/src/lib/primitives/select/select.component.ts","../../../projects/ui-angular/src/lib/primitives/tab-item/tab-item.component.ts","../../../projects/ui-angular/src/lib/primitives/tabs/tabs.component.ts","../../../projects/ui-angular/src/lib/primitives/text-field/text-field.component.ts","../../../projects/ui-angular/src/lib/utilities/amplify-slot/amplify-slot.component.ts","../../../projects/ui-angular/src/lib/components/authenticator/authenticator.module.ts","../../../projects/ui-angular/src/index.ts","../../../projects/ui-angular/src/aws-amplify-ui-angular.ts"],"sourcesContent":["import { Directive, Input, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[amplifySlot]',\n})\nexport class AmplifySlotDirective {\n  constructor(public template: TemplateRef<any>) {}\n  public name: string;\n\n  @Input() set amplifySlot(component: string) {\n    this.name = component;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CustomComponents } from '../common';\n\n/**\n * Stores and provides custom components that users provide with `amplify-slot`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CustomComponentsService {\n  private _customComponents: CustomComponents = {};\n\n  public get customComponents(): CustomComponents {\n    return this._customComponents;\n  }\n\n  public set customComponents(customComponents: CustomComponents) {\n    this._customComponents = { ...this._customComponents, ...customComponents };\n  }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { Logger } from '@aws-amplify/core';\nimport {\n  AuthContext,\n  AuthEvent,\n  AuthInterpreter,\n  AuthMachineState,\n  createAuthenticatorMachine,\n  getSendEventAliases,\n  getServiceContextFacade,\n  listenToAuthHub,\n} from '@aws-amplify/ui';\nimport { Event, interpret, Subscription } from 'xstate';\nimport { AuthSubscriptionCallback } from '../common';\nimport { translate } from '@aws-amplify/ui';\n\nconst logger = new Logger('state-machine');\n\n/**\n * AuthenticatorService provides access to the authenticator state and context.\n */\n@Injectable({\n  providedIn: 'root', // ensure we have a singleton service\n})\nexport class AuthenticatorService implements OnDestroy {\n  private _authState: AuthMachineState;\n  private _authService: AuthInterpreter;\n  private _sendEventAliases: ReturnType<typeof getSendEventAliases>;\n  private _machineSubscription: Subscription;\n  private _facade: ReturnType<typeof getServiceContextFacade>;\n\n  constructor() {\n    const machine = createAuthenticatorMachine();\n\n    const authService = interpret(machine).start();\n\n    this._machineSubscription = authService.subscribe((state) => {\n      this._authState = state;\n      this._facade = getServiceContextFacade(state);\n    });\n\n    this._sendEventAliases = getSendEventAliases(authService.send);\n    this._authService = authService;\n  }\n\n  ngOnDestroy(): void {\n    if (this._machineSubscription) this._machineSubscription.unsubscribe();\n  }\n\n  /**\n   * Context facades\n   */\n\n  public get error() {\n    return translate(this._facade?.error);\n  }\n\n  public get hasValidationErrors() {\n    return this._facade?.hasValidationErrors;\n  }\n\n  public get isPending() {\n    return this._facade?.isPending;\n  }\n\n  public get route() {\n    return this._facade?.route;\n  }\n\n  public get authStatus() {\n    return this._facade?.authStatus;\n  }\n\n  public get user() {\n    return this._facade?.user;\n  }\n\n  public get validationErrors() {\n    return this._facade?.validationErrors;\n  }\n\n  public get codeDeliveryDetails() {\n    return this._facade?.codeDeliveryDetails;\n  }\n\n  /**\n   * Service facades\n   */\n\n  public get updateForm() {\n    return this._sendEventAliases.updateForm;\n  }\n\n  public get updateBlur() {\n    return this._sendEventAliases.updateBlur;\n  }\n\n  public get resendCode() {\n    return this._sendEventAliases.resendCode;\n  }\n\n  public get signOut() {\n    return this._sendEventAliases.signOut;\n  }\n\n  public get submitForm() {\n    return this._sendEventAliases.submitForm;\n  }\n\n  /**\n   * Transition facades\n   */\n\n  public get toFederatedSignIn() {\n    return this._sendEventAliases.toFederatedSignIn;\n  }\n\n  public get toResetPassword() {\n    return this._sendEventAliases.toResetPassword;\n  }\n\n  public get toSignIn() {\n    return this._sendEventAliases.toSignIn;\n  }\n\n  public get toSignUp() {\n    return this._sendEventAliases.toSignUp;\n  }\n\n  public get skipVerification() {\n    return this._sendEventAliases.skipVerification;\n  }\n\n  /**\n   * Internal utility functions\n   */\n\n  /** @deprecated For internal use only */\n  public get authState(): AuthMachineState {\n    return this._authState;\n  }\n\n  /** @deprecated For internal use only */\n  public get authService(): AuthInterpreter {\n    return this._authService;\n  }\n\n  /** @deprecated For internal use only */\n  public get context(): AuthContext {\n    return this._authState.context;\n  }\n\n  /** @deprecated For internal use only */\n  public get slotContext() {\n    const slotContext = {\n      ...this._facade,\n      ...this._sendEventAliases,\n    };\n\n    return {\n      ...slotContext,\n      $implicit: { ...slotContext },\n    };\n  }\n\n  /** @deprecated For internal use only */\n  public subscribe(callback: AuthSubscriptionCallback) {\n    if (this._authService) {\n      return this._authService.subscribe(callback);\n    } else {\n      logger.error(\n        'Subscription attempted before machine was created. This is likely a bug on the library, please consider filing a bug.'\n      );\n    }\n  }\n\n  /** @deprecated For internal use only */\n  public send(event: Event<AuthEvent>) {\n    this.authService.send(event);\n  }\n}\n","import {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Input,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  TemplateRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  AuthenticatorMachineOptions,\n  defaultAuthHubHandler,\n  listenToAuthHub,\n  SocialProvider,\n  translate,\n} from '@aws-amplify/ui';\nimport { AmplifySlotDirective } from '../../../../utilities/amplify-slot/amplify-slot.directive';\nimport { CustomComponentsService } from '../../../../services/custom-components.service';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\n\n@Component({\n  selector: 'amplify-authenticator',\n  templateUrl: './authenticator.component.html',\n  providers: [CustomComponentsService], // make sure custom components are scoped to this authenticator only\n  encapsulation: ViewEncapsulation.None,\n})\nexport class AuthenticatorComponent\n  implements OnInit, AfterContentInit, OnDestroy\n{\n  @Input() formFields: AuthenticatorMachineOptions['formFields'];\n  @Input() initialState: AuthenticatorMachineOptions['initialState'];\n  @Input() loginMechanisms: AuthenticatorMachineOptions['loginMechanisms'];\n  @Input() services: AuthenticatorMachineOptions['services'];\n  @Input() signUpAttributes: AuthenticatorMachineOptions['signUpAttributes'];\n  @Input() socialProviders: SocialProvider[];\n  @Input() variation: 'default' | 'modal';\n  @Input() hideSignUp: boolean;\n\n  @ContentChildren(AmplifySlotDirective)\n  private customComponentQuery: QueryList<AmplifySlotDirective> = null;\n\n  // translated texts\n  public signInTitle = translate('Sign In');\n  public signUpTitle = translate('Create Account');\n\n  private hasInitialized = false;\n  private isHandlingHubEvent = false;\n  private unsubscribeMachine: () => void;\n  private unsubscribeHub: ReturnType<typeof listenToAuthHub>;\n\n  constructor(\n    private authenticator: AuthenticatorService,\n    private contextService: CustomComponentsService,\n    private changeDetector: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    const {\n      initialState,\n      loginMechanisms,\n      services,\n      signUpAttributes,\n      socialProviders,\n      formFields,\n    } = this;\n\n    const { authService } = this.authenticator;\n\n    this.unsubscribeHub = listenToAuthHub(authService, (data, service) => {\n      defaultAuthHubHandler(data, service);\n      /**\n       * Hub events aren't properly caught by Angular, because they are\n       * synchronous events. Angular tracks async network events and\n       * html events, but not synchronous events like hub.\n       *\n       * On any notable hub events, we run change detection manually.\n       */\n      this.changeDetector.detectChanges();\n\n      /**\n       * Hub events that we handle can lead to multiple state changes:\n       * e.g. `authenticated` -> `signOut` -> initialState.\n       *\n       * We want to ensure change detection runs all the way, until\n       * we reach back to the initial state. Setting the below flag\n       * to true to until we reach initial state.\n       */\n      this.isHandlingHubEvent = true;\n    });\n\n    /**\n     * Subscribes to state machine changes and sends INIT event\n     * once machine reaches 'setup' state.\n     */\n    this.unsubscribeMachine = this.authenticator.subscribe(() => {\n      const { route } = this.authenticator;\n\n      if (this.isHandlingHubEvent) {\n        this.changeDetector.detectChanges();\n\n        const initialStateWithDefault = initialState ?? 'signIn';\n\n        // We can stop manual change detection if we're back to the initial state\n        if (route === initialStateWithDefault) {\n          this.isHandlingHubEvent = false;\n        }\n      }\n\n      if (!this.hasInitialized && route === 'setup') {\n        this.authenticator.send({\n          type: 'INIT',\n          data: {\n            initialState,\n            loginMechanisms,\n            services,\n            signUpAttributes,\n            socialProviders,\n            formFields,\n          },\n        });\n\n        this.hasInitialized = true;\n      }\n    }).unsubscribe;\n\n    /**\n     * handling translations after content init, because authenticator and its\n     * translations might be initialized before the main app's `ngOnInit` is run.\n     */\n    this.signInTitle = translate('Sign In');\n    this.signUpTitle = translate('Create Account');\n  }\n\n  /**\n   * Lifecycle Methods\n   */\n  ngAfterContentInit(): void {\n    this.contextService.customComponents = this.mapCustomComponents(\n      this.customComponentQuery\n    );\n  }\n\n  ngOnDestroy(): void {\n    if (this.unsubscribeMachine) this.unsubscribeMachine();\n    if (this.unsubscribeHub) this.unsubscribeHub();\n  }\n\n  /**\n   * Class Functions\n   */\n\n  // context passed to \"authenticated\" slot\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  public get route() {\n    return this.authenticator.route;\n  }\n\n  public onTabChange() {\n    const route = this.authenticator.route;\n    if (route === 'signIn') {\n      this.authenticator.toSignUp();\n    } else {\n      this.authenticator.toSignIn();\n    }\n  }\n\n  public hasTabs() {\n    const { route } = this.authenticator;\n    return route === 'signIn' || route === 'signUp';\n  }\n\n  public hasRouteComponent() {\n    const { route } = this.authenticator;\n\n    switch (route) {\n      case 'authenticated':\n      case 'idle':\n      case 'setup':\n      case 'signOut':\n      case 'autoSignIn':\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  private mapCustomComponents(\n    componentQuery: QueryList<AmplifySlotDirective>\n  ): Record<string, TemplateRef<any>> {\n    if (!componentQuery) return {};\n    const customComponents: Record<string, TemplateRef<any>> = {};\n    componentQuery.forEach((component) => {\n      customComponents[component.name] = component.template;\n    });\n\n    return customComponents;\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport {\n  FormFieldsArray,\n  getFormDataFromEvent,\n  hasTranslation,\n  translate,\n} from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-confirm-reset-password',\n  templateUrl: './amplify-confirm-reset-password.component.html',\n})\nexport class ConfirmResetPasswordComponent {\n  @HostBinding('attr.data-amplify-authenticator-confirmsignin') dataAttr = '';\n  @Input() public headerText = translate('Reset your password');\n\n  // translated strings\n  public backToSignInText = translate('Back to Sign In');\n  public resendCodeText = translate('Resend Code');\n  public sortedFormFields: FormFieldsArray;\n  /**\n   * Support backwards compatibility for erroneous 'Send Code' text\n   * See https://github.com/aws-amplify/amplify-ui/issues/1784\n   * TODO: Remove support for 'Send Code' translation in next Major release\n   */\n  public submitText = !hasTranslation('Send Code')\n    ? translate('Submit')\n    : translate('Send Code');\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, HostBinding, OnInit } from '@angular/core';\nimport { Logger } from 'aws-amplify';\nimport {\n  AuthChallengeNames,\n  FormFieldsArray,\n  getActorContext,\n  getFormDataFromEvent,\n  SignInContext,\n} from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport { translate } from '@aws-amplify/ui';\n\nconst logger = new Logger('ConfirmSignIn');\n\n@Component({\n  selector: 'amplify-confirm-sign-in',\n  templateUrl: './confirm-sign-in.component.html',\n})\nexport class ConfirmSignInComponent implements OnInit {\n  @HostBinding('attr.data-amplify-authenticator-confirmsignin') dataAttr = '';\n\n  // translated texts\n  public headerText: string;\n  public confirmText = translate('Confirm');\n  public backToSignInText = translate('Back to Sign In');\n  public sortedFormFields: FormFieldsArray;\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  ngOnInit(): void {\n    this.setHeaderText();\n  }\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  setHeaderText(): void {\n    const state = this.authenticator.authState;\n    const actorContext = getActorContext(state) as SignInContext;\n    const { challengeName } = actorContext;\n    switch (challengeName) {\n      case AuthChallengeNames.SOFTWARE_TOKEN_MFA:\n        this.headerText = translate('Confirm TOTP Code');\n        break;\n      case AuthChallengeNames.SMS_MFA:\n        this.headerText = translate('Confirm SMS Code');\n        break;\n      default:\n        logger.error('Unexpected challengeName', challengeName);\n    }\n  }\n\n  onInput(event: Event): void {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport {\n  FormFieldsArray,\n  getFormDataFromEvent,\n  translate,\n} from '@aws-amplify/ui';\n@Component({\n  selector: 'amplify-confirm-sign-up',\n  templateUrl: './confirm-sign-up.component.html',\n})\nexport class ConfirmSignUpComponent {\n  @Input() headerText = translate('Confirm Sign Up');\n\n  @HostBinding('attr.data-amplify-authenticator-confirmsignup') dataAttr = '';\n\n  // translated texts\n  public resendCodeText = translate('Resend Code');\n  public confirmText = translate('Confirm');\n  public emailMessage = translate(\n    'Your code is on the way. To log in, enter the code we emailed to'\n  );\n  public textedMessage = translate(\n    'Your code is on the way. To log in, enter the code we texted to'\n  );\n  public defaultMessage = translate(\n    'Your code is on the way. To log in, enter the code we sent you. It may take a minute to arrive.'\n  );\n  public minutesMessage = translate('It may take a minute to arrive.');\n\n  public sortedFormFields: FormFieldsArray;\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  public get confirmSignUpHeading(): string {\n    const { codeDeliveryDetails: { DeliveryMedium } = {} } = this.authenticator;\n    return DeliveryMedium === 'EMAIL'\n      ? translate('We Emailed You')\n      : DeliveryMedium === 'SMS'\n      ? translate('We Texted You')\n      : translate('We Sent A Code');\n  }\n\n  public get subtitleText(): string {\n    const { codeDeliveryDetails: { DeliveryMedium, Destination } = {} } =\n      this.authenticator;\n    return DeliveryMedium === 'EMAIL'\n      ? `${this.emailMessage} ${Destination}. ${this.minutesMessage}`\n      : DeliveryMedium === 'SMS'\n      ? `${this.textedMessage} ${Destination}. ${this.minutesMessage}`\n      : translate(`${this.defaultMessage}`);\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport {\n  FormFieldsArray,\n  getFormDataFromEvent,\n  translate,\n} from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\n\n@Component({\n  selector: 'amplify-confirm-verify-user',\n  templateUrl: './amplify-confirm-verify-user.component.html',\n})\nexport class ConfirmVerifyUserComponent {\n  @HostBinding('attr.data-amplify-authenticator-confirmverifyuser')\n  dataAttr = '';\n  @Input() public headerText = translate(\n    'Account recovery requires verified contact information'\n  );\n\n  // translated texts\n  public skipText = translate('Skip');\n  public submitText = translate('Submit');\n  public sortedFormFields: FormFieldsArray;\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { FederatedIdentityProviders } from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\n\n@Component({\n  selector: 'amplify-federated-sign-in-button',\n  templateUrl: './federated-sign-in-button.component.html',\n})\nexport class FederatedSignInButtonComponent {\n  @Input() provider: FederatedIdentityProviders;\n  @Input() text: string;\n\n  constructor(private authenticator: AuthenticatorService) {}\n\n  onClick = (): void => {\n    this.authenticator.send({\n      type: 'FEDERATED_SIGN_IN',\n      data: { provider: this.provider },\n    });\n  };\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FederatedIdentityProviders } from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport { translate } from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-federated-sign-in',\n  templateUrl: './federated-sign-in.component.html',\n})\nexport class FederatedSignInComponent implements OnInit {\n  public FederatedProviders = FederatedIdentityProviders;\n  public includeAmazon: boolean = false;\n  public includeApple: boolean = false;\n  public includeFacebook: boolean = false;\n  public includeGoogle: boolean = false;\n  public shouldShowFederatedSignIn = false;\n\n  // translated texts\n  public signInAmazonText: string;\n  public signInAppleText: string;\n  public signInFacebookText: string;\n  public signInGoogleText: string;\n\n  constructor(private authenticator: AuthenticatorService) {}\n\n  ngOnInit(): void {\n    const { socialProviders } = this.authenticator.context?.config;\n\n    this.setFederatedTexts();\n    this.includeAmazon = socialProviders?.includes('amazon');\n    this.includeApple = socialProviders?.includes('apple');\n    this.includeGoogle = socialProviders?.includes('google');\n    this.includeFacebook = socialProviders?.includes('facebook');\n\n    this.shouldShowFederatedSignIn =\n      this.includeAmazon ||\n      this.includeApple ||\n      this.includeFacebook ||\n      this.includeGoogle;\n  }\n\n  private setFederatedTexts() {\n    const { route } = this.authenticator;\n    const federatedText = route === 'signUp' ? 'Up' : 'In';\n    this.signInAmazonText = translate<string>(\n      `Sign ${federatedText} with Amazon`\n    );\n    this.signInAppleText = translate<string>(\n      `Sign ${federatedText} with Apple`\n    );\n    this.signInFacebookText = translate<string>(\n      `Sign ${federatedText} with Facebook`\n    );\n    this.signInGoogleText = translate<string>(\n      `Sign ${federatedText} with Google`\n    );\n  }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport { getFormDataFromEvent, translate } from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-force-new-password',\n  templateUrl: './force-new-password.component.html',\n})\nexport class ForceNewPasswordComponent {\n  @HostBinding('attr.data-amplify-authenticator-forcenewpassword')\n  dataAttr = '';\n  @Input() public headerText = translate('Change Password');\n\n  // translated texts\n  public changePasswordText = translate('Change Password');\n  public backToSignInText = translate('Back to Sign In');\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'amplify-force-new-password-form-fields',\n  templateUrl: './force-new-password-form-fields.component.html',\n})\nexport class ForceNewPasswordFormFieldsComponent {}\n","import { Component, Input } from '@angular/core';\nimport {\n  translate,\n  countryDialCodes,\n  FormFieldOptions,\n  getErrors,\n} from '@aws-amplify/ui';\nimport { nanoid } from 'nanoid';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\n\n@Component({\n  selector: 'amplify-form-field',\n  templateUrl: './form-field.component.html',\n})\nexport class FormFieldComponent {\n  @Input() name: string; // name of the input field\n  @Input() formField: FormFieldOptions; // form field options for this field\n\n  public defaultCountryCodeValue: string;\n  public countryDialCodesValue = countryDialCodes;\n  public errorId = nanoid(12);\n\n  constructor(private authenticator: AuthenticatorService) {}\n\n  get errors(): string[] {\n    const { validationErrors } = this.authenticator;\n    return getErrors(validationErrors[this.name]);\n  }\n\n  public onBlur($event: Event) {\n    let { name } = <HTMLInputElement>$event.target;\n\n    this.authenticator.updateBlur({ name });\n  }\n\n  isPasswordField(): boolean {\n    return this.formField.type === 'password';\n  }\n\n  isPhoneField(): boolean {\n    return this.formField.type === 'tel';\n  }\n\n  hasError(): boolean {\n    return this.errors?.length > 0;\n  }\n\n  get ariaDescribedBy() {\n    return this.hasError() ? this.errorId : undefined;\n  }\n\n  translate(phrase: string): string {\n    return translate<string>(phrase);\n  }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport {\n  FormFieldsArray,\n  getFormDataFromEvent,\n  translate,\n} from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-reset-password',\n  templateUrl: './reset-password.component.html',\n})\nexport class ResetPasswordComponent {\n  @HostBinding('attr.data-amplify-authenticator-resetPassword') dataAttr = '';\n  @Input() public headerText = translate('Reset your password');\n\n  // translated texts\n  public sendCodeText = translate('Send Code');\n  public backToSignInText = translate('Back to Sign In');\n  public sortedFormFields: FormFieldsArray;\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, HostBinding, OnInit } from '@angular/core';\nimport QRCode from 'qrcode';\nimport { Auth, Logger } from 'aws-amplify';\nimport {\n  FormFields,\n  FormFieldsArray,\n  getActorContext,\n  getFormDataFromEvent,\n  SignInContext,\n} from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport { translate } from '@aws-amplify/ui';\n\nconst logger = new Logger('SetupTotp');\n\n@Component({\n  selector: 'amplify-setup-totp',\n  templateUrl: './setup-totp.component.html',\n})\nexport class SetupTotpComponent implements OnInit {\n  @HostBinding('attr.data-amplify-authenticator-setup-totp') dataAttr = '';\n  public headerText = translate('Setup TOTP');\n  public qrCodeSource = '';\n  public secretKey = '';\n  public copyTextLabel = translate('COPY');\n\n  // translated texts\n  public backToSignInText = translate('Back to Sign In');\n  public confirmText = translate('Confirm');\n  public sortedFormFields: FormFieldsArray;\n  public formOverrides: FormFields;\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  ngOnInit(): void {\n    this.generateQRCode();\n  }\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  async generateQRCode() {\n    // TODO: This should be handled in core.\n    const state = this.authenticator.authState;\n    const actorContext = getActorContext(state) as SignInContext;\n    const { user } = actorContext;\n    try {\n      this.secretKey = await Auth.setupTOTP(user);\n      const issuer = this.formOverrides?.['QR']?.totpIssuer ?? 'AWSCognito';\n      const username =\n        this.formOverrides?.['QR']?.totpUsername ?? user.username;\n      const totpCode = encodeURI(\n        `otpauth://totp/${issuer}:${username}?secret=${this.secretKey}&issuer=${issuer}`\n      );\n\n      logger.info('totp code was generated:', totpCode);\n      this.qrCodeSource = await QRCode.toDataURL(totpCode);\n    } catch (err) {\n      logger.error(err);\n    }\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n\n  copyText(): void {\n    navigator.clipboard.writeText(this.secretKey);\n    this.copyTextLabel = translate('COPIED');\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport {\n  translate,\n  hasTranslation,\n  getFormDataFromEvent,\n  FormFieldsArray,\n  getSortedFormFields,\n} from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-sign-in',\n  templateUrl: './sign-in.component.html',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class SignInComponent {\n  @HostBinding('attr.data-amplify-authenticator-signin') dataAttr = '';\n\n  // translated phrases\n  // Support backwards compatibility for legacy key with trailing space\n  public forgotPasswordText = !hasTranslation('Forgot your password? ')\n    ? translate('Forgot your password?')\n    : translate('Forgot your password? ');\n  public signInButtonText = translate('Sign in');\n  public sortedFormFields: FormFieldsArray;\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport { translate, getFormDataFromEvent } from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-sign-up',\n  templateUrl: './sign-up.component.html',\n})\nexport class SignUpComponent {\n  @HostBinding('attr.data-amplify-authenticator-signup') dataAttr = '';\n\n  // translated texts\n  public createAccountText = translate('Create Account');\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  onInput(event: Event) {\n    let { checked, name, type, value } = <HTMLInputElement>event.target;\n\n    if (type === 'checkbox' && !checked) value = undefined;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amplify-sign-up-form-fields',\n  templateUrl: './sign-up-form-fields.component.html',\n})\nexport class SignUpFormFieldsComponent {}\n","import { defaultFormFieldOptions } from '@aws-amplify/ui';\nimport { AttributeInfoProvider } from './types';\n\nexport const getAttributeMap: AttributeInfoProvider = () =>\n  defaultFormFieldOptions;\n","import {\n  Component,\n  HostBinding,\n  Input,\n  OnInit,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  getActorState,\n  getFormDataFromEvent,\n  SignInState,\n  translate,\n} from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\nimport { getAttributeMap } from '../../../../common';\nimport { nanoid } from 'nanoid';\n@Component({\n  selector: 'amplify-verify-user',\n  templateUrl: './verify-user.component.html',\n  encapsulation: ViewEncapsulation.None,\n})\nexport class VerifyUserComponent implements OnInit {\n  @HostBinding('attr.data-amplify-authenticator-verifyuser') dataAttr = '';\n  @Input() public headerText = translate(\n    'Account recovery requires verified contact information'\n  );\n\n  public unverifiedAttributes = {};\n  public labelId = nanoid(12);\n\n  // translated texts\n  public skipText = translate('Skip');\n  public verifyText = translate('Verify');\n\n  constructor(public authenticator: AuthenticatorService) {}\n\n  ngOnInit(): void {\n    const actorState = getActorState(\n      this.authenticator.authState\n    ) as SignInState;\n    this.unverifiedAttributes = actorState.context.unverifiedAttributes;\n  }\n\n  public get context() {\n    return this.authenticator.slotContext;\n  }\n\n  getLabelForAttr(authAttr: string): string {\n    const attributeMap = getAttributeMap();\n    const label = attributeMap[authAttr]?.label;\n    return translate<string>(label);\n  }\n\n  onInput(event: Event) {\n    event.preventDefault();\n    const { name, value } = <HTMLInputElement>event.target;\n    this.authenticator.updateForm({ name, value });\n  }\n\n  onSubmit(event: Event): void {\n    event.preventDefault();\n    this.authenticator.submitForm(getFormDataFromEvent(event));\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport {\n  FormFieldComponents,\n  hasTranslation,\n  translate,\n  getDefaultFormFields,\n  getActorContext,\n  FormFieldsArray,\n  getSortedFormFields,\n  applyDefaults,\n  sortFormFields,\n} from '@aws-amplify/ui';\nimport { AuthenticatorService } from '../../../../services/authenticator.service';\n\n/**\n * Sorts the given formFields, then renders them in order.\n */\n@Component({\n  selector: 'amplify-base-form-fields',\n  templateUrl: './base-form-fields.component.html',\n})\nexport class BaseFormFieldsComponent implements OnInit {\n  @Input() route: FormFieldComponents; // formFields to sort and render\n  @HostBinding('style.display') display = 'contents';\n  public formFields: FormFieldsArray = [];\n\n  constructor(private authenticator: AuthenticatorService) {}\n\n  ngOnInit(): void {\n    const state = this.authenticator.authState;\n    this.formFields = getSortedFormFields(this.route, state);\n\n    if (this.route === 'confirmSignUp') {\n      this.handleConfirmSignUp();\n    }\n  }\n\n  private handleConfirmSignUp() {\n    /**\n     * @todo(breaking): Angular `confirmSignUp` has different placholder here from other frameworks.\n     *\n     * Translating here in a backwards-compatible manner, but should be resolved in next major version.\n     */\n\n    const state = this.authenticator.authState;\n\n    // backwards compatible placeholder text\n    const placeholder = !hasTranslation('Confirmation Code')\n      ? translate('Enter your code') // prioritize new placeholder\n      : translate('Confirmation Code'); // legacy placeholder\n\n    let defaultFormFields = getDefaultFormFields(this.route, state);\n\n    if (defaultFormFields.confirmation_code.placeholder) {\n      defaultFormFields.confirmation_code.placeholder = placeholder;\n    }\n\n    const customFormFields =\n      getActorContext(state).formFields?.confirmSignUp || {};\n\n    const newFormFields = applyDefaults(defaultFormFields, customFormFields);\n    this.formFields = sortFormFields(newFormFields);\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'button[amplify-button]',\n  templateUrl: './button.component.html',\n})\nexport class ButtonComponent implements OnInit {\n  @Input() type: 'submit' | 'button' = 'button';\n  @Input() fullWidth: boolean | string = false;\n  @Input() isDisabled: boolean | string = false;\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Input() variation: 'primary' | 'default' | 'link' = 'default';\n  @Input() fontWeight: 'normal' | 'bold' | 'lighter' = 'normal';\n\n  @HostBinding('type') typeAttr: string;\n  @HostBinding('attr.data-fullwidth') fullWidthAttr: boolean | string;\n  @HostBinding('attr.data-size') sizeAttr: string;\n  @HostBinding('attr.data-variation') variationAttr: string;\n  @HostBinding('style.font-weight') fontWeightAttr: string;\n\n  @HostBinding('attr.disabled') get getDisabled() {\n    return this.isDisabled ? '' : null;\n  }\n\n  @HostBinding('class') get classNames() {\n    let className = 'amplify-button';\n    if (this.variation) {\n      className += ` amplify-button--${this.variation}`;\n    }\n    if (this.size) {\n      className += ` amplify-button--${this.size}`;\n    }\n    if (this.fullWidth) {\n      className += ` amplify-button--fullwidth`;\n    }\n    if (this.isDisabled) {\n      className += ` amplify-button--disabled amplify-button--loading`;\n    }\n\n    return className;\n  }\n\n  ngOnInit() {\n    this.typeAttr = this.type;\n    this.fullWidthAttr = this.fullWidth;\n    this.sizeAttr = this.size;\n    this.variationAttr = this.variation;\n    this.fontWeightAttr = this.fontWeight;\n  }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'amplify-checkbox',\n  templateUrl: './checkbox.component.html',\n})\nexport class CheckboxComponent implements OnInit {\n  @Input() defaultChecked: boolean = false;\n  @Input() errorMessage: string;\n  @Input() hasError: boolean = false;\n  @Input() label: string;\n  @Input() name: string;\n  @Input() value: string;\n\n  public isChecked: boolean = false;\n\n  ngOnInit() {\n    if (this.defaultChecked) {\n      this.isChecked = true;\n    }\n  }\n\n  handleClick() {\n    this.isChecked = !this.isChecked;\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'amplify-error',\n  templateUrl: './error.component.html',\n})\nexport class ErrorComponent {\n  public isVisible = true;\n\n  public close() {\n    this.isVisible = false;\n  }\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { translate } from '@aws-amplify/ui';\nimport { nanoid } from 'nanoid';\n\n@Component({\n  selector: 'amplify-password-field',\n  templateUrl: './password-field.component.html',\n})\nexport class PasswordFieldComponent {\n  @Input() autocomplete = 'new-password';\n  @Input() disabled = false;\n  @Input() fieldId: string = `amplify-field-${nanoid(12)}`;\n  @Input() initialValue = '';\n  @Input() label = '';\n  @Input() name: string;\n  @Input() placeholder = '';\n  @Input() required = true;\n  @Input() labelHidden = false;\n  @Input() hasError: boolean;\n  @Input() describedBy: string;\n  @Output() setBlur = new EventEmitter<Event>();\n\n  public type: 'text' | 'password' = 'password';\n\n  public showPassword = false;\n  public showPasswordButtonlabel = translate('Show password');\n\n  togglePasswordText() {\n    this.showPassword = !this.showPassword;\n    this.showPasswordButtonlabel = this.showPassword\n      ? translate('Show password')\n      : translate('Hide password');\n    this.type = this.showPassword ? 'text' : 'password';\n  }\n}\n","import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { nanoid } from 'nanoid';\nimport { countryDialCodes } from '@aws-amplify/ui';\n\n@Component({\n  selector: 'amplify-phone-number-field',\n  templateUrl: './phone-number-field.component.html',\n})\nexport class PhoneNumberFieldComponent implements OnInit {\n  @Input() autocomplete = 'new-password';\n  @Input() disabled = false;\n  @Input() defaultCountryCode: string;\n  @Input() selectFieldId: string = `amplify-field-${nanoid(12)}`;\n  @Input() textFieldId: string = `amplify-field-${nanoid(12)}`;\n  @Input() initialValue = '';\n  @Input() label = '';\n  @Input() name: string;\n  @Input() placeholder = '';\n  @Input() required = true;\n  @Input() type: string;\n  @Input() labelHidden = false;\n  @Input() dialCodeList: Array<string>;\n  @Input() hasError: boolean;\n  @Input() describedBy: string;\n\n  @HostBinding('style.display') display = 'contents';\n\n  public countryDialCodesValues: Array<string>;\n\n  ngOnInit(): void {\n    this.countryDialCodesValues = this.dialCodeList ?? countryDialCodes;\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'amplify-form-select',\n  templateUrl: './select.component.html',\n})\nexport class SelectComponent {\n  @Input() items: string[];\n  @Input() name: string;\n  @Input() label: string;\n  @Input() id: string;\n  @Input() defaultValue: string;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\n\n@Component({\n  selector: 'amplify-tab-item',\n  templateUrl: './tab-item.component.html',\n})\nexport class TabItemComponent {\n  @Input() title: string;\n  @Input() active = false;\n  @Input() id: string;\n  @Input() labelledById: string;\n  @Input() tabIndex: number;\n  @HostBinding('style.display') display = 'block'; // emulate div behavior\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  QueryList,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { nanoid } from 'nanoid';\nimport { TabItemComponent } from '../tab-item/tab-item.component';\n\n@Component({\n  selector: 'amplify-tabs',\n  templateUrl: './tabs.component.html',\n})\nexport class TabsComponent implements AfterContentInit {\n  @ContentChildren(TabItemComponent) tabs: QueryList<TabItemComponent>;\n  @Output() tabChange = new EventEmitter();\n\n  ngAfterContentInit(): void {\n    // assign ids\n    this.tabs.forEach((tab, index) => {\n      tab.id = `radix-id-${nanoid(12)}-1-content-${index}`;\n      tab.labelledById = `radix-id-${nanoid(12)}-1-trigger-${index}`;\n    });\n\n    // find active tab\n    // TODO(enhancement): more declarative way for choosing the initial tab to render\n    const activeTabs = this.tabs.filter((tab) => tab.active);\n\n    // set active tab\n    if (activeTabs.length !== 1) {\n      this.selectTab(this.tabs.first);\n    }\n  }\n\n  selectTab(tab: TabItemComponent) {\n    this.tabs.forEach((tab) => {\n      tab.active = false;\n    });\n    tab.active = true;\n  }\n\n  handleTabClick(tab: TabItemComponent) {\n    if (tab.active) return; // don't do anything if clicks the current active tab\n    this.tabChange.emit();\n    this.selectTab(tab);\n  }\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { nanoid } from 'nanoid';\n\n@Component({\n  selector: 'amplify-text-field',\n  templateUrl: './text-field.component.html',\n})\nexport class TextFieldComponent {\n  @Input() autocomplete = 'new-password';\n  @Input() disabled = false;\n  @Input() fieldId: string = `amplify-field-${nanoid(12)}`;\n  @Input() initialValue = '';\n  @Input() label = '';\n  @Input() name: string;\n  @Input() placeholder = '';\n  @Input() required = true;\n  @Input() type: string;\n  @Input() labelHidden = false;\n  @Input() hasError: boolean;\n  @Input() describedBy: string;\n\n  @HostBinding('style.display') display = 'contents';\n}\n","import {\n  AfterContentInit,\n  Component,\n  HostBinding,\n  Input,\n  TemplateRef,\n} from '@angular/core';\nimport { CustomComponentsService } from '../../services/custom-components.service';\n\n@Component({\n  selector: 'amplify-slot',\n  templateUrl: './amplify-slot.component.html',\n})\nexport class AmplifySlotComponent implements AfterContentInit {\n  @Input() name: string;\n  @Input() context: Record<PropertyKey, any>;\n\n  @HostBinding('style.display') display = 'contents';\n\n  public overridingComponent: TemplateRef<any>;\n  public isOverriden: boolean = false;\n\n  constructor(private propService: CustomComponentsService) {}\n\n  ngAfterContentInit(): void {\n    const customComponents = this.propService.customComponents;\n    const overridingComponent = customComponents[this.name];\n\n    if (overridingComponent) {\n      this.overridingComponent = overridingComponent;\n      this.isOverriden = true;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Note: Angular components and directives inside module files has to be imported directly.\n *\n * Related: https://github.com/ng-packagr/ng-packagr/issues/567\n */\nimport { AuthenticatorComponent } from './components/authenticator/authenticator.component';\nimport { ConfirmResetPasswordComponent } from './components/confirm-reset-password/amplify-confirm-reset-password.component';\nimport { ConfirmSignInComponent } from './components/confirm-sign-in/confirm-sign-in.component';\nimport { ConfirmSignUpComponent } from './components/confirm-sign-up/confirm-sign-up.component';\nimport { ConfirmVerifyUserComponent } from './components/confirm-verify-user/amplify-confirm-verify-user.component';\nimport { FederatedSignInButtonComponent } from './components/federated-sign-in-button/federated-sign-in-button.component';\nimport { FederatedSignInComponent } from './components/federated-sign-in/federated-sign-in.component';\nimport { ForceNewPasswordComponent } from './components/force-new-password/force-new-password.component';\nimport { ForceNewPasswordFormFieldsComponent } from './components/force-new-password/force-new-password-form-fields/force-new-password-form-fields.component';\nimport { FormFieldComponent } from './components/form-field/form-field.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\nimport { SetupTotpComponent } from './components/setup-totp/setup-totp.component';\nimport { SignInComponent } from './components/sign-in/sign-in.component';\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\nimport { SignUpFormFieldsComponent } from './components/sign-up/sign-up-form-fields/sign-up-form-fields.component';\nimport { VerifyUserComponent } from './components/verify-user/verify-user.component';\nimport { BaseFormFieldsComponent } from './components/base-form-fields/base-form-fields.component';\n\nimport { ButtonComponent } from '../../primitives/button/button.component';\nimport { CheckboxComponent } from '../../primitives/checkbox/checkbox.component';\nimport { ErrorComponent } from '../../primitives/error/error.component';\nimport { PasswordFieldComponent } from '../../primitives/password-field/password-field.component';\nimport { PhoneNumberFieldComponent } from '../../primitives/phone-number-field/phone-number-field.component';\nimport { SelectComponent } from '../../primitives/select/select.component';\nimport { TabItemComponent } from '../../primitives/tab-item/tab-item.component';\nimport { TabsComponent } from '../../primitives/tabs/tabs.component';\nimport { TextFieldComponent } from '../../primitives/text-field/text-field.component';\n\nimport { AmplifySlotComponent } from '../../utilities/amplify-slot/amplify-slot.component';\nimport { AmplifySlotDirective } from '../../utilities/amplify-slot/amplify-slot.directive';\n\n@NgModule({\n  declarations: [\n    AmplifySlotComponent,\n    AmplifySlotDirective,\n    AuthenticatorComponent,\n    BaseFormFieldsComponent,\n    ButtonComponent,\n    CheckboxComponent,\n    ConfirmResetPasswordComponent,\n    ConfirmSignInComponent,\n    ConfirmSignUpComponent,\n    ConfirmVerifyUserComponent,\n    ErrorComponent,\n    FederatedSignInButtonComponent,\n    FederatedSignInComponent,\n    ForceNewPasswordComponent,\n    ForceNewPasswordFormFieldsComponent,\n    FormFieldComponent,\n    PasswordFieldComponent,\n    PhoneNumberFieldComponent,\n    ResetPasswordComponent,\n    SelectComponent,\n    SetupTotpComponent,\n    SignInComponent,\n    SignUpComponent,\n    SignUpFormFieldsComponent,\n    TabItemComponent,\n    TabsComponent,\n    TextFieldComponent,\n    VerifyUserComponent,\n  ],\n  imports: [CommonModule],\n  exports: [\n    AmplifySlotDirective,\n    AuthenticatorComponent,\n    CheckboxComponent,\n    SignUpFormFieldsComponent,\n    ForceNewPasswordFormFieldsComponent,\n    TextFieldComponent,\n  ],\n})\nexport class AmplifyAuthenticatorModule {}\n","/*\n * Public API Surface of ui-angular\n */\n\n/**\n * Modules\n */\nexport { AmplifyAuthenticatorModule } from './lib/components/authenticator/authenticator.module';\n\n/**\n * Components\n */\nexport * from './lib/components/authenticator/components';\nexport * from './lib/primitives';\n\n/**\n * Helpers\n */\nexport * from './lib/common';\n\n/**\n * Directives\n */\nexport * from './lib/utilities/amplify-slot/amplify-slot.directive';\n\n/**\n * Services\n */\nexport * from './lib/services/custom-components.service';\nexport * from './lib/services/authenticator.service';\n\n/**\n * Re-export public APIs from `@aws-amplify/ui`\n */\nexport { translations } from '@aws-amplify/ui';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {AuthenticatorComponent as ɵb} from './lib/components/authenticator/components/authenticator/authenticator.component';\nexport {BaseFormFieldsComponent as ɵc} from './lib/components/authenticator/components/base-form-fields/base-form-fields.component';\nexport {ConfirmResetPasswordComponent as ɵf} from './lib/components/authenticator/components/confirm-reset-password/amplify-confirm-reset-password.component';\nexport {ConfirmSignInComponent as ɵg} from './lib/components/authenticator/components/confirm-sign-in/confirm-sign-in.component';\nexport {ConfirmSignUpComponent as ɵh} from './lib/components/authenticator/components/confirm-sign-up/confirm-sign-up.component';\nexport {ConfirmVerifyUserComponent as ɵi} from './lib/components/authenticator/components/confirm-verify-user/amplify-confirm-verify-user.component';\nexport {FederatedSignInButtonComponent as ɵk} from './lib/components/authenticator/components/federated-sign-in-button/federated-sign-in-button.component';\nexport {FederatedSignInComponent as ɵl} from './lib/components/authenticator/components/federated-sign-in/federated-sign-in.component';\nexport {ForceNewPasswordFormFieldsComponent as ɵn} from './lib/components/authenticator/components/force-new-password/force-new-password-form-fields/force-new-password-form-fields.component';\nexport {ForceNewPasswordComponent as ɵm} from './lib/components/authenticator/components/force-new-password/force-new-password.component';\nexport {FormFieldComponent as ɵo} from './lib/components/authenticator/components/form-field/form-field.component';\nexport {ResetPasswordComponent as ɵr} from './lib/components/authenticator/components/reset-password/reset-password.component';\nexport {SetupTotpComponent as ɵt} from './lib/components/authenticator/components/setup-totp/setup-totp.component';\nexport {SignInComponent as ɵu} from './lib/components/authenticator/components/sign-in/sign-in.component';\nexport {SignUpFormFieldsComponent as ɵw} from './lib/components/authenticator/components/sign-up/sign-up-form-fields/sign-up-form-fields.component';\nexport {SignUpComponent as ɵv} from './lib/components/authenticator/components/sign-up/sign-up.component';\nexport {VerifyUserComponent as ɵba} from './lib/components/authenticator/components/verify-user/verify-user.component';\nexport {ButtonComponent as ɵd} from './lib/primitives/button/button.component';\nexport {CheckboxComponent as ɵe} from './lib/primitives/checkbox/checkbox.component';\nexport {ErrorComponent as ɵj} from './lib/primitives/error/error.component';\nexport {PasswordFieldComponent as ɵp} from './lib/primitives/password-field/password-field.component';\nexport {PhoneNumberFieldComponent as ɵq} from './lib/primitives/phone-number-field/phone-number-field.component';\nexport {SelectComponent as ɵs} from './lib/primitives/select/select.component';\nexport {TabItemComponent as ɵx} from './lib/primitives/tab-item/tab-item.component';\nexport {TabsComponent as ɵy} from './lib/primitives/tabs/tabs.component';\nexport {TextFieldComponent as ɵz} from './lib/primitives/text-field/text-field.component';\nexport {AmplifySlotComponent as ɵa} from './lib/utilities/amplify-slot/amplify-slot.component';"],"names":["logger","Logger"],"mappings":"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"}